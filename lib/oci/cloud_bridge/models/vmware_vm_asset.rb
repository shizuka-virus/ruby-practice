# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220509
require 'date'
require_relative 'asset'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # VMware VM type of asset.
  class CloudBridge::Models::VmwareVmAsset < CloudBridge::Models::Asset
    # @return [OCI::CloudBridge::Models::ComputeProperties]
    attr_accessor :compute

    # @return [OCI::CloudBridge::Models::VmProperties]
    attr_accessor :vm

    # @return [OCI::CloudBridge::Models::VmwareVmProperties]
    attr_accessor :vmware_vm

    # @return [OCI::CloudBridge::Models::VmwareVCenterProperties]
    attr_accessor :vmware_v_center

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'displayName',
        'inventory_id': :'inventoryId',
        'id': :'id',
        'compartment_id': :'compartmentId',
        'source_key': :'sourceKey',
        'external_asset_key': :'externalAssetKey',
        'asset_type': :'assetType',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'asset_source_ids': :'assetSourceIds',
        'lifecycle_state': :'lifecycleState',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags',
        'compute': :'compute',
        'vm': :'vm',
        'vmware_vm': :'vmwareVm',
        'vmware_v_center': :'vmwareVCenter'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'display_name': :'String',
        'inventory_id': :'String',
        'id': :'String',
        'compartment_id': :'String',
        'source_key': :'String',
        'external_asset_key': :'String',
        'asset_type': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'asset_source_ids': :'Array<String>',
        'lifecycle_state': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'compute': :'OCI::CloudBridge::Models::ComputeProperties',
        'vm': :'OCI::CloudBridge::Models::VmProperties',
        'vmware_vm': :'OCI::CloudBridge::Models::VmwareVmProperties',
        'vmware_v_center': :'OCI::CloudBridge::Models::VmwareVCenterProperties'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :display_name The value to assign to the {OCI::CloudBridge::Models::Asset#display_name #display_name} proprety
    # @option attributes [String] :inventory_id The value to assign to the {OCI::CloudBridge::Models::Asset#inventory_id #inventory_id} proprety
    # @option attributes [String] :id The value to assign to the {OCI::CloudBridge::Models::Asset#id #id} proprety
    # @option attributes [String] :compartment_id The value to assign to the {OCI::CloudBridge::Models::Asset#compartment_id #compartment_id} proprety
    # @option attributes [String] :source_key The value to assign to the {OCI::CloudBridge::Models::Asset#source_key #source_key} proprety
    # @option attributes [String] :external_asset_key The value to assign to the {OCI::CloudBridge::Models::Asset#external_asset_key #external_asset_key} proprety
    # @option attributes [DateTime] :time_created The value to assign to the {OCI::CloudBridge::Models::Asset#time_created #time_created} proprety
    # @option attributes [DateTime] :time_updated The value to assign to the {OCI::CloudBridge::Models::Asset#time_updated #time_updated} proprety
    # @option attributes [Array<String>] :asset_source_ids The value to assign to the {OCI::CloudBridge::Models::Asset#asset_source_ids #asset_source_ids} proprety
    # @option attributes [String] :lifecycle_state The value to assign to the {OCI::CloudBridge::Models::Asset#lifecycle_state #lifecycle_state} proprety
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {OCI::CloudBridge::Models::Asset#freeform_tags #freeform_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {OCI::CloudBridge::Models::Asset#defined_tags #defined_tags} proprety
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {OCI::CloudBridge::Models::Asset#system_tags #system_tags} proprety
    # @option attributes [OCI::CloudBridge::Models::ComputeProperties] :compute The value to assign to the {#compute} property
    # @option attributes [OCI::CloudBridge::Models::VmProperties] :vm The value to assign to the {#vm} property
    # @option attributes [OCI::CloudBridge::Models::VmwareVmProperties] :vmware_vm The value to assign to the {#vmware_vm} property
    # @option attributes [OCI::CloudBridge::Models::VmwareVCenterProperties] :vmware_v_center The value to assign to the {#vmware_v_center} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['assetType'] = 'VMWARE_VM'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compute = attributes[:'compute'] if attributes[:'compute']

      self.vm = attributes[:'vm'] if attributes[:'vm']

      self.vmware_vm = attributes[:'vmwareVm'] if attributes[:'vmwareVm']

      raise 'You cannot provide both :vmwareVm and :vmware_vm' if attributes.key?(:'vmwareVm') && attributes.key?(:'vmware_vm')

      self.vmware_vm = attributes[:'vmware_vm'] if attributes[:'vmware_vm']

      self.vmware_v_center = attributes[:'vmwareVCenter'] if attributes[:'vmwareVCenter']

      raise 'You cannot provide both :vmwareVCenter and :vmware_v_center' if attributes.key?(:'vmwareVCenter') && attributes.key?(:'vmware_v_center')

      self.vmware_v_center = attributes[:'vmware_v_center'] if attributes[:'vmware_v_center']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_name == other.display_name &&
        inventory_id == other.inventory_id &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        source_key == other.source_key &&
        external_asset_key == other.external_asset_key &&
        asset_type == other.asset_type &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        asset_source_ids == other.asset_source_ids &&
        lifecycle_state == other.lifecycle_state &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags &&
        compute == other.compute &&
        vm == other.vm &&
        vmware_vm == other.vmware_vm &&
        vmware_v_center == other.vmware_v_center
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [display_name, inventory_id, id, compartment_id, source_key, external_asset_key, asset_type, time_created, time_updated, asset_source_ids, lifecycle_state, freeform_tags, defined_tags, system_tags, compute, vm, vmware_vm, vmware_v_center].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
