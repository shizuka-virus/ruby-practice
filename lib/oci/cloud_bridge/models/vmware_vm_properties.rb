# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220509
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # VMware virtual machine related properties.
  class CloudBridge::Models::VmwareVmProperties
    # Cluster name.
    # @return [String]
    attr_accessor :cluster

    # Customer fields.
    # @return [Array<String>]
    attr_accessor :customer_fields

    # Customer defined tags.
    # @return [Array<OCI::CloudBridge::Models::CustomerTag>]
    attr_accessor :customer_tags

    # vCenter-specific identifier of the virtual machine.
    # @return [String]
    attr_accessor :instance_uuid

    # Path directory of the asset.
    # @return [String]
    attr_accessor :path

    # VMware tools status.
    # @return [String]
    attr_accessor :vmware_tools_status

    # Whether changed block tracking for this VM's disk is active.
    # @return [BOOLEAN]
    attr_accessor :is_disks_uuid_enabled

    # Indicates that change tracking is supported for virtual disks of this virtual machine.
    # However, even if change tracking is supported, it might not be available for all disks of the virtual machine.
    #
    # @return [BOOLEAN]
    attr_accessor :is_disks_cbt_enabled

    # Fault tolerance state.
    # @return [String]
    attr_accessor :fault_tolerance_state

    # Fault tolerance bandwidth.
    # @return [Integer]
    attr_accessor :fault_tolerance_bandwidth

    # Fault tolerance to secondary latency.
    # @return [Integer]
    attr_accessor :fault_tolerance_secondary_latency

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'cluster': :'cluster',
        'customer_fields': :'customerFields',
        'customer_tags': :'customerTags',
        'instance_uuid': :'instanceUuid',
        'path': :'path',
        'vmware_tools_status': :'vmwareToolsStatus',
        'is_disks_uuid_enabled': :'isDisksUuidEnabled',
        'is_disks_cbt_enabled': :'isDisksCbtEnabled',
        'fault_tolerance_state': :'faultToleranceState',
        'fault_tolerance_bandwidth': :'faultToleranceBandwidth',
        'fault_tolerance_secondary_latency': :'faultToleranceSecondaryLatency'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'cluster': :'String',
        'customer_fields': :'Array<String>',
        'customer_tags': :'Array<OCI::CloudBridge::Models::CustomerTag>',
        'instance_uuid': :'String',
        'path': :'String',
        'vmware_tools_status': :'String',
        'is_disks_uuid_enabled': :'BOOLEAN',
        'is_disks_cbt_enabled': :'BOOLEAN',
        'fault_tolerance_state': :'String',
        'fault_tolerance_bandwidth': :'Integer',
        'fault_tolerance_secondary_latency': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :cluster The value to assign to the {#cluster} property
    # @option attributes [Array<String>] :customer_fields The value to assign to the {#customer_fields} property
    # @option attributes [Array<OCI::CloudBridge::Models::CustomerTag>] :customer_tags The value to assign to the {#customer_tags} property
    # @option attributes [String] :instance_uuid The value to assign to the {#instance_uuid} property
    # @option attributes [String] :path The value to assign to the {#path} property
    # @option attributes [String] :vmware_tools_status The value to assign to the {#vmware_tools_status} property
    # @option attributes [BOOLEAN] :is_disks_uuid_enabled The value to assign to the {#is_disks_uuid_enabled} property
    # @option attributes [BOOLEAN] :is_disks_cbt_enabled The value to assign to the {#is_disks_cbt_enabled} property
    # @option attributes [String] :fault_tolerance_state The value to assign to the {#fault_tolerance_state} property
    # @option attributes [Integer] :fault_tolerance_bandwidth The value to assign to the {#fault_tolerance_bandwidth} property
    # @option attributes [Integer] :fault_tolerance_secondary_latency The value to assign to the {#fault_tolerance_secondary_latency} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.cluster = attributes[:'cluster'] if attributes[:'cluster']

      self.customer_fields = attributes[:'customerFields'] if attributes[:'customerFields']

      raise 'You cannot provide both :customerFields and :customer_fields' if attributes.key?(:'customerFields') && attributes.key?(:'customer_fields')

      self.customer_fields = attributes[:'customer_fields'] if attributes[:'customer_fields']

      self.customer_tags = attributes[:'customerTags'] if attributes[:'customerTags']

      raise 'You cannot provide both :customerTags and :customer_tags' if attributes.key?(:'customerTags') && attributes.key?(:'customer_tags')

      self.customer_tags = attributes[:'customer_tags'] if attributes[:'customer_tags']

      self.instance_uuid = attributes[:'instanceUuid'] if attributes[:'instanceUuid']

      raise 'You cannot provide both :instanceUuid and :instance_uuid' if attributes.key?(:'instanceUuid') && attributes.key?(:'instance_uuid')

      self.instance_uuid = attributes[:'instance_uuid'] if attributes[:'instance_uuid']

      self.path = attributes[:'path'] if attributes[:'path']

      self.vmware_tools_status = attributes[:'vmwareToolsStatus'] if attributes[:'vmwareToolsStatus']

      raise 'You cannot provide both :vmwareToolsStatus and :vmware_tools_status' if attributes.key?(:'vmwareToolsStatus') && attributes.key?(:'vmware_tools_status')

      self.vmware_tools_status = attributes[:'vmware_tools_status'] if attributes[:'vmware_tools_status']

      self.is_disks_uuid_enabled = attributes[:'isDisksUuidEnabled'] unless attributes[:'isDisksUuidEnabled'].nil?

      raise 'You cannot provide both :isDisksUuidEnabled and :is_disks_uuid_enabled' if attributes.key?(:'isDisksUuidEnabled') && attributes.key?(:'is_disks_uuid_enabled')

      self.is_disks_uuid_enabled = attributes[:'is_disks_uuid_enabled'] unless attributes[:'is_disks_uuid_enabled'].nil?

      self.is_disks_cbt_enabled = attributes[:'isDisksCbtEnabled'] unless attributes[:'isDisksCbtEnabled'].nil?

      raise 'You cannot provide both :isDisksCbtEnabled and :is_disks_cbt_enabled' if attributes.key?(:'isDisksCbtEnabled') && attributes.key?(:'is_disks_cbt_enabled')

      self.is_disks_cbt_enabled = attributes[:'is_disks_cbt_enabled'] unless attributes[:'is_disks_cbt_enabled'].nil?

      self.fault_tolerance_state = attributes[:'faultToleranceState'] if attributes[:'faultToleranceState']

      raise 'You cannot provide both :faultToleranceState and :fault_tolerance_state' if attributes.key?(:'faultToleranceState') && attributes.key?(:'fault_tolerance_state')

      self.fault_tolerance_state = attributes[:'fault_tolerance_state'] if attributes[:'fault_tolerance_state']

      self.fault_tolerance_bandwidth = attributes[:'faultToleranceBandwidth'] if attributes[:'faultToleranceBandwidth']

      raise 'You cannot provide both :faultToleranceBandwidth and :fault_tolerance_bandwidth' if attributes.key?(:'faultToleranceBandwidth') && attributes.key?(:'fault_tolerance_bandwidth')

      self.fault_tolerance_bandwidth = attributes[:'fault_tolerance_bandwidth'] if attributes[:'fault_tolerance_bandwidth']

      self.fault_tolerance_secondary_latency = attributes[:'faultToleranceSecondaryLatency'] if attributes[:'faultToleranceSecondaryLatency']

      raise 'You cannot provide both :faultToleranceSecondaryLatency and :fault_tolerance_secondary_latency' if attributes.key?(:'faultToleranceSecondaryLatency') && attributes.key?(:'fault_tolerance_secondary_latency')

      self.fault_tolerance_secondary_latency = attributes[:'fault_tolerance_secondary_latency'] if attributes[:'fault_tolerance_secondary_latency']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        cluster == other.cluster &&
        customer_fields == other.customer_fields &&
        customer_tags == other.customer_tags &&
        instance_uuid == other.instance_uuid &&
        path == other.path &&
        vmware_tools_status == other.vmware_tools_status &&
        is_disks_uuid_enabled == other.is_disks_uuid_enabled &&
        is_disks_cbt_enabled == other.is_disks_cbt_enabled &&
        fault_tolerance_state == other.fault_tolerance_state &&
        fault_tolerance_bandwidth == other.fault_tolerance_bandwidth &&
        fault_tolerance_secondary_latency == other.fault_tolerance_secondary_latency
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [cluster, customer_fields, customer_tags, instance_uuid, path, vmware_tools_status, is_disks_uuid_enabled, is_disks_cbt_enabled, fault_tolerance_state, fault_tolerance_bandwidth, fault_tolerance_secondary_latency].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
