# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210224
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details for updating a certificate authority (CA).
  class CertificatesManagement::Models::UpdateCertificateAuthorityDetails
    # A brief description of the CA.
    # @return [String]
    attr_accessor :description

    # Makes this version the current version. This property cannot be updated in combination with any other properties.
    # @return [Integer]
    attr_accessor :current_version_number

    # @return [OCI::CertificatesManagement::Models::UpdateCertificateAuthorityConfigDetails]
    attr_accessor :certificate_authority_config

    # @return [OCI::CertificatesManagement::Models::CertificateRevocationListDetails]
    attr_accessor :certificate_revocation_list_details

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Usage of predefined tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # A list of rules that control how the CA is used and managed.
    # @return [Array<OCI::CertificatesManagement::Models::CertificateAuthorityRule>]
    attr_accessor :certificate_authority_rules

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'description': :'description',
        'current_version_number': :'currentVersionNumber',
        'certificate_authority_config': :'certificateAuthorityConfig',
        'certificate_revocation_list_details': :'certificateRevocationListDetails',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'certificate_authority_rules': :'certificateAuthorityRules'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'description': :'String',
        'current_version_number': :'Integer',
        'certificate_authority_config': :'OCI::CertificatesManagement::Models::UpdateCertificateAuthorityConfigDetails',
        'certificate_revocation_list_details': :'OCI::CertificatesManagement::Models::CertificateRevocationListDetails',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'certificate_authority_rules': :'Array<OCI::CertificatesManagement::Models::CertificateAuthorityRule>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Integer] :current_version_number The value to assign to the {#current_version_number} property
    # @option attributes [OCI::CertificatesManagement::Models::UpdateCertificateAuthorityConfigDetails] :certificate_authority_config The value to assign to the {#certificate_authority_config} property
    # @option attributes [OCI::CertificatesManagement::Models::CertificateRevocationListDetails] :certificate_revocation_list_details The value to assign to the {#certificate_revocation_list_details} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Array<OCI::CertificatesManagement::Models::CertificateAuthorityRule>] :certificate_authority_rules The value to assign to the {#certificate_authority_rules} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.description = attributes[:'description'] if attributes[:'description']

      self.current_version_number = attributes[:'currentVersionNumber'] if attributes[:'currentVersionNumber']

      raise 'You cannot provide both :currentVersionNumber and :current_version_number' if attributes.key?(:'currentVersionNumber') && attributes.key?(:'current_version_number')

      self.current_version_number = attributes[:'current_version_number'] if attributes[:'current_version_number']

      self.certificate_authority_config = attributes[:'certificateAuthorityConfig'] if attributes[:'certificateAuthorityConfig']

      raise 'You cannot provide both :certificateAuthorityConfig and :certificate_authority_config' if attributes.key?(:'certificateAuthorityConfig') && attributes.key?(:'certificate_authority_config')

      self.certificate_authority_config = attributes[:'certificate_authority_config'] if attributes[:'certificate_authority_config']

      self.certificate_revocation_list_details = attributes[:'certificateRevocationListDetails'] if attributes[:'certificateRevocationListDetails']

      raise 'You cannot provide both :certificateRevocationListDetails and :certificate_revocation_list_details' if attributes.key?(:'certificateRevocationListDetails') && attributes.key?(:'certificate_revocation_list_details')

      self.certificate_revocation_list_details = attributes[:'certificate_revocation_list_details'] if attributes[:'certificate_revocation_list_details']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.certificate_authority_rules = attributes[:'certificateAuthorityRules'] if attributes[:'certificateAuthorityRules']

      raise 'You cannot provide both :certificateAuthorityRules and :certificate_authority_rules' if attributes.key?(:'certificateAuthorityRules') && attributes.key?(:'certificate_authority_rules')

      self.certificate_authority_rules = attributes[:'certificate_authority_rules'] if attributes[:'certificate_authority_rules']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        description == other.description &&
        current_version_number == other.current_version_number &&
        certificate_authority_config == other.certificate_authority_config &&
        certificate_revocation_list_details == other.certificate_revocation_list_details &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        certificate_authority_rules == other.certificate_authority_rules
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [description, current_version_number, certificate_authority_config, certificate_revocation_list_details, freeform_tags, defined_tags, certificate_authority_rules].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
