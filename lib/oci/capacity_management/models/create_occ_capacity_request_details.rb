# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details about the create request for the capacity request.
  #
  class CapacityManagement::Models::CreateOccCapacityRequestDetails
    NAMESPACE_ENUM = [
      NAMESPACE_COMPUTE = 'COMPUTE'.freeze
    ].freeze

    REQUEST_STATE_ENUM = [
      REQUEST_STATE_CREATED = 'CREATED'.freeze,
      REQUEST_STATE_SUBMITTED = 'SUBMITTED'.freeze
    ].freeze

    # **[Required]** Since all resources are at tenancy level hence this will be the ocid of the tenancy where operation is to be performed.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The OCID of the availability catalog against which capacity request is made.
    # @return [String]
    attr_accessor :occ_availability_catalog_id

    # **[Required]** The name of the OCI service in consideration. For example, Compute, Exadata, and so on.
    # @return [String]
    attr_reader :namespace

    # **[Required]** The name of the region for which the capacity request is made.
    # @return [String]
    attr_accessor :region

    # **[Required]** An user-friendly name for the capacity request. Does not have to be unique, and it's changeable. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # Meaningful text about the capacity request.
    # @return [String]
    attr_accessor :description

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in a Failed State.
    # @return [String]
    attr_accessor :lifecycle_details

    # **[Required]** The availability domain (AD) for which the capacity request is made. If this is specified then the capacity will be validated and fulfilled within the scope of this AD.
    # @return [String]
    attr_accessor :availability_domain

    # **[Required]** The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
    # @return [DateTime]
    attr_accessor :date_expected_capacity_handover

    # The subset of request states available for creating the capacity request.
    # @return [String]
    attr_reader :request_state

    # **[Required]** A list of different resources requested by the user.
    # @return [Array<OCI::CapacityManagement::Models::OccCapacityRequestBaseDetails>]
    attr_accessor :details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'compartmentId',
        'occ_availability_catalog_id': :'occAvailabilityCatalogId',
        'namespace': :'namespace',
        'region': :'region',
        'display_name': :'displayName',
        'description': :'description',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'lifecycle_details': :'lifecycleDetails',
        'availability_domain': :'availabilityDomain',
        'date_expected_capacity_handover': :'dateExpectedCapacityHandover',
        'request_state': :'requestState',
        'details': :'details'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'String',
        'occ_availability_catalog_id': :'String',
        'namespace': :'String',
        'region': :'String',
        'display_name': :'String',
        'description': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'lifecycle_details': :'String',
        'availability_domain': :'String',
        'date_expected_capacity_handover': :'DateTime',
        'request_state': :'String',
        'details': :'Array<OCI::CapacityManagement::Models::OccCapacityRequestBaseDetails>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :occ_availability_catalog_id The value to assign to the {#occ_availability_catalog_id} property
    # @option attributes [String] :namespace The value to assign to the {#namespace} property
    # @option attributes [String] :region The value to assign to the {#region} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :availability_domain The value to assign to the {#availability_domain} property
    # @option attributes [DateTime] :date_expected_capacity_handover The value to assign to the {#date_expected_capacity_handover} property
    # @option attributes [String] :request_state The value to assign to the {#request_state} property
    # @option attributes [Array<OCI::CapacityManagement::Models::OccCapacityRequestBaseDetails>] :details The value to assign to the {#details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.occ_availability_catalog_id = attributes[:'occAvailabilityCatalogId'] if attributes[:'occAvailabilityCatalogId']

      raise 'You cannot provide both :occAvailabilityCatalogId and :occ_availability_catalog_id' if attributes.key?(:'occAvailabilityCatalogId') && attributes.key?(:'occ_availability_catalog_id')

      self.occ_availability_catalog_id = attributes[:'occ_availability_catalog_id'] if attributes[:'occ_availability_catalog_id']

      self.namespace = attributes[:'namespace'] if attributes[:'namespace']

      self.region = attributes[:'region'] if attributes[:'region']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.availability_domain = attributes[:'availabilityDomain'] if attributes[:'availabilityDomain']

      raise 'You cannot provide both :availabilityDomain and :availability_domain' if attributes.key?(:'availabilityDomain') && attributes.key?(:'availability_domain')

      self.availability_domain = attributes[:'availability_domain'] if attributes[:'availability_domain']

      self.date_expected_capacity_handover = attributes[:'dateExpectedCapacityHandover'] if attributes[:'dateExpectedCapacityHandover']

      raise 'You cannot provide both :dateExpectedCapacityHandover and :date_expected_capacity_handover' if attributes.key?(:'dateExpectedCapacityHandover') && attributes.key?(:'date_expected_capacity_handover')

      self.date_expected_capacity_handover = attributes[:'date_expected_capacity_handover'] if attributes[:'date_expected_capacity_handover']

      self.request_state = attributes[:'requestState'] if attributes[:'requestState']
      self.request_state = "CREATED" if request_state.nil? && !attributes.key?(:'requestState') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :requestState and :request_state' if attributes.key?(:'requestState') && attributes.key?(:'request_state')

      self.request_state = attributes[:'request_state'] if attributes[:'request_state']
      self.request_state = "CREATED" if request_state.nil? && !attributes.key?(:'requestState') && !attributes.key?(:'request_state') # rubocop:disable Style/StringLiterals

      self.details = attributes[:'details'] if attributes[:'details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] namespace Object to be assigned
    def namespace=(namespace)
      raise "Invalid value for 'namespace': this must be one of the values in NAMESPACE_ENUM." if namespace && !NAMESPACE_ENUM.include?(namespace)

      @namespace = namespace
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] request_state Object to be assigned
    def request_state=(request_state)
      raise "Invalid value for 'request_state': this must be one of the values in REQUEST_STATE_ENUM." if request_state && !REQUEST_STATE_ENUM.include?(request_state)

      @request_state = request_state
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compartment_id == other.compartment_id &&
        occ_availability_catalog_id == other.occ_availability_catalog_id &&
        namespace == other.namespace &&
        region == other.region &&
        display_name == other.display_name &&
        description == other.description &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        lifecycle_details == other.lifecycle_details &&
        availability_domain == other.availability_domain &&
        date_expected_capacity_handover == other.date_expected_capacity_handover &&
        request_state == other.request_state &&
        details == other.details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compartment_id, occ_availability_catalog_id, namespace, region, display_name, description, freeform_tags, defined_tags, lifecycle_details, availability_domain, date_expected_capacity_handover, request_state, details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
