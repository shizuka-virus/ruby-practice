# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107
require 'date'
require_relative 'occ_capacity_request_base_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details about the compute servers required for creating a capacity request.
  class CapacityManagement::Models::OccCapacityRequestComputeDetails < CapacityManagement::Models::OccCapacityRequestBaseDetails
    # **[Required]** The name of the COMPUTE server shape for which the request is made. Do not use CAPACITY_CONSTRAINT as the resource name.
    # @return [String]
    attr_accessor :resource_name

    # **[Required]** The number of compute server's with name <resourceName> required by the user.
    # @return [Integer]
    attr_accessor :demand_quantity

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'resource_type': :'resourceType',
        'workload_type': :'workloadType',
        'expected_handover_quantity': :'expectedHandoverQuantity',
        'date_expected_handover': :'dateExpectedHandover',
        'actual_handover_quantity': :'actualHandoverQuantity',
        'date_actual_handover': :'dateActualHandover',
        'resource_name': :'resourceName',
        'demand_quantity': :'demandQuantity'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'resource_type': :'String',
        'workload_type': :'String',
        'expected_handover_quantity': :'Integer',
        'date_expected_handover': :'DateTime',
        'actual_handover_quantity': :'Integer',
        'date_actual_handover': :'DateTime',
        'resource_name': :'String',
        'demand_quantity': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :workload_type The value to assign to the {OCI::CapacityManagement::Models::OccCapacityRequestBaseDetails#workload_type #workload_type} proprety
    # @option attributes [Integer] :expected_handover_quantity The value to assign to the {OCI::CapacityManagement::Models::OccCapacityRequestBaseDetails#expected_handover_quantity #expected_handover_quantity} proprety
    # @option attributes [DateTime] :date_expected_handover The value to assign to the {OCI::CapacityManagement::Models::OccCapacityRequestBaseDetails#date_expected_handover #date_expected_handover} proprety
    # @option attributes [Integer] :actual_handover_quantity The value to assign to the {OCI::CapacityManagement::Models::OccCapacityRequestBaseDetails#actual_handover_quantity #actual_handover_quantity} proprety
    # @option attributes [DateTime] :date_actual_handover The value to assign to the {OCI::CapacityManagement::Models::OccCapacityRequestBaseDetails#date_actual_handover #date_actual_handover} proprety
    # @option attributes [String] :resource_name The value to assign to the {#resource_name} property
    # @option attributes [Integer] :demand_quantity The value to assign to the {#demand_quantity} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['resourceType'] = 'SERVER_HW'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.resource_name = attributes[:'resourceName'] if attributes[:'resourceName']

      raise 'You cannot provide both :resourceName and :resource_name' if attributes.key?(:'resourceName') && attributes.key?(:'resource_name')

      self.resource_name = attributes[:'resource_name'] if attributes[:'resource_name']

      self.demand_quantity = attributes[:'demandQuantity'] if attributes[:'demandQuantity']

      raise 'You cannot provide both :demandQuantity and :demand_quantity' if attributes.key?(:'demandQuantity') && attributes.key?(:'demand_quantity')

      self.demand_quantity = attributes[:'demand_quantity'] if attributes[:'demand_quantity']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        resource_type == other.resource_type &&
        workload_type == other.workload_type &&
        expected_handover_quantity == other.expected_handover_quantity &&
        date_expected_handover == other.date_expected_handover &&
        actual_handover_quantity == other.actual_handover_quantity &&
        date_actual_handover == other.date_actual_handover &&
        resource_name == other.resource_name &&
        demand_quantity == other.demand_quantity
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [resource_type, workload_type, expected_handover_quantity, date_expected_handover, actual_handover_quantity, date_actual_handover, resource_name, demand_quantity].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
