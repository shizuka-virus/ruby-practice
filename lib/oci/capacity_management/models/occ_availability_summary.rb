# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The details about the available capacity and constraints for different resource types present in the availability catalog.
  class CapacityManagement::Models::OccAvailabilitySummary
    NAMESPACE_ENUM = [
      NAMESPACE_COMPUTE = 'COMPUTE'.freeze,
      NAMESPACE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    RESOURCE_TYPE_ENUM = [
      RESOURCE_TYPE_SERVER_HW = 'SERVER_HW'.freeze,
      RESOURCE_TYPE_CAPACITY_CONSTRAINT = 'CAPACITY_CONSTRAINT'.freeze,
      RESOURCE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    WORKLOAD_TYPE_ENUM = [
      WORKLOAD_TYPE_GENERIC = 'GENERIC'.freeze,
      WORKLOAD_TYPE_ROW = 'ROW'.freeze,
      WORKLOAD_TYPE_US_PROD = 'US_PROD'.freeze,
      WORKLOAD_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the availability catalog.
    # @return [String]
    attr_accessor :catalog_id

    # **[Required]** The name of the OCI service in consideration. For example, Compute, Exadata, and so on.
    #
    # @return [String]
    attr_reader :namespace

    # **[Required]** The date by which the customer must place the order to have their capacity requirements met by the customer handover date.
    # @return [DateTime]
    attr_accessor :date_final_customer_order

    # **[Required]** The date by which the capacity requested by customers before dateFinalCustomerOrder needs to be fulfilled.
    # @return [DateTime]
    attr_accessor :date_expected_capacity_handover

    # **[Required]** The different types of resources against which customers can place capacity requests.
    # @return [String]
    attr_reader :resource_type

    # **[Required]** The type of workload (Generic/ROW).
    # @return [String]
    attr_reader :workload_type

    # **[Required]** The name of the resource that the customer can request.
    # @return [String]
    attr_accessor :resource_name

    # **[Required]** The quantity of available resource that the customer can request.
    # @return [Integer]
    attr_accessor :available_quantity

    # **[Required]** The unit in which the resource available is measured.
    # @return [String]
    attr_accessor :unit

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'catalog_id': :'catalogId',
        'namespace': :'namespace',
        'date_final_customer_order': :'dateFinalCustomerOrder',
        'date_expected_capacity_handover': :'dateExpectedCapacityHandover',
        'resource_type': :'resourceType',
        'workload_type': :'workloadType',
        'resource_name': :'resourceName',
        'available_quantity': :'availableQuantity',
        'unit': :'unit'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'catalog_id': :'String',
        'namespace': :'String',
        'date_final_customer_order': :'DateTime',
        'date_expected_capacity_handover': :'DateTime',
        'resource_type': :'String',
        'workload_type': :'String',
        'resource_name': :'String',
        'available_quantity': :'Integer',
        'unit': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :catalog_id The value to assign to the {#catalog_id} property
    # @option attributes [String] :namespace The value to assign to the {#namespace} property
    # @option attributes [DateTime] :date_final_customer_order The value to assign to the {#date_final_customer_order} property
    # @option attributes [DateTime] :date_expected_capacity_handover The value to assign to the {#date_expected_capacity_handover} property
    # @option attributes [String] :resource_type The value to assign to the {#resource_type} property
    # @option attributes [String] :workload_type The value to assign to the {#workload_type} property
    # @option attributes [String] :resource_name The value to assign to the {#resource_name} property
    # @option attributes [Integer] :available_quantity The value to assign to the {#available_quantity} property
    # @option attributes [String] :unit The value to assign to the {#unit} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.catalog_id = attributes[:'catalogId'] if attributes[:'catalogId']

      raise 'You cannot provide both :catalogId and :catalog_id' if attributes.key?(:'catalogId') && attributes.key?(:'catalog_id')

      self.catalog_id = attributes[:'catalog_id'] if attributes[:'catalog_id']

      self.namespace = attributes[:'namespace'] if attributes[:'namespace']

      self.date_final_customer_order = attributes[:'dateFinalCustomerOrder'] if attributes[:'dateFinalCustomerOrder']

      raise 'You cannot provide both :dateFinalCustomerOrder and :date_final_customer_order' if attributes.key?(:'dateFinalCustomerOrder') && attributes.key?(:'date_final_customer_order')

      self.date_final_customer_order = attributes[:'date_final_customer_order'] if attributes[:'date_final_customer_order']

      self.date_expected_capacity_handover = attributes[:'dateExpectedCapacityHandover'] if attributes[:'dateExpectedCapacityHandover']

      raise 'You cannot provide both :dateExpectedCapacityHandover and :date_expected_capacity_handover' if attributes.key?(:'dateExpectedCapacityHandover') && attributes.key?(:'date_expected_capacity_handover')

      self.date_expected_capacity_handover = attributes[:'date_expected_capacity_handover'] if attributes[:'date_expected_capacity_handover']

      self.resource_type = attributes[:'resourceType'] if attributes[:'resourceType']

      raise 'You cannot provide both :resourceType and :resource_type' if attributes.key?(:'resourceType') && attributes.key?(:'resource_type')

      self.resource_type = attributes[:'resource_type'] if attributes[:'resource_type']

      self.workload_type = attributes[:'workloadType'] if attributes[:'workloadType']

      raise 'You cannot provide both :workloadType and :workload_type' if attributes.key?(:'workloadType') && attributes.key?(:'workload_type')

      self.workload_type = attributes[:'workload_type'] if attributes[:'workload_type']

      self.resource_name = attributes[:'resourceName'] if attributes[:'resourceName']

      raise 'You cannot provide both :resourceName and :resource_name' if attributes.key?(:'resourceName') && attributes.key?(:'resource_name')

      self.resource_name = attributes[:'resource_name'] if attributes[:'resource_name']

      self.available_quantity = attributes[:'availableQuantity'] if attributes[:'availableQuantity']

      raise 'You cannot provide both :availableQuantity and :available_quantity' if attributes.key?(:'availableQuantity') && attributes.key?(:'available_quantity')

      self.available_quantity = attributes[:'available_quantity'] if attributes[:'available_quantity']

      self.unit = attributes[:'unit'] if attributes[:'unit']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] namespace Object to be assigned
    def namespace=(namespace)
      # rubocop:disable Style/ConditionalAssignment
      if namespace && !NAMESPACE_ENUM.include?(namespace)
        OCI.logger.debug("Unknown value for 'namespace' [" + namespace + "]. Mapping to 'NAMESPACE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @namespace = NAMESPACE_UNKNOWN_ENUM_VALUE
      else
        @namespace = namespace
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resource_type Object to be assigned
    def resource_type=(resource_type)
      # rubocop:disable Style/ConditionalAssignment
      if resource_type && !RESOURCE_TYPE_ENUM.include?(resource_type)
        OCI.logger.debug("Unknown value for 'resource_type' [" + resource_type + "]. Mapping to 'RESOURCE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @resource_type = RESOURCE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @resource_type = resource_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] workload_type Object to be assigned
    def workload_type=(workload_type)
      # rubocop:disable Style/ConditionalAssignment
      if workload_type && !WORKLOAD_TYPE_ENUM.include?(workload_type)
        OCI.logger.debug("Unknown value for 'workload_type' [" + workload_type + "]. Mapping to 'WORKLOAD_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @workload_type = WORKLOAD_TYPE_UNKNOWN_ENUM_VALUE
      else
        @workload_type = workload_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        catalog_id == other.catalog_id &&
        namespace == other.namespace &&
        date_final_customer_order == other.date_final_customer_order &&
        date_expected_capacity_handover == other.date_expected_capacity_handover &&
        resource_type == other.resource_type &&
        workload_type == other.workload_type &&
        resource_name == other.resource_name &&
        available_quantity == other.available_quantity &&
        unit == other.unit
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [catalog_id, namespace, date_final_customer_order, date_expected_capacity_handover, resource_type, workload_type, resource_name, available_quantity, unit].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
