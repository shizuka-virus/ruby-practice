# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20231107

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A description of the OciControlCenterCp API
  class CapacityManagement::CapacityManagementClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new CapacityManagementClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20231107'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "CapacityManagementClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://control-center-cp.{region}.oci.{secondLevelDomain}') + '/20231107'
      logger.info "CapacityManagementClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create availability catalog
    # @param [OCI::CapacityManagement::Models::CreateOccAvailabilityCatalogDetails] create_occ_availability_catalog_details The request details for creating an availability catalog.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccAvailabilityCatalog OccAvailabilityCatalog}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/create_occ_availability_catalog.rb.html) to see an example of how to use create_occ_availability_catalog API.
    def create_occ_availability_catalog(create_occ_availability_catalog_details, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#create_occ_availability_catalog.' if logger

      raise "Missing the required parameter 'create_occ_availability_catalog_details' when calling create_occ_availability_catalog." if create_occ_availability_catalog_details.nil?

      path = '/occAvailabilityCatalogs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_occ_availability_catalog_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#create_occ_availability_catalog') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccAvailabilityCatalog'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create Capacity Request.
    # @param [OCI::CapacityManagement::Models::CreateOccCapacityRequestDetails] create_occ_capacity_request_details The request details for creating a capacity request.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccCapacityRequest OccCapacityRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/create_occ_capacity_request.rb.html) to see an example of how to use create_occ_capacity_request API.
    def create_occ_capacity_request(create_occ_capacity_request_details, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#create_occ_capacity_request.' if logger

      raise "Missing the required parameter 'create_occ_capacity_request_details' when calling create_occ_capacity_request." if create_occ_capacity_request_details.nil?

      path = '/occCapacityRequests'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_occ_capacity_request_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#create_occ_capacity_request') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccCapacityRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes the availability catalog resource.
    # @param [String] occ_availability_catalog_id The OCID of the availability catalog.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/delete_occ_availability_catalog.rb.html) to see an example of how to use delete_occ_availability_catalog API.
    def delete_occ_availability_catalog(occ_availability_catalog_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#delete_occ_availability_catalog.' if logger

      raise "Missing the required parameter 'occ_availability_catalog_id' when calling delete_occ_availability_catalog." if occ_availability_catalog_id.nil?
      raise "Parameter value for 'occ_availability_catalog_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_availability_catalog_id)

      path = '/occAvailabilityCatalogs/{occAvailabilityCatalogId}'.sub('{occAvailabilityCatalogId}', occ_availability_catalog_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#delete_occ_availability_catalog') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes the capacity request resource.
    # @param [String] occ_capacity_request_id The OCID of the capacity request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/delete_occ_capacity_request.rb.html) to see an example of how to use delete_occ_capacity_request API.
    def delete_occ_capacity_request(occ_capacity_request_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#delete_occ_capacity_request.' if logger

      raise "Missing the required parameter 'occ_capacity_request_id' when calling delete_occ_capacity_request." if occ_capacity_request_id.nil?
      raise "Parameter value for 'occ_capacity_request_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_capacity_request_id)

      path = '/occCapacityRequests/{occCapacityRequestId}'.sub('{occCapacityRequestId}', occ_capacity_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#delete_occ_capacity_request') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get details about availability catalog.
    # @param [String] occ_availability_catalog_id The OCID of the availability catalog.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccAvailabilityCatalog OccAvailabilityCatalog}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/get_occ_availability_catalog.rb.html) to see an example of how to use get_occ_availability_catalog API.
    def get_occ_availability_catalog(occ_availability_catalog_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#get_occ_availability_catalog.' if logger

      raise "Missing the required parameter 'occ_availability_catalog_id' when calling get_occ_availability_catalog." if occ_availability_catalog_id.nil?
      raise "Parameter value for 'occ_availability_catalog_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_availability_catalog_id)

      path = '/occAvailabilityCatalogs/{occAvailabilityCatalogId}'.sub('{occAvailabilityCatalogId}', occ_availability_catalog_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#get_occ_availability_catalog') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccAvailabilityCatalog'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Returns the binary contents of the availability catalog. Can be saved as a csv file.
    #
    # @param [String] occ_availability_catalog_id The OCID of the availability catalog.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String, IO] :response_target Streaming http body into a file (specified by file name or File object) or IO object if the block is not given
    # @option [Block] &block Streaming http body to the block
    # @return [Response] A Response object with data of type String if response_target and block are not given, otherwise with nil data
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/get_occ_availability_catalog_content.rb.html) to see an example of how to use get_occ_availability_catalog_content API.
    def get_occ_availability_catalog_content(occ_availability_catalog_id, opts = {}, &block)
      logger.debug 'Calling operation CapacityManagementClient#get_occ_availability_catalog_content.' if logger

      raise "Missing the required parameter 'occ_availability_catalog_id' when calling get_occ_availability_catalog_content." if occ_availability_catalog_id.nil?
      raise "Parameter value for 'occ_availability_catalog_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_availability_catalog_id)

      path = '/occAvailabilityCatalogs/{occAvailabilityCatalogId}/content'.sub('{occAvailabilityCatalogId}', occ_availability_catalog_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = opts[:accept] if opts[:accept]
      header_params[:accept] ||= 'application/binary'
      header_params[:'accept-encoding'] = opts[:accept_encoding] if opts[:accept_encoding]
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#get_occ_availability_catalog_content') do
        if !block.nil?
          @api_client.call_api(
            :GET,
            path,
            endpoint,
            header_params: header_params,
            query_params: query_params,
            operation_signing_strategy: operation_signing_strategy,
            body: post_body,
            return_type: 'Stream',
            &block
          )
        elsif opts[:response_target]
          if opts[:response_target].respond_to? :write
            @api_client.call_api(
              :GET,
              path,
              endpoint,
              header_params: header_params,
              query_params: query_params,
              operation_signing_strategy: operation_signing_strategy,
              body: post_body,
              return_type: 'Stream',
              &proc { |chunk, _response| opts[:response_target].write(chunk) }
            )
          elsif opts[:response_target].is_a?(String)
            File.open(opts[:response_target], 'wb') do |output|
              return @api_client.call_api(
                :GET,
                path,
                endpoint,
                header_params: header_params,
                query_params: query_params,
                operation_signing_strategy: operation_signing_strategy,
                body: post_body,
                return_type: 'Stream',
                &proc { |chunk, _response| output.write(chunk) }
              )
            end
          end
        else
          @api_client.call_api(
            :GET,
            path,
            endpoint,
            header_params: header_params,
            query_params: query_params,
            operation_signing_strategy: operation_signing_strategy,
            body: post_body,
            return_type: 'String'
          )
        end
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get details about the capacity request.
    # @param [String] occ_capacity_request_id The OCID of the capacity request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccCapacityRequest OccCapacityRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/get_occ_capacity_request.rb.html) to see an example of how to use get_occ_capacity_request API.
    def get_occ_capacity_request(occ_capacity_request_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#get_occ_capacity_request.' if logger

      raise "Missing the required parameter 'occ_capacity_request_id' when calling get_occ_capacity_request." if occ_capacity_request_id.nil?
      raise "Parameter value for 'occ_capacity_request_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_capacity_request_id)

      path = '/occCapacityRequests/{occCapacityRequestId}'.sub('{occCapacityRequestId}', occ_capacity_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#get_occ_capacity_request') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccCapacityRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets information about the specified customer group.
    #
    # @param [String] occ_customer_group_id The OCID of the customer group.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccCustomerGroup OccCustomerGroup}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/get_occ_customer_group.rb.html) to see an example of how to use get_occ_customer_group API.
    def get_occ_customer_group(occ_customer_group_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#get_occ_customer_group.' if logger

      raise "Missing the required parameter 'occ_customer_group_id' when calling get_occ_customer_group." if occ_customer_group_id.nil?
      raise "Parameter value for 'occ_customer_group_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_customer_group_id)

      path = '/occCustomerGroups/{occCustomerGroupId}'.sub('{occCustomerGroupId}', occ_customer_group_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#get_occ_customer_group') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccCustomerGroup'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists availabilities for a particular availability catalog.
    # @param [String] occ_availability_catalog_id The OCID of the availability catalog.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :date_expected_capacity_handover The capacity handover date of the capacity constraint to filter the list of capacity constraints.
    # @option opts [String] :resource_name The name of the resource to filter the list of capacity constraints.
    # @option opts [String] :resource_type Resource type using which the capacity constraints of an availability catalog can be filtered.
    # @option opts [String] :workload_type Workload type using the resources in an availability catalog can be filtered.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by.  Only one sort order may be provided. The default order for resource name is ascending. The default order for date of capacity handover is descending.
    #    (default to dateExpectedCapacityHandover)
    #   Allowed values are: dateExpectedCapacityHandover, resourceName
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccAvailabilityCollection OccAvailabilityCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_occ_availabilities.rb.html) to see an example of how to use list_occ_availabilities API.
    def list_occ_availabilities(occ_availability_catalog_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#list_occ_availabilities.' if logger

      raise "Missing the required parameter 'occ_availability_catalog_id' when calling list_occ_availabilities." if occ_availability_catalog_id.nil?

      if opts[:resource_type] && !OCI::CapacityManagement::Models::OccAvailabilitySummary::RESOURCE_TYPE_ENUM.include?(opts[:resource_type])
        raise 'Invalid value for "resource_type", must be one of the values in OCI::CapacityManagement::Models::OccAvailabilitySummary::RESOURCE_TYPE_ENUM.'
      end

      if opts[:workload_type] && !OCI::CapacityManagement::Models::OccAvailabilitySummary::WORKLOAD_TYPE_ENUM.include?(opts[:workload_type])
        raise 'Invalid value for "workload_type", must be one of the values in OCI::CapacityManagement::Models::OccAvailabilitySummary::WORKLOAD_TYPE_ENUM.'
      end

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[dateExpectedCapacityHandover resourceName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of dateExpectedCapacityHandover, resourceName.'
      end
      raise "Parameter value for 'occ_availability_catalog_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_availability_catalog_id)

      path = '/occAvailabilityCatalogs/{occAvailabilityCatalogId}/occAvailabilities'.sub('{occAvailabilityCatalogId}', occ_availability_catalog_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:dateExpectedCapacityHandover] = opts[:date_expected_capacity_handover] if opts[:date_expected_capacity_handover]
      query_params[:resourceName] = opts[:resource_name] if opts[:resource_name]
      query_params[:resourceType] = opts[:resource_type] if opts[:resource_type]
      query_params[:workloadType] = opts[:workload_type] if opts[:workload_type]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#list_occ_availabilities') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccAvailabilityCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all availability catalogs.
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :namespace The namespace by which we would filter the list.
    # @option opts [String] :id The OCID of the availability catalog to filter the list of availability catalogs.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name. The match is not case sensitive.
    # @option opts [String] :catalog_state Filter the list of availability catalogs based on the catalog state.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. The default order for displayName is ascending. The default order for timeCreated is descending.
    #    (default to timeCreated)
    #   Allowed values are: displayName, timeCreated
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccAvailabilityCatalogCollection OccAvailabilityCatalogCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_occ_availability_catalogs.rb.html) to see an example of how to use list_occ_availability_catalogs API.
    def list_occ_availability_catalogs(compartment_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#list_occ_availability_catalogs.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_occ_availability_catalogs." if compartment_id.nil?

      if opts[:namespace] && !OCI::CapacityManagement::Models::NAMESPACE_ENUM.include?(opts[:namespace])
        raise 'Invalid value for "namespace", must be one of the values in OCI::CapacityManagement::Models::NAMESPACE_ENUM.'
      end

      if opts[:catalog_state] && !OCI::CapacityManagement::Models::OccAvailabilityCatalog::CATALOG_STATE_ENUM.include?(opts[:catalog_state])
        raise 'Invalid value for "catalog_state", must be one of the values in OCI::CapacityManagement::Models::OccAvailabilityCatalog::CATALOG_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[displayName timeCreated].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of displayName, timeCreated.'
      end

      path = '/occAvailabilityCatalogs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:namespace] = opts[:namespace] if opts[:namespace]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:catalogState] = opts[:catalog_state] if opts[:catalog_state]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#list_occ_availability_catalogs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccAvailabilityCatalogCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # An internal api to list availability catalogs.
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :namespace The namespace by which we would filter the list.
    # @option opts [String] :id The OCID of the availability catalog to filter the list of availability catalogs.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name. The match is not case sensitive.
    # @option opts [String] :catalog_state Filter the list of availability catalogs based on the catalog state.
    # @option opts [String] :occ_customer_group_id The customer group ocid by which we would filter the list.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. The default order for displayName is ascending. The default order for timeCreated is descending.
    #    (default to timeCreated)
    #   Allowed values are: displayName, timeCreated
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccAvailabilityCatalogCollection OccAvailabilityCatalogCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_occ_availability_catalogs_internal.rb.html) to see an example of how to use list_occ_availability_catalogs_internal API.
    def list_occ_availability_catalogs_internal(compartment_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#list_occ_availability_catalogs_internal.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_occ_availability_catalogs_internal." if compartment_id.nil?

      if opts[:namespace] && !OCI::CapacityManagement::Models::NAMESPACE_ENUM.include?(opts[:namespace])
        raise 'Invalid value for "namespace", must be one of the values in OCI::CapacityManagement::Models::NAMESPACE_ENUM.'
      end

      if opts[:catalog_state] && !OCI::CapacityManagement::Models::OccAvailabilityCatalog::CATALOG_STATE_ENUM.include?(opts[:catalog_state])
        raise 'Invalid value for "catalog_state", must be one of the values in OCI::CapacityManagement::Models::OccAvailabilityCatalog::CATALOG_STATE_ENUM.'
      end

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[displayName timeCreated].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of displayName, timeCreated.'
      end

      path = '/internal/occAvailabilityCatalogs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:namespace] = opts[:namespace] if opts[:namespace]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:catalogState] = opts[:catalog_state] if opts[:catalog_state]
      query_params[:occCustomerGroupId] = opts[:occ_customer_group_id] if opts[:occ_customer_group_id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#list_occ_availability_catalogs_internal') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccAvailabilityCatalogCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all capacity requests.
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :occ_availability_catalog_id A filter to return the list of capacity requests based on the OCID of the availability catalog against which they were created.
    # @option opts [String] :namespace The namespace by which we would filter the list.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name. The match is not case sensitive.
    # @option opts [String] :id A filter to return the list of capacity requests based on the OCID of the capacity request. This is done for the users who have INSPECT permission on the resource but do not have READ permission.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. The default order for display name is ascending. The default order for time created is reverse chronological order(latest date at the top).
    #    (default to timeCreated)
    #   Allowed values are: displayName, timeCreated
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccCapacityRequestCollection OccCapacityRequestCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_occ_capacity_requests.rb.html) to see an example of how to use list_occ_capacity_requests API.
    def list_occ_capacity_requests(compartment_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#list_occ_capacity_requests.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_occ_capacity_requests." if compartment_id.nil?

      if opts[:namespace] && !OCI::CapacityManagement::Models::NAMESPACE_ENUM.include?(opts[:namespace])
        raise 'Invalid value for "namespace", must be one of the values in OCI::CapacityManagement::Models::NAMESPACE_ENUM.'
      end

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[displayName timeCreated].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of displayName, timeCreated.'
      end

      path = '/occCapacityRequests'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:occAvailabilityCatalogId] = opts[:occ_availability_catalog_id] if opts[:occ_availability_catalog_id]
      query_params[:namespace] = opts[:namespace] if opts[:namespace]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#list_occ_capacity_requests') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccCapacityRequestCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # An internal api to list all capacity requests.
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :occ_customer_group_id The customer group ocid by which we would filter the list.
    # @option opts [String] :occ_availability_catalog_id A filter to return the list of capacity requests based on the OCID of the availability catalog against which they were created.
    # @option opts [String] :namespace The namespace by which we would filter the list.
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name. The match is not case sensitive.
    # @option opts [String] :id A filter to return the list of capacity requests based on the OCID of the capacity request. This is done for the users who have INSPECT permission on the resource but do not have READ permission.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. The default order for display name is ascending. The default order for time created is reverse chronological order(latest date at the top).
    #    (default to timeCreated)
    #   Allowed values are: displayName, timeCreated
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccCapacityRequestCollection OccCapacityRequestCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_occ_capacity_requests_internal.rb.html) to see an example of how to use list_occ_capacity_requests_internal API.
    def list_occ_capacity_requests_internal(compartment_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#list_occ_capacity_requests_internal.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_occ_capacity_requests_internal." if compartment_id.nil?

      if opts[:namespace] && !OCI::CapacityManagement::Models::NAMESPACE_ENUM.include?(opts[:namespace])
        raise 'Invalid value for "namespace", must be one of the values in OCI::CapacityManagement::Models::NAMESPACE_ENUM.'
      end

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[displayName timeCreated].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of displayName, timeCreated.'
      end

      path = '/internal/occCapacityRequests'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:occCustomerGroupId] = opts[:occ_customer_group_id] if opts[:occ_customer_group_id]
      query_params[:occAvailabilityCatalogId] = opts[:occ_availability_catalog_id] if opts[:occ_availability_catalog_id]
      query_params[:namespace] = opts[:namespace] if opts[:namespace]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#list_occ_capacity_requests_internal') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccCapacityRequestCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all the customer groups.
    #
    # @param [String] compartment_id The ocid of the compartment or tenancy in which resources are to be listed. This will also be used for authorization purposes.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :status A query filter to return the list result based on status. (default to ENABLED)
    # @option opts [String] :display_name A filter to return only the resources that match the entire display name. The match is not case sensitive.
    # @option opts [String] :id A query filter to return the list result based on the customer group OCID. This is done for users who have INSPECT permission but do not have READ permission.
    # @option opts [Integer] :limit The maximum number of items to return. (default to 10)
    # @option opts [String] :page A token representing the position at which to start retrieving results. This must come from `opc-next-page` header field of a previous response.
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :sort_order The sort order to use, either 'ASC' or 'DESC'.
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. Default order for name and compartment ID is ascending. Default order for time created is descending.
    #    (default to timeCreated)
    #   Allowed values are: compartmentId, name, timeCreated
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccCustomerGroupCollection OccCustomerGroupCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/list_occ_customer_groups.rb.html) to see an example of how to use list_occ_customer_groups API.
    def list_occ_customer_groups(compartment_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#list_occ_customer_groups.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_occ_customer_groups." if compartment_id.nil?

      if opts[:status] && !OCI::CapacityManagement::Models::OccCustomerGroup::STATUS_ENUM.include?(opts[:status])
        raise 'Invalid value for "status", must be one of the values in OCI::CapacityManagement::Models::OccCustomerGroup::STATUS_ENUM.'
      end

      if opts[:sort_order] && !OCI::CapacityManagement::Models::SORT_ORDER_ENUM.include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of the values in OCI::CapacityManagement::Models::SORT_ORDER_ENUM.'
      end

      if opts[:sort_by] && !%w[compartmentId name timeCreated].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of compartmentId, name, timeCreated.'
      end

      path = '/occCustomerGroups'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:status] = opts[:status] if opts[:status]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:id] = opts[:id] if opts[:id]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#list_occ_customer_groups') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccCustomerGroupCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates the OccCapacityRequest by evaluating a sequence of instructions.
    # @param [OCI::CapacityManagement::Models::PatchOccCapacityRequestDetails] patch_occ_capacity_request_details Request to update the properties of the capacity request.
    # @param [String] occ_capacity_request_id The OCID of the capacity request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccCapacityRequest OccCapacityRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/patch_occ_capacity_request.rb.html) to see an example of how to use patch_occ_capacity_request API.
    def patch_occ_capacity_request(patch_occ_capacity_request_details, occ_capacity_request_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#patch_occ_capacity_request.' if logger

      raise "Missing the required parameter 'patch_occ_capacity_request_details' when calling patch_occ_capacity_request." if patch_occ_capacity_request_details.nil?
      raise "Missing the required parameter 'occ_capacity_request_id' when calling patch_occ_capacity_request." if occ_capacity_request_id.nil?
      raise "Parameter value for 'occ_capacity_request_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_capacity_request_id)

      path = '/occCapacityRequests/{occCapacityRequestId}'.sub('{occCapacityRequestId}', occ_capacity_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(patch_occ_capacity_request_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#patch_occ_capacity_request') do
        @api_client.call_api(
          :PATCH,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccCapacityRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Publishes the version of availability catalog specified by the operator. This makes that catalog version visible to customers.
    #
    # @param [String] occ_availability_catalog_id The OCID of the availability catalog.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or
    #   server error without risk of executing that same action again. Retry tokens expire after 24
    #   hours, but can be invalidated before then due to conflicting operations. For example, if a resource
    #   has been deleted and purged from the system, then a retry of the original creation request
    #   might be rejected.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/publish_occ_availability_catalog.rb.html) to see an example of how to use publish_occ_availability_catalog API.
    def publish_occ_availability_catalog(occ_availability_catalog_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#publish_occ_availability_catalog.' if logger

      raise "Missing the required parameter 'occ_availability_catalog_id' when calling publish_occ_availability_catalog." if occ_availability_catalog_id.nil?
      raise "Parameter value for 'occ_availability_catalog_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_availability_catalog_id)

      path = '/occAvailabilityCatalogs/{occAvailabilityCatalogId}/actions/publish'.sub('{occAvailabilityCatalogId}', occ_availability_catalog_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#publish_occ_availability_catalog') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # The internal api to update the capacity request. This api will be used by operators for updating the capacity request to either completed, resubmitted or rejected.
    # @param [OCI::CapacityManagement::Models::UpdateInternalOccCapacityRequestDetails] update_internal_occ_capacity_request_details Request to update the properties of the capacity request.
    # @param [String] occ_capacity_request_id The OCID of the capacity request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccCapacityRequest OccCapacityRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/update_internal_occ_capacity_request.rb.html) to see an example of how to use update_internal_occ_capacity_request API.
    def update_internal_occ_capacity_request(update_internal_occ_capacity_request_details, occ_capacity_request_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#update_internal_occ_capacity_request.' if logger

      raise "Missing the required parameter 'update_internal_occ_capacity_request_details' when calling update_internal_occ_capacity_request." if update_internal_occ_capacity_request_details.nil?
      raise "Missing the required parameter 'occ_capacity_request_id' when calling update_internal_occ_capacity_request." if occ_capacity_request_id.nil?
      raise "Parameter value for 'occ_capacity_request_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_capacity_request_id)

      path = '/internal/occCapacityRequests/{occCapacityRequestId}'.sub('{occCapacityRequestId}', occ_capacity_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_internal_occ_capacity_request_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#update_internal_occ_capacity_request') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccCapacityRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # The request to update the availability catalog. Currently only freeform tags can be updated via this api.
    # @param [OCI::CapacityManagement::Models::UpdateOccAvailabilityCatalogDetails] update_occ_availability_catalog_details Request to update the properties of the availability catalog.
    # @param [String] occ_availability_catalog_id The OCID of the availability catalog.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccAvailabilityCatalog OccAvailabilityCatalog}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/update_occ_availability_catalog.rb.html) to see an example of how to use update_occ_availability_catalog API.
    def update_occ_availability_catalog(update_occ_availability_catalog_details, occ_availability_catalog_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#update_occ_availability_catalog.' if logger

      raise "Missing the required parameter 'update_occ_availability_catalog_details' when calling update_occ_availability_catalog." if update_occ_availability_catalog_details.nil?
      raise "Missing the required parameter 'occ_availability_catalog_id' when calling update_occ_availability_catalog." if occ_availability_catalog_id.nil?
      raise "Parameter value for 'occ_availability_catalog_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_availability_catalog_id)

      path = '/occAvailabilityCatalogs/{occAvailabilityCatalogId}'.sub('{occAvailabilityCatalogId}', occ_availability_catalog_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_occ_availability_catalog_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#update_occ_availability_catalog') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccAvailabilityCatalog'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # The request to update the capacity request. The user can perform actions like closing a partially completed request so that it doesn't go ahead for full completion.
    # @param [OCI::CapacityManagement::Models::UpdateOccCapacityRequestDetails] update_occ_capacity_request_details Request to update the properties of the capacity request.
    # @param [String] occ_capacity_request_id The OCID of the capacity request.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call
    #   for a resource, set the `if-match` parameter to the value of the
    #   etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you
    #   provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id The client request ID for tracing. The only valid characters for request IDs are letters, numbers,
    #   underscore, and dash.
    #
    # @return [Response] A Response object with data of type {OCI::CapacityManagement::Models::OccCapacityRequest OccCapacityRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/capacitymanagement/update_occ_capacity_request.rb.html) to see an example of how to use update_occ_capacity_request API.
    def update_occ_capacity_request(update_occ_capacity_request_details, occ_capacity_request_id, opts = {})
      logger.debug 'Calling operation CapacityManagementClient#update_occ_capacity_request.' if logger

      raise "Missing the required parameter 'update_occ_capacity_request_details' when calling update_occ_capacity_request." if update_occ_capacity_request_details.nil?
      raise "Missing the required parameter 'occ_capacity_request_id' when calling update_occ_capacity_request." if occ_capacity_request_id.nil?
      raise "Parameter value for 'occ_capacity_request_id' must not be blank" if OCI::Internal::Util.blank_string?(occ_capacity_request_id)

      path = '/occCapacityRequests/{occCapacityRequestId}'.sub('{occCapacityRequestId}', occ_capacity_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_occ_capacity_request_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'CapacityManagementClient#update_occ_capacity_request') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::CapacityManagement::Models::OccCapacityRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
