# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Use the Application Performance Monitoring Trace Explorer API to query traces and associated spans in Trace Explorer. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).
  class ApmTraces::AttributesClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new AttributesClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20200630'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "AttributesClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://apm-trace.{region}.oci.{secondLevelDomain}') + '/20200630'
      logger.info "AttributesClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Activates a set of attributes for the given APM Domain.  The API is not case-sensitive.  Any duplicates present in the bulk activation
    # request are deduplicated and only unique attributes are activated.  A maximum number of 700 string attributes and 100 numeric attributes
    # can be activated in an APM Domain subject to the available string and numeric slots.  Once an attribute has been activated, it may take sometime
    # for it to be appear in searches as ingest might not have picked up the changes or any associated caches might not have refreshed.  The
    # bulk activation operation is atomic, and the operation succeeds only if all the attributes in the request have been processed successfully and they
    # get a success status back.  If the processing of any attribute results in a processing or validation error, then none of the attributes in the bulk
    # request are activated.  Attributes that are activated are unpinned by default if they are pinned.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [OCI::ApmTraces::Models::BulkActivateAttributeDetails] bulk_activate_attribute_details Request body containing the details about the set of attributes to be activated.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::BulkActivationStatus BulkActivationStatus}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/bulk_activate_attribute.rb.html) to see an example of how to use bulk_activate_attribute API.
    def bulk_activate_attribute(apm_domain_id, bulk_activate_attribute_details, opts = {})
      logger.debug 'Calling operation AttributesClient#bulk_activate_attribute.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling bulk_activate_attribute." if apm_domain_id.nil?
      raise "Missing the required parameter 'bulk_activate_attribute_details' when calling bulk_activate_attribute." if bulk_activate_attribute_details.nil?

      path = '/attributes/actions/activateAttributes'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(bulk_activate_attribute_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'AttributesClient#bulk_activate_attribute') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::BulkActivationStatus'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deactivates a set of attributes for the given APM Domain.  The API is case in-sensitive.  Any duplicates present in the bulk deactivation
    # request are deduplicated and only unique attributes are deactivated.  A maximum number of 700 string attributes and 100 numeric attributes
    # can be deactivated in an APM Domain subject to the available string and numeric slots.  Out of box attributes (Trace and Span) cannot be
    # deactivated, and will result in a processing error.  Once an attribute has been deactivated, it may take sometime for it to disappear in
    # searches as ingest might not have picked up the changes or any associated caches might not have refreshed.  The bulk deactivation
    # operation is atomic, and the operation succeeds only if all the attributes in the request have been processed successfully and they get a success
    # status back.  If the processing of any attribute results in a processing or validation error, then none of the attributes in the bulk request
    # are deactivated.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [OCI::ApmTraces::Models::BulkDeActivateAttributeDetails] bulk_de_activate_attribute_details Request body containing the details about the set of attributes to be deactivated.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::BulkDeActivationStatus BulkDeActivationStatus}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/bulk_de_activate_attribute.rb.html) to see an example of how to use bulk_de_activate_attribute API.
    def bulk_de_activate_attribute(apm_domain_id, bulk_de_activate_attribute_details, opts = {})
      logger.debug 'Calling operation AttributesClient#bulk_de_activate_attribute.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling bulk_de_activate_attribute." if apm_domain_id.nil?
      raise "Missing the required parameter 'bulk_de_activate_attribute_details' when calling bulk_de_activate_attribute." if bulk_de_activate_attribute_details.nil?

      path = '/attributes/actions/deActivateAttributes'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(bulk_de_activate_attribute_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'AttributesClient#bulk_de_activate_attribute') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::BulkDeActivationStatus'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Pin a set of attributes in the APM Domain.  Attributes that are marked pinned are not autoactivated by ingest.
    # Attributes that are deactivated are pinned by default.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [OCI::ApmTraces::Models::BulkPinAttributeDetails] bulk_pin_attribute_details Request body containing the details about the set of attributes to be pinned.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::BulkPinStatus BulkPinStatus}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/bulk_pin_attribute.rb.html) to see an example of how to use bulk_pin_attribute API.
    def bulk_pin_attribute(apm_domain_id, bulk_pin_attribute_details, opts = {})
      logger.debug 'Calling operation AttributesClient#bulk_pin_attribute.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling bulk_pin_attribute." if apm_domain_id.nil?
      raise "Missing the required parameter 'bulk_pin_attribute_details' when calling bulk_pin_attribute." if bulk_pin_attribute_details.nil?

      path = '/attributes/actions/pinAttributes'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(bulk_pin_attribute_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'AttributesClient#bulk_pin_attribute') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::BulkPinStatus'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Unpin a set of attributes in the APM Domain.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [OCI::ApmTraces::Models::BulkUnpinAttributeDetails] bulk_unpin_attribute_details Request body containing the details about the set of attributes to be unpinned.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::BulkUnpinStatus BulkUnpinStatus}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/bulk_unpin_attribute.rb.html) to see an example of how to use bulk_unpin_attribute API.
    def bulk_unpin_attribute(apm_domain_id, bulk_unpin_attribute_details, opts = {})
      logger.debug 'Calling operation AttributesClient#bulk_unpin_attribute.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling bulk_unpin_attribute." if apm_domain_id.nil?
      raise "Missing the required parameter 'bulk_unpin_attribute_details' when calling bulk_unpin_attribute." if bulk_unpin_attribute_details.nil?

      path = '/attributes/actions/unPinAttributes'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(bulk_unpin_attribute_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'AttributesClient#bulk_unpin_attribute') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::BulkUnpinStatus'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a set of attribute properties in the APM Domain.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [OCI::ApmTraces::Models::BulkUpdateAttributeDetails] bulk_update_attribute_details Request body containing the details about the set of attributes for which properties are to be updated.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::BulkUpdateAttributeStatus BulkUpdateAttributeStatus}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/bulk_update_attribute.rb.html) to see an example of how to use bulk_update_attribute API.
    def bulk_update_attribute(apm_domain_id, bulk_update_attribute_details, opts = {})
      logger.debug 'Calling operation AttributesClient#bulk_update_attribute.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling bulk_update_attribute." if apm_domain_id.nil?
      raise "Missing the required parameter 'bulk_update_attribute_details' when calling bulk_update_attribute." if bulk_update_attribute_details.nil?

      path = '/attributes/actions/updateAttributes'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(bulk_update_attribute_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'AttributesClient#bulk_update_attribute') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::BulkUpdateAttributeStatus'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Add or edit notes to a set of attributes in the APM Domain.  Notes can be added to either an active or an inactive attribute.  The
    # notes will be preserved even if the attribute changes state (when an active attribute is deactivated or when an inactive attribute
    # is activated).
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [OCI::ApmTraces::Models::BulkUpdateAttributeNotesDetails] bulk_update_attribute_notes_details Request body containing the details about the set of attributes for which notes are to be updated.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::BulkUpdateNotesStatus BulkUpdateNotesStatus}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/bulk_update_attribute_notes.rb.html) to see an example of how to use bulk_update_attribute_notes API.
    def bulk_update_attribute_notes(apm_domain_id, bulk_update_attribute_notes_details, opts = {})
      logger.debug 'Calling operation AttributesClient#bulk_update_attribute_notes.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling bulk_update_attribute_notes." if apm_domain_id.nil?
      raise "Missing the required parameter 'bulk_update_attribute_notes_details' when calling bulk_update_attribute_notes." if bulk_update_attribute_notes_details.nil?

      path = '/attributes/actions/updateNotes'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(bulk_update_attribute_notes_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'AttributesClient#bulk_update_attribute_notes') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::BulkUpdateNotesStatus'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Get autoactivation status for a private data key or public data key in the APM Domain.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [String] data_key_type Data key type for which auto-activate needs to be turned on or off.
    #
    #   Allowed values are: PRIVATE_DATA_KEY, PUBLIC_DATA_KEY
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::AutoActivateStatus AutoActivateStatus}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/get_status_auto_activate.rb.html) to see an example of how to use get_status_auto_activate API.
    def get_status_auto_activate(apm_domain_id, data_key_type, opts = {})
      logger.debug 'Calling operation AttributesClient#get_status_auto_activate.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling get_status_auto_activate." if apm_domain_id.nil?
      raise "Missing the required parameter 'data_key_type' when calling get_status_auto_activate." if data_key_type.nil?
      unless %w[PRIVATE_DATA_KEY PUBLIC_DATA_KEY].include?(data_key_type)
        raise "Invalid value for 'data_key_type', must be one of PRIVATE_DATA_KEY, PUBLIC_DATA_KEY."
      end

      path = '/attributes/autoActivateStatus'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id
      query_params[:dataKeyType] = data_key_type

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'AttributesClient#get_status_auto_activate') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::AutoActivateStatus'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Turn on or off autoactivate for private data key or public data key traffic a given APM Domain.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [BOOLEAN] is_auto_activate_on Autoactivate toggle switch.  Set to true to turn on auto-activate.  Set to false to turn off auto-activate.
    #
    # @param [String] data_key_type Data key type for which auto-activate needs to be turned on or off.
    #
    #   Allowed values are: PRIVATE_DATA_KEY, PUBLIC_DATA_KEY
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::AutoActivateToggleStatus AutoActivateToggleStatus}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/put_toggle_auto_activate.rb.html) to see an example of how to use put_toggle_auto_activate API.
    def put_toggle_auto_activate(apm_domain_id, is_auto_activate_on, data_key_type, opts = {})
      logger.debug 'Calling operation AttributesClient#put_toggle_auto_activate.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling put_toggle_auto_activate." if apm_domain_id.nil?
      raise "Missing the required parameter 'is_auto_activate_on' when calling put_toggle_auto_activate." if is_auto_activate_on.nil?
      raise "Missing the required parameter 'data_key_type' when calling put_toggle_auto_activate." if data_key_type.nil?
      unless %w[PRIVATE_DATA_KEY PUBLIC_DATA_KEY].include?(data_key_type)
        raise "Invalid value for 'data_key_type', must be one of PRIVATE_DATA_KEY, PUBLIC_DATA_KEY."
      end

      path = '/attributes/actions/autoActivate'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id
      query_params[:isAutoActivateOn] = is_auto_activate_on
      query_params[:dataKeyType] = data_key_type

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'AttributesClient#put_toggle_auto_activate') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::AutoActivateToggleStatus'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
