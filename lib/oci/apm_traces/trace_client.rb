# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Use the Application Performance Monitoring Trace Explorer API to query traces and associated spans in Trace Explorer. For more information, see [Application Performance Monitoring](https://docs.oracle.com/iaas/application-performance-monitoring/index.html).
  class ApmTraces::TraceClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new TraceClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20200630'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "TraceClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://apm-trace.{region}.oci.{secondLevelDomain}') + '/20200630'
      logger.info "TraceClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the aggregated snapshot identified by trace ID.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [String] trace_key Unique Application Performance Monitoring trace identifier (traceId).
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @option opts [String] :service_name Name associated with the service.
    #
    # @option opts [String] :server_name Name of the server.
    #
    # @option opts [String] :span_key Unique Application Performance Monitoring span identifier (spanId).
    #
    # @option opts [String] :span_name Name of the span associated with the trace.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::AggregatedSnapshot AggregatedSnapshot}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/get_aggregated_snapshot.rb.html) to see an example of how to use get_aggregated_snapshot API.
    def get_aggregated_snapshot(apm_domain_id, trace_key, opts = {})
      logger.debug 'Calling operation TraceClient#get_aggregated_snapshot.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling get_aggregated_snapshot." if apm_domain_id.nil?
      raise "Missing the required parameter 'trace_key' when calling get_aggregated_snapshot." if trace_key.nil?
      raise "Parameter value for 'trace_key' must not be blank" if OCI::Internal::Util.blank_string?(trace_key)

      path = '/traces/{traceKey}/aggregatedSnapshotData'.sub('{traceKey}', trace_key.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id
      query_params[:serviceName] = opts[:service_name] if opts[:service_name]
      query_params[:serverName] = opts[:server_name] if opts[:server_name]
      query_params[:spanKey] = opts[:span_key] if opts[:span_key]
      query_params[:spanName] = opts[:span_name] if opts[:span_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'TraceClient#get_aggregated_snapshot') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::AggregatedSnapshot'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the span details identified by spanId.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [String] span_key Unique Application Performance Monitoring span identifier (spanId).
    #
    # @param [String] trace_key Unique Application Performance Monitoring trace identifier (traceId).
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @option opts [DateTime] :time_span_started_greater_than_or_equal_to Include spans that have a `spanStartTime` equal to or greater than this value.
    #
    # @option opts [DateTime] :time_span_started_less_than Include spans that have a `spanStartTime`less than this value.
    #
    # @option opts [String] :span_namespace Name space from which the span details need to be retrieved.
    #
    #   Allowed values are: TRACES, SYNTHETIC
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::Span Span}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/get_span.rb.html) to see an example of how to use get_span API.
    def get_span(apm_domain_id, span_key, trace_key, opts = {})
      logger.debug 'Calling operation TraceClient#get_span.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling get_span." if apm_domain_id.nil?
      raise "Missing the required parameter 'span_key' when calling get_span." if span_key.nil?
      raise "Missing the required parameter 'trace_key' when calling get_span." if trace_key.nil?

      if opts[:span_namespace] && !%w[TRACES SYNTHETIC].include?(opts[:span_namespace])
        raise 'Invalid value for "span_namespace", must be one of TRACES, SYNTHETIC.'
      end
      raise "Parameter value for 'span_key' must not be blank" if OCI::Internal::Util.blank_string?(span_key)
      raise "Parameter value for 'trace_key' must not be blank" if OCI::Internal::Util.blank_string?(trace_key)

      path = '/spans/{traceKey}/{spanKey}'.sub('{spanKey}', span_key.to_s).sub('{traceKey}', trace_key.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id
      query_params[:timeSpanStartedGreaterThanOrEqualTo] = opts[:time_span_started_greater_than_or_equal_to] if opts[:time_span_started_greater_than_or_equal_to]
      query_params[:timeSpanStartedLessThan] = opts[:time_span_started_less_than] if opts[:time_span_started_less_than]
      query_params[:spanNamespace] = opts[:span_namespace] if opts[:span_namespace]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'TraceClient#get_span') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::Span'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the trace details identified by traceId.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [String] trace_key Unique Application Performance Monitoring trace identifier (traceId).
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @option opts [DateTime] :time_trace_started_greater_than_or_equal_to Include traces that have a `minTraceStartTime` equal to or greater than this value.
    #
    # @option opts [DateTime] :time_trace_started_less_than Include traces that have a `minTraceStartTime` less than this value.
    #
    # @option opts [String] :trace_namespace Name space from which the trace details need to be retrieved.
    #
    #   Allowed values are: TRACES, SYNTHETIC
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::Trace Trace}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/get_trace.rb.html) to see an example of how to use get_trace API.
    def get_trace(apm_domain_id, trace_key, opts = {})
      logger.debug 'Calling operation TraceClient#get_trace.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling get_trace." if apm_domain_id.nil?
      raise "Missing the required parameter 'trace_key' when calling get_trace." if trace_key.nil?

      if opts[:trace_namespace] && !%w[TRACES SYNTHETIC].include?(opts[:trace_namespace])
        raise 'Invalid value for "trace_namespace", must be one of TRACES, SYNTHETIC.'
      end
      raise "Parameter value for 'trace_key' must not be blank" if OCI::Internal::Util.blank_string?(trace_key)

      path = '/traces/{traceKey}'.sub('{traceKey}', trace_key.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id
      query_params[:timeTraceStartedGreaterThanOrEqualTo] = opts[:time_trace_started_greater_than_or_equal_to] if opts[:time_trace_started_greater_than_or_equal_to]
      query_params[:timeTraceStartedLessThan] = opts[:time_trace_started_less_than] if opts[:time_trace_started_less_than]
      query_params[:traceNamespace] = opts[:trace_namespace] if opts[:trace_namespace]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'TraceClient#get_trace') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::Trace'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the trace snapshots data identified by trace ID.
    #
    # @param [String] apm_domain_id The APM Domain ID for the intended request.
    #
    # @param [String] trace_key Unique Application Performance Monitoring trace identifier (traceId).
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique Oracle-assigned identifier for the request.  If you need to contact Oracle about a
    #   particular request, please provide the request ID.
    #
    # @option opts [BOOLEAN] :is_summarized If enabled, only span level details are sent.
    #
    # @option opts [String] :thread_id Thread ID for which snapshots need to be retrieved. This identifier of a thread is a long positive number generated when a thread is created.
    #
    # @option opts [String] :snapshot_time Epoch time of snapshot.
    #
    # @return [Response] A Response object with data of type {OCI::ApmTraces::Models::TraceSnapshot TraceSnapshot}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/apmtraces/get_trace_snapshot.rb.html) to see an example of how to use get_trace_snapshot API.
    def get_trace_snapshot(apm_domain_id, trace_key, opts = {})
      logger.debug 'Calling operation TraceClient#get_trace_snapshot.' if logger

      raise "Missing the required parameter 'apm_domain_id' when calling get_trace_snapshot." if apm_domain_id.nil?
      raise "Missing the required parameter 'trace_key' when calling get_trace_snapshot." if trace_key.nil?
      raise "Parameter value for 'trace_key' must not be blank" if OCI::Internal::Util.blank_string?(trace_key)

      path = '/traces/{traceKey}/snapshotData'.sub('{traceKey}', trace_key.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:apmDomainId] = apm_domain_id
      query_params[:isSummarized] = opts[:is_summarized] if !opts[:is_summarized].nil?
      query_params[:threadId] = opts[:thread_id] if opts[:thread_id]
      query_params[:snapshotTime] = opts[:snapshot_time] if opts[:snapshot_time]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'TraceClient#get_trace_snapshot') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::ApmTraces::Models::TraceSnapshot'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
