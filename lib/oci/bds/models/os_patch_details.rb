# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190531
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of an os patch.
  class Bds::Models::OsPatchDetails
    PATCH_TYPE_ENUM = [
      PATCH_TYPE_REGULAR = 'REGULAR'.freeze,
      PATCH_TYPE_CUSTOM = 'CUSTOM'.freeze,
      PATCH_TYPE_EMERGENT = 'EMERGENT'.freeze,
      PATCH_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Version of the os patch.
    # @return [String]
    attr_accessor :os_patch_version

    # **[Required]** Minimum BDS version required to install current OS patch.
    # @return [String]
    attr_accessor :min_bds_version

    # **[Required]** Map of major ODH version to minimum ODH version required to install current OS patch. e.g. {ODH0.9: 0.9.1}
    #
    # @return [Hash<String, String>]
    attr_accessor :min_compatible_odh_version_map

    # **[Required]** List of summaries of individual target packages.
    # @return [Array<OCI::Bds::Models::OsPatchPackageSummary>]
    attr_accessor :target_packages

    # **[Required]** Released date of the OS patch.
    # @return [DateTime]
    attr_accessor :release_date

    # **[Required]** Type of a specific os patch.
    # REGULAR means standard released os patches.
    # CUSTOM means os patches with some customizations.
    # EMERGENT means os patches with some emergency fixes that should be prioritized.
    #
    # @return [String]
    attr_reader :patch_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'os_patch_version': :'osPatchVersion',
        'min_bds_version': :'minBdsVersion',
        'min_compatible_odh_version_map': :'minCompatibleOdhVersionMap',
        'target_packages': :'targetPackages',
        'release_date': :'releaseDate',
        'patch_type': :'patchType'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'os_patch_version': :'String',
        'min_bds_version': :'String',
        'min_compatible_odh_version_map': :'Hash<String, String>',
        'target_packages': :'Array<OCI::Bds::Models::OsPatchPackageSummary>',
        'release_date': :'DateTime',
        'patch_type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :os_patch_version The value to assign to the {#os_patch_version} property
    # @option attributes [String] :min_bds_version The value to assign to the {#min_bds_version} property
    # @option attributes [Hash<String, String>] :min_compatible_odh_version_map The value to assign to the {#min_compatible_odh_version_map} property
    # @option attributes [Array<OCI::Bds::Models::OsPatchPackageSummary>] :target_packages The value to assign to the {#target_packages} property
    # @option attributes [DateTime] :release_date The value to assign to the {#release_date} property
    # @option attributes [String] :patch_type The value to assign to the {#patch_type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.os_patch_version = attributes[:'osPatchVersion'] if attributes[:'osPatchVersion']

      raise 'You cannot provide both :osPatchVersion and :os_patch_version' if attributes.key?(:'osPatchVersion') && attributes.key?(:'os_patch_version')

      self.os_patch_version = attributes[:'os_patch_version'] if attributes[:'os_patch_version']

      self.min_bds_version = attributes[:'minBdsVersion'] if attributes[:'minBdsVersion']

      raise 'You cannot provide both :minBdsVersion and :min_bds_version' if attributes.key?(:'minBdsVersion') && attributes.key?(:'min_bds_version')

      self.min_bds_version = attributes[:'min_bds_version'] if attributes[:'min_bds_version']

      self.min_compatible_odh_version_map = attributes[:'minCompatibleOdhVersionMap'] if attributes[:'minCompatibleOdhVersionMap']

      raise 'You cannot provide both :minCompatibleOdhVersionMap and :min_compatible_odh_version_map' if attributes.key?(:'minCompatibleOdhVersionMap') && attributes.key?(:'min_compatible_odh_version_map')

      self.min_compatible_odh_version_map = attributes[:'min_compatible_odh_version_map'] if attributes[:'min_compatible_odh_version_map']

      self.target_packages = attributes[:'targetPackages'] if attributes[:'targetPackages']

      raise 'You cannot provide both :targetPackages and :target_packages' if attributes.key?(:'targetPackages') && attributes.key?(:'target_packages')

      self.target_packages = attributes[:'target_packages'] if attributes[:'target_packages']

      self.release_date = attributes[:'releaseDate'] if attributes[:'releaseDate']

      raise 'You cannot provide both :releaseDate and :release_date' if attributes.key?(:'releaseDate') && attributes.key?(:'release_date')

      self.release_date = attributes[:'release_date'] if attributes[:'release_date']

      self.patch_type = attributes[:'patchType'] if attributes[:'patchType']

      raise 'You cannot provide both :patchType and :patch_type' if attributes.key?(:'patchType') && attributes.key?(:'patch_type')

      self.patch_type = attributes[:'patch_type'] if attributes[:'patch_type']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] patch_type Object to be assigned
    def patch_type=(patch_type)
      # rubocop:disable Style/ConditionalAssignment
      if patch_type && !PATCH_TYPE_ENUM.include?(patch_type)
        OCI.logger.debug("Unknown value for 'patch_type' [" + patch_type + "]. Mapping to 'PATCH_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @patch_type = PATCH_TYPE_UNKNOWN_ENUM_VALUE
      else
        @patch_type = patch_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        os_patch_version == other.os_patch_version &&
        min_bds_version == other.min_bds_version &&
        min_compatible_odh_version_map == other.min_compatible_odh_version_map &&
        target_packages == other.target_packages &&
        release_date == other.release_date &&
        patch_type == other.patch_type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [os_patch_version, min_bds_version, min_compatible_odh_version_map, target_packages, release_date, patch_type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
