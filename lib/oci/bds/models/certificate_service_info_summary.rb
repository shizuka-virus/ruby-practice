# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190531
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # List of TLS/SSL information of services
  class Bds::Models::CertificateServiceInfoSummary
    SERVICE_ENUM = [
      SERVICE_ZOOKEEPER = 'ZOOKEEPER'.freeze,
      SERVICE_AMS = 'AMS'.freeze,
      SERVICE_HDFS = 'HDFS'.freeze,
      SERVICE_YARN = 'YARN'.freeze,
      SERVICE_MAPREDUCE = 'MAPREDUCE'.freeze,
      SERVICE_OOZIE = 'OOZIE'.freeze,
      SERVICE_HBASE = 'HBASE'.freeze,
      SERVICE_SPARK = 'SPARK'.freeze,
      SERVICE_HIVE = 'HIVE'.freeze,
      SERVICE_KAFKA = 'KAFKA'.freeze,
      SERVICE_FLINK = 'FLINK'.freeze,
      SERVICE_REGISTRY = 'REGISTRY'.freeze,
      SERVICE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    SERVICE_CERTIFICATE_STATUS_ENUM = [
      SERVICE_CERTIFICATE_STATUS_ENABLED = 'ENABLED'.freeze,
      SERVICE_CERTIFICATE_STATUS_DISABLED = 'DISABLED'.freeze,
      SERVICE_CERTIFICATE_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Name of the service
    # @return [String]
    attr_reader :service

    # **[Required]** Whether certificate is enabled or disabled
    # @return [String]
    attr_reader :service_certificate_status

    # **[Required]** List of Host specific certificate details
    # @return [Array<OCI::Bds::Models::HostSpecificCertificateDetails>]
    attr_accessor :host_specific_certificate_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'service': :'service',
        'service_certificate_status': :'serviceCertificateStatus',
        'host_specific_certificate_details': :'hostSpecificCertificateDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'service': :'String',
        'service_certificate_status': :'String',
        'host_specific_certificate_details': :'Array<OCI::Bds::Models::HostSpecificCertificateDetails>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :service The value to assign to the {#service} property
    # @option attributes [String] :service_certificate_status The value to assign to the {#service_certificate_status} property
    # @option attributes [Array<OCI::Bds::Models::HostSpecificCertificateDetails>] :host_specific_certificate_details The value to assign to the {#host_specific_certificate_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.service = attributes[:'service'] if attributes[:'service']

      self.service_certificate_status = attributes[:'serviceCertificateStatus'] if attributes[:'serviceCertificateStatus']

      raise 'You cannot provide both :serviceCertificateStatus and :service_certificate_status' if attributes.key?(:'serviceCertificateStatus') && attributes.key?(:'service_certificate_status')

      self.service_certificate_status = attributes[:'service_certificate_status'] if attributes[:'service_certificate_status']

      self.host_specific_certificate_details = attributes[:'hostSpecificCertificateDetails'] if attributes[:'hostSpecificCertificateDetails']

      raise 'You cannot provide both :hostSpecificCertificateDetails and :host_specific_certificate_details' if attributes.key?(:'hostSpecificCertificateDetails') && attributes.key?(:'host_specific_certificate_details')

      self.host_specific_certificate_details = attributes[:'host_specific_certificate_details'] if attributes[:'host_specific_certificate_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service Object to be assigned
    def service=(service)
      # rubocop:disable Style/ConditionalAssignment
      if service && !SERVICE_ENUM.include?(service)
        OCI.logger.debug("Unknown value for 'service' [" + service + "]. Mapping to 'SERVICE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @service = SERVICE_UNKNOWN_ENUM_VALUE
      else
        @service = service
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] service_certificate_status Object to be assigned
    def service_certificate_status=(service_certificate_status)
      # rubocop:disable Style/ConditionalAssignment
      if service_certificate_status && !SERVICE_CERTIFICATE_STATUS_ENUM.include?(service_certificate_status)
        OCI.logger.debug("Unknown value for 'service_certificate_status' [" + service_certificate_status + "]. Mapping to 'SERVICE_CERTIFICATE_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @service_certificate_status = SERVICE_CERTIFICATE_STATUS_UNKNOWN_ENUM_VALUE
      else
        @service_certificate_status = service_certificate_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        service == other.service &&
        service_certificate_status == other.service_certificate_status &&
        host_specific_certificate_details == other.host_specific_certificate_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [service, service_certificate_status, host_specific_certificate_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
