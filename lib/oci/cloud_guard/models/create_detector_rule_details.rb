# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200131
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of a detector rule to be created in a detector recipe.
  class CloudGuard::Models::CreateDetectorRuleDetails
    RISK_LEVEL_ENUM = [
      RISK_LEVEL_CRITICAL = 'CRITICAL'.freeze,
      RISK_LEVEL_HIGH = 'HIGH'.freeze,
      RISK_LEVEL_MEDIUM = 'MEDIUM'.freeze,
      RISK_LEVEL_LOW = 'LOW'.freeze,
      RISK_LEVEL_MINOR = 'MINOR'.freeze
    ].freeze

    # ID of source detector rule
    # @return [String]
    attr_accessor :source_detector_rule_id

    # **[Required]** Name of the detector rule
    # @return [String]
    attr_accessor :name

    # Description of the detector rule
    # @return [String]
    attr_accessor :description

    # Enablement state of the detector rule
    # @return [BOOLEAN]
    attr_accessor :is_enabled

    # The risk level for the detector rule
    # @return [String]
    attr_reader :risk_level

    # List of detector rule configurations
    # @return [Array<OCI::CloudGuard::Models::DetectorConfiguration>]
    attr_accessor :configurations

    # @return [OCI::CloudGuard::Models::Condition]
    attr_accessor :condition

    # User-defined labels for the detector rule
    # @return [Array<String>]
    attr_accessor :labels

    # Recommendations for the detector rule
    # @return [String]
    attr_accessor :recommendation

    # OCID of the data source which is attached
    # @return [String]
    attr_accessor :data_source_id

    # Data source entities mapping for the detector rule
    # @return [Array<OCI::CloudGuard::Models::EntitiesMapping>]
    attr_accessor :entities_mappings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'source_detector_rule_id': :'sourceDetectorRuleId',
        'name': :'name',
        'description': :'description',
        'is_enabled': :'isEnabled',
        'risk_level': :'riskLevel',
        'configurations': :'configurations',
        'condition': :'condition',
        'labels': :'labels',
        'recommendation': :'recommendation',
        'data_source_id': :'dataSourceId',
        'entities_mappings': :'entitiesMappings'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'source_detector_rule_id': :'String',
        'name': :'String',
        'description': :'String',
        'is_enabled': :'BOOLEAN',
        'risk_level': :'String',
        'configurations': :'Array<OCI::CloudGuard::Models::DetectorConfiguration>',
        'condition': :'OCI::CloudGuard::Models::Condition',
        'labels': :'Array<String>',
        'recommendation': :'String',
        'data_source_id': :'String',
        'entities_mappings': :'Array<OCI::CloudGuard::Models::EntitiesMapping>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :source_detector_rule_id The value to assign to the {#source_detector_rule_id} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [BOOLEAN] :is_enabled The value to assign to the {#is_enabled} property
    # @option attributes [String] :risk_level The value to assign to the {#risk_level} property
    # @option attributes [Array<OCI::CloudGuard::Models::DetectorConfiguration>] :configurations The value to assign to the {#configurations} property
    # @option attributes [OCI::CloudGuard::Models::Condition] :condition The value to assign to the {#condition} property
    # @option attributes [Array<String>] :labels The value to assign to the {#labels} property
    # @option attributes [String] :recommendation The value to assign to the {#recommendation} property
    # @option attributes [String] :data_source_id The value to assign to the {#data_source_id} property
    # @option attributes [Array<OCI::CloudGuard::Models::EntitiesMapping>] :entities_mappings The value to assign to the {#entities_mappings} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.source_detector_rule_id = attributes[:'sourceDetectorRuleId'] if attributes[:'sourceDetectorRuleId']

      raise 'You cannot provide both :sourceDetectorRuleId and :source_detector_rule_id' if attributes.key?(:'sourceDetectorRuleId') && attributes.key?(:'source_detector_rule_id')

      self.source_detector_rule_id = attributes[:'source_detector_rule_id'] if attributes[:'source_detector_rule_id']

      self.name = attributes[:'name'] if attributes[:'name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.is_enabled = attributes[:'isEnabled'] unless attributes[:'isEnabled'].nil?
      self.is_enabled = false if is_enabled.nil? && !attributes.key?(:'isEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isEnabled and :is_enabled' if attributes.key?(:'isEnabled') && attributes.key?(:'is_enabled')

      self.is_enabled = attributes[:'is_enabled'] unless attributes[:'is_enabled'].nil?
      self.is_enabled = false if is_enabled.nil? && !attributes.key?(:'isEnabled') && !attributes.key?(:'is_enabled') # rubocop:disable Style/StringLiterals

      self.risk_level = attributes[:'riskLevel'] if attributes[:'riskLevel']

      raise 'You cannot provide both :riskLevel and :risk_level' if attributes.key?(:'riskLevel') && attributes.key?(:'risk_level')

      self.risk_level = attributes[:'risk_level'] if attributes[:'risk_level']

      self.configurations = attributes[:'configurations'] if attributes[:'configurations']

      self.condition = attributes[:'condition'] if attributes[:'condition']

      self.labels = attributes[:'labels'] if attributes[:'labels']

      self.recommendation = attributes[:'recommendation'] if attributes[:'recommendation']

      self.data_source_id = attributes[:'dataSourceId'] if attributes[:'dataSourceId']

      raise 'You cannot provide both :dataSourceId and :data_source_id' if attributes.key?(:'dataSourceId') && attributes.key?(:'data_source_id')

      self.data_source_id = attributes[:'data_source_id'] if attributes[:'data_source_id']

      self.entities_mappings = attributes[:'entitiesMappings'] if attributes[:'entitiesMappings']

      raise 'You cannot provide both :entitiesMappings and :entities_mappings' if attributes.key?(:'entitiesMappings') && attributes.key?(:'entities_mappings')

      self.entities_mappings = attributes[:'entities_mappings'] if attributes[:'entities_mappings']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] risk_level Object to be assigned
    def risk_level=(risk_level)
      raise "Invalid value for 'risk_level': this must be one of the values in RISK_LEVEL_ENUM." if risk_level && !RISK_LEVEL_ENUM.include?(risk_level)

      @risk_level = risk_level
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        source_detector_rule_id == other.source_detector_rule_id &&
        name == other.name &&
        description == other.description &&
        is_enabled == other.is_enabled &&
        risk_level == other.risk_level &&
        configurations == other.configurations &&
        condition == other.condition &&
        labels == other.labels &&
        recommendation == other.recommendation &&
        data_source_id == other.data_source_id &&
        entities_mappings == other.entities_mappings
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [source_detector_rule_id, name, description, is_enabled, risk_level, configurations, condition, labels, recommendation, data_source_id, entities_mappings].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
