# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200131
require 'date'
require 'logger'
require_relative 'data_source_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Information for a logging query for a data source.
  class CloudGuard::Models::LoggingQueryDataSourceDetails < CloudGuard::Models::DataSourceDetails
    OPERATOR_ENUM = [
      OPERATOR_EQUAL = 'EQUAL'.freeze,
      OPERATOR_GREATER = 'GREATER'.freeze,
      OPERATOR_GREATERTHANEQUALTO = 'GREATERTHANEQUALTO'.freeze,
      OPERATOR_LESS = 'LESS'.freeze,
      OPERATOR_LESSTHANEQUALTO = 'LESSTHANEQUALTO'.freeze,
      OPERATOR_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LOGGING_QUERY_TYPE_ENUM = [
      LOGGING_QUERY_TYPE_INSIGHT = 'INSIGHT'.freeze,
      LOGGING_QUERY_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # List of logging query regions
    # @return [Array<String>]
    attr_accessor :regions

    # The continuous query expression that is run periodicall
    # @return [String]
    attr_accessor :query

    # Interval in minutes that query is run periodically.
    # @return [Integer]
    attr_accessor :interval_in_minutes

    # The integer value that must be exceeded, fall below or equal to (depending on the operator), for the query result to trigger an event
    # @return [Integer]
    attr_accessor :threshold

    # @return [OCI::CloudGuard::Models::ContinuousQueryStartPolicy]
    attr_accessor :query_start_time

    # Operator used in data source
    # @return [String]
    attr_reader :operator

    # Type of logging query for data source (Sighting/Insight)
    # @return [String]
    attr_reader :logging_query_type

    # The additional entities count used for data source query
    # @return [Integer]
    attr_accessor :additional_entities_count

    # @return [OCI::CloudGuard::Models::LoggingQueryDetails]
    attr_accessor :logging_query_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'data_source_feed_provider': :'dataSourceFeedProvider',
        'regions': :'regions',
        'query': :'query',
        'interval_in_minutes': :'intervalInMinutes',
        'threshold': :'threshold',
        'query_start_time': :'queryStartTime',
        'operator': :'operator',
        'logging_query_type': :'loggingQueryType',
        'additional_entities_count': :'additionalEntitiesCount',
        'logging_query_details': :'loggingQueryDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'data_source_feed_provider': :'String',
        'regions': :'Array<String>',
        'query': :'String',
        'interval_in_minutes': :'Integer',
        'threshold': :'Integer',
        'query_start_time': :'OCI::CloudGuard::Models::ContinuousQueryStartPolicy',
        'operator': :'String',
        'logging_query_type': :'String',
        'additional_entities_count': :'Integer',
        'logging_query_details': :'OCI::CloudGuard::Models::LoggingQueryDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<String>] :regions The value to assign to the {#regions} property
    # @option attributes [String] :query The value to assign to the {#query} property
    # @option attributes [Integer] :interval_in_minutes The value to assign to the {#interval_in_minutes} property
    # @option attributes [Integer] :threshold The value to assign to the {#threshold} property
    # @option attributes [OCI::CloudGuard::Models::ContinuousQueryStartPolicy] :query_start_time The value to assign to the {#query_start_time} property
    # @option attributes [String] :operator The value to assign to the {#operator} property
    # @option attributes [String] :logging_query_type The value to assign to the {#logging_query_type} property
    # @option attributes [Integer] :additional_entities_count The value to assign to the {#additional_entities_count} property
    # @option attributes [OCI::CloudGuard::Models::LoggingQueryDetails] :logging_query_details The value to assign to the {#logging_query_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['dataSourceFeedProvider'] = 'LOGGINGQUERY'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.regions = attributes[:'regions'] if attributes[:'regions']

      self.query = attributes[:'query'] if attributes[:'query']

      self.interval_in_minutes = attributes[:'intervalInMinutes'] if attributes[:'intervalInMinutes']

      raise 'You cannot provide both :intervalInMinutes and :interval_in_minutes' if attributes.key?(:'intervalInMinutes') && attributes.key?(:'interval_in_minutes')

      self.interval_in_minutes = attributes[:'interval_in_minutes'] if attributes[:'interval_in_minutes']

      self.threshold = attributes[:'threshold'] if attributes[:'threshold']

      self.query_start_time = attributes[:'queryStartTime'] if attributes[:'queryStartTime']

      raise 'You cannot provide both :queryStartTime and :query_start_time' if attributes.key?(:'queryStartTime') && attributes.key?(:'query_start_time')

      self.query_start_time = attributes[:'query_start_time'] if attributes[:'query_start_time']

      self.operator = attributes[:'operator'] if attributes[:'operator']

      self.logging_query_type = attributes[:'loggingQueryType'] if attributes[:'loggingQueryType']

      raise 'You cannot provide both :loggingQueryType and :logging_query_type' if attributes.key?(:'loggingQueryType') && attributes.key?(:'logging_query_type')

      self.logging_query_type = attributes[:'logging_query_type'] if attributes[:'logging_query_type']

      self.additional_entities_count = attributes[:'additionalEntitiesCount'] if attributes[:'additionalEntitiesCount']

      raise 'You cannot provide both :additionalEntitiesCount and :additional_entities_count' if attributes.key?(:'additionalEntitiesCount') && attributes.key?(:'additional_entities_count')

      self.additional_entities_count = attributes[:'additional_entities_count'] if attributes[:'additional_entities_count']

      self.logging_query_details = attributes[:'loggingQueryDetails'] if attributes[:'loggingQueryDetails']

      raise 'You cannot provide both :loggingQueryDetails and :logging_query_details' if attributes.key?(:'loggingQueryDetails') && attributes.key?(:'logging_query_details')

      self.logging_query_details = attributes[:'logging_query_details'] if attributes[:'logging_query_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operator Object to be assigned
    def operator=(operator)
      # rubocop:disable Style/ConditionalAssignment
      if operator && !OPERATOR_ENUM.include?(operator)
        OCI.logger.debug("Unknown value for 'operator' [" + operator + "]. Mapping to 'OPERATOR_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @operator = OPERATOR_UNKNOWN_ENUM_VALUE
      else
        @operator = operator
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] logging_query_type Object to be assigned
    def logging_query_type=(logging_query_type)
      # rubocop:disable Style/ConditionalAssignment
      if logging_query_type && !LOGGING_QUERY_TYPE_ENUM.include?(logging_query_type)
        OCI.logger.debug("Unknown value for 'logging_query_type' [" + logging_query_type + "]. Mapping to 'LOGGING_QUERY_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @logging_query_type = LOGGING_QUERY_TYPE_UNKNOWN_ENUM_VALUE
      else
        @logging_query_type = logging_query_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        data_source_feed_provider == other.data_source_feed_provider &&
        regions == other.regions &&
        query == other.query &&
        interval_in_minutes == other.interval_in_minutes &&
        threshold == other.threshold &&
        query_start_time == other.query_start_time &&
        operator == other.operator &&
        logging_query_type == other.logging_query_type &&
        additional_entities_count == other.additional_entities_count &&
        logging_query_details == other.logging_query_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [data_source_feed_provider, regions, query, interval_in_minutes, threshold, query_start_time, operator, logging_query_type, additional_entities_count, logging_query_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
