# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200131
require 'date'
require_relative 'data_source_summary_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary information for a logging query for a data source.
  class CloudGuard::Models::LoggingQueryDataSourceSummaryDetails < CloudGuard::Models::DataSourceSummaryDetails
    # Data source customer-specified regions
    # @return [Array<String>]
    attr_accessor :regions

    # Data source mapping with detector recipe and detector rule
    # @return [Array<OCI::CloudGuard::Models::DataSourceMappingInfo>]
    attr_accessor :data_source_detector_mapping_info

    # Data source query metadata replication region and status.
    # @return [Array<OCI::CloudGuard::Models::RegionStatusDetail>]
    attr_accessor :region_status_detail

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'data_source_feed_provider': :'dataSourceFeedProvider',
        'regions': :'regions',
        'data_source_detector_mapping_info': :'dataSourceDetectorMappingInfo',
        'region_status_detail': :'regionStatusDetail'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'data_source_feed_provider': :'String',
        'regions': :'Array<String>',
        'data_source_detector_mapping_info': :'Array<OCI::CloudGuard::Models::DataSourceMappingInfo>',
        'region_status_detail': :'Array<OCI::CloudGuard::Models::RegionStatusDetail>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<String>] :regions The value to assign to the {#regions} property
    # @option attributes [Array<OCI::CloudGuard::Models::DataSourceMappingInfo>] :data_source_detector_mapping_info The value to assign to the {#data_source_detector_mapping_info} property
    # @option attributes [Array<OCI::CloudGuard::Models::RegionStatusDetail>] :region_status_detail The value to assign to the {#region_status_detail} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['dataSourceFeedProvider'] = 'LOGGINGQUERY'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.regions = attributes[:'regions'] if attributes[:'regions']

      self.data_source_detector_mapping_info = attributes[:'dataSourceDetectorMappingInfo'] if attributes[:'dataSourceDetectorMappingInfo']

      raise 'You cannot provide both :dataSourceDetectorMappingInfo and :data_source_detector_mapping_info' if attributes.key?(:'dataSourceDetectorMappingInfo') && attributes.key?(:'data_source_detector_mapping_info')

      self.data_source_detector_mapping_info = attributes[:'data_source_detector_mapping_info'] if attributes[:'data_source_detector_mapping_info']

      self.region_status_detail = attributes[:'regionStatusDetail'] if attributes[:'regionStatusDetail']

      raise 'You cannot provide both :regionStatusDetail and :region_status_detail' if attributes.key?(:'regionStatusDetail') && attributes.key?(:'region_status_detail')

      self.region_status_detail = attributes[:'region_status_detail'] if attributes[:'region_status_detail']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        data_source_feed_provider == other.data_source_feed_provider &&
        regions == other.regions &&
        data_source_detector_mapping_info == other.data_source_detector_mapping_info &&
        region_status_detail == other.region_status_detail
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [data_source_feed_provider, regions, data_source_detector_mapping_info, region_status_detail].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
