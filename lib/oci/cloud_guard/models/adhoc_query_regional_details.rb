# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200131
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Instance level status for each region.
  class CloudGuard::Models::AdhocQueryRegionalDetails
    REGIONAL_STATUS_ENUM = [
      REGIONAL_STATUS_CREATING = 'CREATING'.freeze,
      REGIONAL_STATUS_CREATED = 'CREATED'.freeze,
      REGIONAL_STATUS_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      REGIONAL_STATUS_PARTIALLY_COMPLETED = 'PARTIALLY_COMPLETED'.freeze,
      REGIONAL_STATUS_EXPIRED = 'EXPIRED'.freeze,
      REGIONAL_STATUS_COMPLETED = 'COMPLETED'.freeze,
      REGIONAL_STATUS_FAILED = 'FAILED'.freeze,
      REGIONAL_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Region name
    # @return [String]
    attr_accessor :region

    # adhoc query status of the region
    # @return [String]
    attr_reader :regional_status

    # error message to show if adhoc query fails in a region
    # @return [String]
    attr_accessor :regional_error

    # Expected number of instances on which query should run
    # @return [String]
    attr_accessor :expected_count

    # Number of instances on which query failed
    # @return [String]
    attr_accessor :failed_count

    # Number of instances on which query succeeded
    # @return [String]
    attr_accessor :succeeded_count

    # Number of instances on which query expired
    # @return [String]
    attr_accessor :expired_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'region': :'region',
        'regional_status': :'regionalStatus',
        'regional_error': :'regionalError',
        'expected_count': :'expectedCount',
        'failed_count': :'failedCount',
        'succeeded_count': :'succeededCount',
        'expired_count': :'expiredCount'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'region': :'String',
        'regional_status': :'String',
        'regional_error': :'String',
        'expected_count': :'String',
        'failed_count': :'String',
        'succeeded_count': :'String',
        'expired_count': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :region The value to assign to the {#region} property
    # @option attributes [String] :regional_status The value to assign to the {#regional_status} property
    # @option attributes [String] :regional_error The value to assign to the {#regional_error} property
    # @option attributes [String] :expected_count The value to assign to the {#expected_count} property
    # @option attributes [String] :failed_count The value to assign to the {#failed_count} property
    # @option attributes [String] :succeeded_count The value to assign to the {#succeeded_count} property
    # @option attributes [String] :expired_count The value to assign to the {#expired_count} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.region = attributes[:'region'] if attributes[:'region']

      self.regional_status = attributes[:'regionalStatus'] if attributes[:'regionalStatus']

      raise 'You cannot provide both :regionalStatus and :regional_status' if attributes.key?(:'regionalStatus') && attributes.key?(:'regional_status')

      self.regional_status = attributes[:'regional_status'] if attributes[:'regional_status']

      self.regional_error = attributes[:'regionalError'] if attributes[:'regionalError']

      raise 'You cannot provide both :regionalError and :regional_error' if attributes.key?(:'regionalError') && attributes.key?(:'regional_error')

      self.regional_error = attributes[:'regional_error'] if attributes[:'regional_error']

      self.expected_count = attributes[:'expectedCount'] if attributes[:'expectedCount']

      raise 'You cannot provide both :expectedCount and :expected_count' if attributes.key?(:'expectedCount') && attributes.key?(:'expected_count')

      self.expected_count = attributes[:'expected_count'] if attributes[:'expected_count']

      self.failed_count = attributes[:'failedCount'] if attributes[:'failedCount']

      raise 'You cannot provide both :failedCount and :failed_count' if attributes.key?(:'failedCount') && attributes.key?(:'failed_count')

      self.failed_count = attributes[:'failed_count'] if attributes[:'failed_count']

      self.succeeded_count = attributes[:'succeededCount'] if attributes[:'succeededCount']

      raise 'You cannot provide both :succeededCount and :succeeded_count' if attributes.key?(:'succeededCount') && attributes.key?(:'succeeded_count')

      self.succeeded_count = attributes[:'succeeded_count'] if attributes[:'succeeded_count']

      self.expired_count = attributes[:'expiredCount'] if attributes[:'expiredCount']

      raise 'You cannot provide both :expiredCount and :expired_count' if attributes.key?(:'expiredCount') && attributes.key?(:'expired_count')

      self.expired_count = attributes[:'expired_count'] if attributes[:'expired_count']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] regional_status Object to be assigned
    def regional_status=(regional_status)
      # rubocop:disable Style/ConditionalAssignment
      if regional_status && !REGIONAL_STATUS_ENUM.include?(regional_status)
        OCI.logger.debug("Unknown value for 'regional_status' [" + regional_status + "]. Mapping to 'REGIONAL_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @regional_status = REGIONAL_STATUS_UNKNOWN_ENUM_VALUE
      else
        @regional_status = regional_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        region == other.region &&
        regional_status == other.regional_status &&
        regional_error == other.regional_error &&
        expected_count == other.expected_count &&
        failed_count == other.failed_count &&
        succeeded_count == other.succeeded_count &&
        expired_count == other.expired_count
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [region, regional_status, regional_error, expected_count, failed_count, succeeded_count, expired_count].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
