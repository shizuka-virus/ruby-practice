# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20180222
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Node Pool Cycling Details
  class ContainerEngine::Models::NodePoolCyclingDetails
    # Maximum active nodes that would be terminated from nodepool during the cycling nodepool process.
    # OKE supports both integer and percentage input.
    # Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
    #
    # @return [String]
    attr_accessor :maximum_unavailable

    # Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process.
    # OKE supports both integer and percentage input.
    # Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
    #
    # @return [String]
    attr_accessor :maximum_surge

    # If nodes in the nodepool will be cycled to have new changes.
    # @return [BOOLEAN]
    attr_accessor :is_node_cycling_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'maximum_unavailable': :'maximumUnavailable',
        'maximum_surge': :'maximumSurge',
        'is_node_cycling_enabled': :'isNodeCyclingEnabled'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'maximum_unavailable': :'String',
        'maximum_surge': :'String',
        'is_node_cycling_enabled': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :maximum_unavailable The value to assign to the {#maximum_unavailable} property
    # @option attributes [String] :maximum_surge The value to assign to the {#maximum_surge} property
    # @option attributes [BOOLEAN] :is_node_cycling_enabled The value to assign to the {#is_node_cycling_enabled} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.maximum_unavailable = attributes[:'maximumUnavailable'] if attributes[:'maximumUnavailable']
      self.maximum_unavailable = "0" if maximum_unavailable.nil? && !attributes.key?(:'maximumUnavailable') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :maximumUnavailable and :maximum_unavailable' if attributes.key?(:'maximumUnavailable') && attributes.key?(:'maximum_unavailable')

      self.maximum_unavailable = attributes[:'maximum_unavailable'] if attributes[:'maximum_unavailable']
      self.maximum_unavailable = "0" if maximum_unavailable.nil? && !attributes.key?(:'maximumUnavailable') && !attributes.key?(:'maximum_unavailable') # rubocop:disable Style/StringLiterals

      self.maximum_surge = attributes[:'maximumSurge'] if attributes[:'maximumSurge']
      self.maximum_surge = "1" if maximum_surge.nil? && !attributes.key?(:'maximumSurge') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :maximumSurge and :maximum_surge' if attributes.key?(:'maximumSurge') && attributes.key?(:'maximum_surge')

      self.maximum_surge = attributes[:'maximum_surge'] if attributes[:'maximum_surge']
      self.maximum_surge = "1" if maximum_surge.nil? && !attributes.key?(:'maximumSurge') && !attributes.key?(:'maximum_surge') # rubocop:disable Style/StringLiterals

      self.is_node_cycling_enabled = attributes[:'isNodeCyclingEnabled'] unless attributes[:'isNodeCyclingEnabled'].nil?
      self.is_node_cycling_enabled = false if is_node_cycling_enabled.nil? && !attributes.key?(:'isNodeCyclingEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isNodeCyclingEnabled and :is_node_cycling_enabled' if attributes.key?(:'isNodeCyclingEnabled') && attributes.key?(:'is_node_cycling_enabled')

      self.is_node_cycling_enabled = attributes[:'is_node_cycling_enabled'] unless attributes[:'is_node_cycling_enabled'].nil?
      self.is_node_cycling_enabled = false if is_node_cycling_enabled.nil? && !attributes.key?(:'isNodeCyclingEnabled') && !attributes.key?(:'is_node_cycling_enabled') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        maximum_unavailable == other.maximum_unavailable &&
        maximum_surge == other.maximum_surge &&
        is_node_cycling_enabled == other.is_node_cycling_enabled
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [maximum_unavailable, maximum_surge, is_node_cycling_enabled].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
