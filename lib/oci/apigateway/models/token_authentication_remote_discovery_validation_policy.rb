# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190501
require 'date'
require_relative 'token_authentication_validation_policy'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Instrospect Url based validation retrieved at run-time from a remote location
  # to verify the provided token.
  #
  class Apigateway::Models::TokenAuthenticationRemoteDiscoveryValidationPolicy < Apigateway::Models::TokenAuthenticationValidationPolicy
    # This attribute is required.
    # @return [OCI::Apigateway::Models::ClientAppDetails]
    attr_accessor :client_details

    # This attribute is required.
    # @return [OCI::Apigateway::Models::SourceUriDetails]
    attr_accessor :source_uri_details

    # Defines whether or not to uphold SSL verification.
    #
    # @return [BOOLEAN]
    attr_accessor :is_ssl_verify_disabled

    # The duration for which the introspect URL response should be cached before it is
    # fetched again.
    #
    # @return [Integer]
    attr_accessor :max_cache_duration_in_hours

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'type',
        'additional_validation_policy': :'additionalValidationPolicy',
        'client_details': :'clientDetails',
        'source_uri_details': :'sourceUriDetails',
        'is_ssl_verify_disabled': :'isSslVerifyDisabled',
        'max_cache_duration_in_hours': :'maxCacheDurationInHours'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'type': :'String',
        'additional_validation_policy': :'OCI::Apigateway::Models::AdditionalValidationPolicy',
        'client_details': :'OCI::Apigateway::Models::ClientAppDetails',
        'source_uri_details': :'OCI::Apigateway::Models::SourceUriDetails',
        'is_ssl_verify_disabled': :'BOOLEAN',
        'max_cache_duration_in_hours': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::Apigateway::Models::AdditionalValidationPolicy] :additional_validation_policy The value to assign to the {OCI::Apigateway::Models::TokenAuthenticationValidationPolicy#additional_validation_policy #additional_validation_policy} proprety
    # @option attributes [OCI::Apigateway::Models::ClientAppDetails] :client_details The value to assign to the {#client_details} property
    # @option attributes [OCI::Apigateway::Models::SourceUriDetails] :source_uri_details The value to assign to the {#source_uri_details} property
    # @option attributes [BOOLEAN] :is_ssl_verify_disabled The value to assign to the {#is_ssl_verify_disabled} property
    # @option attributes [Integer] :max_cache_duration_in_hours The value to assign to the {#max_cache_duration_in_hours} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['type'] = 'REMOTE_DISCOVERY'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.client_details = attributes[:'clientDetails'] if attributes[:'clientDetails']

      raise 'You cannot provide both :clientDetails and :client_details' if attributes.key?(:'clientDetails') && attributes.key?(:'client_details')

      self.client_details = attributes[:'client_details'] if attributes[:'client_details']

      self.source_uri_details = attributes[:'sourceUriDetails'] if attributes[:'sourceUriDetails']

      raise 'You cannot provide both :sourceUriDetails and :source_uri_details' if attributes.key?(:'sourceUriDetails') && attributes.key?(:'source_uri_details')

      self.source_uri_details = attributes[:'source_uri_details'] if attributes[:'source_uri_details']

      self.is_ssl_verify_disabled = attributes[:'isSslVerifyDisabled'] unless attributes[:'isSslVerifyDisabled'].nil?
      self.is_ssl_verify_disabled = false if is_ssl_verify_disabled.nil? && !attributes.key?(:'isSslVerifyDisabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isSslVerifyDisabled and :is_ssl_verify_disabled' if attributes.key?(:'isSslVerifyDisabled') && attributes.key?(:'is_ssl_verify_disabled')

      self.is_ssl_verify_disabled = attributes[:'is_ssl_verify_disabled'] unless attributes[:'is_ssl_verify_disabled'].nil?
      self.is_ssl_verify_disabled = false if is_ssl_verify_disabled.nil? && !attributes.key?(:'isSslVerifyDisabled') && !attributes.key?(:'is_ssl_verify_disabled') # rubocop:disable Style/StringLiterals

      self.max_cache_duration_in_hours = attributes[:'maxCacheDurationInHours'] if attributes[:'maxCacheDurationInHours']
      self.max_cache_duration_in_hours = 1 if max_cache_duration_in_hours.nil? && !attributes.key?(:'maxCacheDurationInHours') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :maxCacheDurationInHours and :max_cache_duration_in_hours' if attributes.key?(:'maxCacheDurationInHours') && attributes.key?(:'max_cache_duration_in_hours')

      self.max_cache_duration_in_hours = attributes[:'max_cache_duration_in_hours'] if attributes[:'max_cache_duration_in_hours']
      self.max_cache_duration_in_hours = 1 if max_cache_duration_in_hours.nil? && !attributes.key?(:'maxCacheDurationInHours') && !attributes.key?(:'max_cache_duration_in_hours') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        additional_validation_policy == other.additional_validation_policy &&
        client_details == other.client_details &&
        source_uri_details == other.source_uri_details &&
        is_ssl_verify_disabled == other.is_ssl_verify_disabled &&
        max_cache_duration_in_hours == other.max_cache_duration_in_hours
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, additional_validation_policy, client_details, source_uri_details, is_ssl_verify_disabled, max_cache_duration_in_hours].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
