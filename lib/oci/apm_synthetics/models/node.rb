# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of the network node.
  class ApmSynthetics::Models::Node
    TYPE_ENUM = [
      TYPE_SOURCE = 'SOURCE'.freeze,
      TYPE_DESTINATION = 'DESTINATION'.freeze,
      TYPE_ANONYMOUS = 'ANONYMOUS'.freeze,
      TYPE_INTERNAL = 'INTERNAL'.freeze,
      TYPE_DANGLING = 'DANGLING'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** ID of the network node.
    # @return [String]
    attr_accessor :id

    # IP address of the network node.
    # @return [String]
    attr_accessor :ip_address

    # Display name of the network node.
    # @return [String]
    attr_accessor :display_name

    # Geographical information of the network node.
    # @return [String]
    attr_accessor :geo_info

    # Outgoing links from the network node.
    # @return [Array<String>]
    attr_accessor :outgoing_links

    # Number of consecutive anonymous network nodes.
    # @return [Integer]
    attr_accessor :consecutive_anonymous_count

    # Level of the network node.
    # @return [Integer]
    attr_accessor :level

    # Average packet response time in milliseconds.
    # @return [Float]
    attr_accessor :avg_packet_response_time_in_ms

    # Percentage of the average packet loss.
    # @return [Float]
    attr_accessor :avg_packet_loss_percent

    # Type of network node.
    # @return [String]
    attr_reader :type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'ip_address': :'ipAddress',
        'display_name': :'displayName',
        'geo_info': :'geoInfo',
        'outgoing_links': :'outgoingLinks',
        'consecutive_anonymous_count': :'consecutiveAnonymousCount',
        'level': :'level',
        'avg_packet_response_time_in_ms': :'avgPacketResponseTimeInMs',
        'avg_packet_loss_percent': :'avgPacketLossPercent',
        'type': :'type'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'ip_address': :'String',
        'display_name': :'String',
        'geo_info': :'String',
        'outgoing_links': :'Array<String>',
        'consecutive_anonymous_count': :'Integer',
        'level': :'Integer',
        'avg_packet_response_time_in_ms': :'Float',
        'avg_packet_loss_percent': :'Float',
        'type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :ip_address The value to assign to the {#ip_address} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :geo_info The value to assign to the {#geo_info} property
    # @option attributes [Array<String>] :outgoing_links The value to assign to the {#outgoing_links} property
    # @option attributes [Integer] :consecutive_anonymous_count The value to assign to the {#consecutive_anonymous_count} property
    # @option attributes [Integer] :level The value to assign to the {#level} property
    # @option attributes [Float] :avg_packet_response_time_in_ms The value to assign to the {#avg_packet_response_time_in_ms} property
    # @option attributes [Float] :avg_packet_loss_percent The value to assign to the {#avg_packet_loss_percent} property
    # @option attributes [String] :type The value to assign to the {#type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.ip_address = attributes[:'ipAddress'] if attributes[:'ipAddress']

      raise 'You cannot provide both :ipAddress and :ip_address' if attributes.key?(:'ipAddress') && attributes.key?(:'ip_address')

      self.ip_address = attributes[:'ip_address'] if attributes[:'ip_address']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.geo_info = attributes[:'geoInfo'] if attributes[:'geoInfo']

      raise 'You cannot provide both :geoInfo and :geo_info' if attributes.key?(:'geoInfo') && attributes.key?(:'geo_info')

      self.geo_info = attributes[:'geo_info'] if attributes[:'geo_info']

      self.outgoing_links = attributes[:'outgoingLinks'] if attributes[:'outgoingLinks']

      raise 'You cannot provide both :outgoingLinks and :outgoing_links' if attributes.key?(:'outgoingLinks') && attributes.key?(:'outgoing_links')

      self.outgoing_links = attributes[:'outgoing_links'] if attributes[:'outgoing_links']

      self.consecutive_anonymous_count = attributes[:'consecutiveAnonymousCount'] if attributes[:'consecutiveAnonymousCount']

      raise 'You cannot provide both :consecutiveAnonymousCount and :consecutive_anonymous_count' if attributes.key?(:'consecutiveAnonymousCount') && attributes.key?(:'consecutive_anonymous_count')

      self.consecutive_anonymous_count = attributes[:'consecutive_anonymous_count'] if attributes[:'consecutive_anonymous_count']

      self.level = attributes[:'level'] if attributes[:'level']

      self.avg_packet_response_time_in_ms = attributes[:'avgPacketResponseTimeInMs'] if attributes[:'avgPacketResponseTimeInMs']

      raise 'You cannot provide both :avgPacketResponseTimeInMs and :avg_packet_response_time_in_ms' if attributes.key?(:'avgPacketResponseTimeInMs') && attributes.key?(:'avg_packet_response_time_in_ms')

      self.avg_packet_response_time_in_ms = attributes[:'avg_packet_response_time_in_ms'] if attributes[:'avg_packet_response_time_in_ms']

      self.avg_packet_loss_percent = attributes[:'avgPacketLossPercent'] if attributes[:'avgPacketLossPercent']

      raise 'You cannot provide both :avgPacketLossPercent and :avg_packet_loss_percent' if attributes.key?(:'avgPacketLossPercent') && attributes.key?(:'avg_packet_loss_percent')

      self.avg_packet_loss_percent = attributes[:'avg_packet_loss_percent'] if attributes[:'avg_packet_loss_percent']

      self.type = attributes[:'type'] if attributes[:'type']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        ip_address == other.ip_address &&
        display_name == other.display_name &&
        geo_info == other.geo_info &&
        outgoing_links == other.outgoing_links &&
        consecutive_anonymous_count == other.consecutive_anonymous_count &&
        level == other.level &&
        avg_packet_response_time_in_ms == other.avg_packet_response_time_in_ms &&
        avg_packet_loss_percent == other.avg_packet_loss_percent &&
        type == other.type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, ip_address, display_name, geo_info, outgoing_links, consecutive_anonymous_count, level, avg_packet_response_time_in_ms, avg_packet_loss_percent, type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
