# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of the aggregated network data.
  class ApmSynthetics::Models::AggregatedNetworkData
    RESULT_STATE_ENUM = [
      RESULT_STATE_SUCCESS = 'SUCCESS'.freeze,
      RESULT_STATE_FAILURE = 'FAILURE'.freeze,
      RESULT_STATE_PARTIAL = 'PARTIAL'.freeze,
      RESULT_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Status of the aggregated network data result.
    # @return [String]
    attr_reader :result_state

    # List of vantage point nodes.
    # @return [Array<OCI::ApmSynthetics::Models::VantagePointNode>]
    attr_accessor :vantage_point_nodes

    # An array of node arrays where each internal array corresponds to nodes at one level.
    # @return [Array<Array<OCI::ApmSynthetics::Models::Node>>]
    attr_accessor :nodes_by_level

    # Map of link objects.
    # @return [Hash<String, OCI::ApmSynthetics::Models::Link>]
    attr_accessor :links

    # String containing error details.
    # @return [String]
    attr_accessor :error_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'result_state': :'resultState',
        'vantage_point_nodes': :'vantagePointNodes',
        'nodes_by_level': :'nodesByLevel',
        'links': :'links',
        'error_details': :'errorDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'result_state': :'String',
        'vantage_point_nodes': :'Array<OCI::ApmSynthetics::Models::VantagePointNode>',
        'nodes_by_level': :'Array<Array<OCI::ApmSynthetics::Models::Node>>',
        'links': :'Hash<String, OCI::ApmSynthetics::Models::Link>',
        'error_details': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :result_state The value to assign to the {#result_state} property
    # @option attributes [Array<OCI::ApmSynthetics::Models::VantagePointNode>] :vantage_point_nodes The value to assign to the {#vantage_point_nodes} property
    # @option attributes [Array<Array<OCI::ApmSynthetics::Models::Node>>] :nodes_by_level The value to assign to the {#nodes_by_level} property
    # @option attributes [Hash<String, OCI::ApmSynthetics::Models::Link>] :links The value to assign to the {#links} property
    # @option attributes [String] :error_details The value to assign to the {#error_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.result_state = attributes[:'resultState'] if attributes[:'resultState']

      raise 'You cannot provide both :resultState and :result_state' if attributes.key?(:'resultState') && attributes.key?(:'result_state')

      self.result_state = attributes[:'result_state'] if attributes[:'result_state']

      self.vantage_point_nodes = attributes[:'vantagePointNodes'] if attributes[:'vantagePointNodes']

      raise 'You cannot provide both :vantagePointNodes and :vantage_point_nodes' if attributes.key?(:'vantagePointNodes') && attributes.key?(:'vantage_point_nodes')

      self.vantage_point_nodes = attributes[:'vantage_point_nodes'] if attributes[:'vantage_point_nodes']

      self.nodes_by_level = attributes[:'nodesByLevel'] if attributes[:'nodesByLevel']

      raise 'You cannot provide both :nodesByLevel and :nodes_by_level' if attributes.key?(:'nodesByLevel') && attributes.key?(:'nodes_by_level')

      self.nodes_by_level = attributes[:'nodes_by_level'] if attributes[:'nodes_by_level']

      self.links = attributes[:'links'] if attributes[:'links']

      self.error_details = attributes[:'errorDetails'] if attributes[:'errorDetails']

      raise 'You cannot provide both :errorDetails and :error_details' if attributes.key?(:'errorDetails') && attributes.key?(:'error_details')

      self.error_details = attributes[:'error_details'] if attributes[:'error_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] result_state Object to be assigned
    def result_state=(result_state)
      # rubocop:disable Style/ConditionalAssignment
      if result_state && !RESULT_STATE_ENUM.include?(result_state)
        OCI.logger.debug("Unknown value for 'result_state' [" + result_state + "]. Mapping to 'RESULT_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @result_state = RESULT_STATE_UNKNOWN_ENUM_VALUE
      else
        @result_state = result_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        result_state == other.result_state &&
        vantage_point_nodes == other.vantage_point_nodes &&
        nodes_by_level == other.nodes_by_level &&
        links == other.links &&
        error_details == other.error_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [result_state, vantage_point_nodes, nodes_by_level, links, error_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
