# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Information about On-premise VP worker.
  class ApmSynthetics::Models::WorkerSummary
    WORKER_TYPE_ENUM = [
      WORKER_TYPE_DOCKER = 'DOCKER'.freeze,
      WORKER_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    STATUS_ENUM = [
      STATUS_ENABLED = 'ENABLED'.freeze,
      STATUS_DISABLED = 'DISABLED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the On-premise VP worker.
    # @return [String]
    attr_accessor :id

    # **[Required]** Unique On-premise VP worker name that cannot be edited. The name should not contain any confidential information.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** Unique permanent name of the On-premise VP worker. This is the same as the displayName.
    # @return [String]
    attr_accessor :name

    # This attribute is required.
    # @return [OCI::ApmSynthetics::Models::OnPremiseVpWorkerVersionDetails]
    attr_accessor :version_details

    # Configuration details of the On-premise VP worker.
    # @return [Object]
    attr_accessor :configuration_details

    # **[Required]** Type of the On-premise VP worker.
    # @return [String]
    attr_reader :worker_type

    # **[Required]** Enables or disables the On-premise VP worker.
    # @return [String]
    attr_reader :status

    # **[Required]** Priority of the On-premise VP worker to schedule monitors.
    # @return [Integer]
    attr_accessor :priority

    # Geographical information of the On-premise VP worker.
    # @return [String]
    attr_accessor :geo_info

    # Monitors list assigned to the On-premise VP worker.
    # @return [Array<OCI::ApmSynthetics::Models::WorkerMonitorList>]
    attr_accessor :monitor_list

    # The time the resource was last synced, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)
    # timestamp format.
    # Example: `2020-02-12T22:47:12.613Z`
    #
    # @return [DateTime]
    attr_accessor :time_last_syncup

    # The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)
    # timestamp format.
    # Example: `2020-02-12T22:47:12.613Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339)
    # timestamp format.
    # Example: `2020-02-13T22:47:12.613Z`
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'name': :'name',
        'version_details': :'versionDetails',
        'configuration_details': :'configurationDetails',
        'worker_type': :'workerType',
        'status': :'status',
        'priority': :'priority',
        'geo_info': :'geoInfo',
        'monitor_list': :'monitorList',
        'time_last_syncup': :'timeLastSyncup',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'name': :'String',
        'version_details': :'OCI::ApmSynthetics::Models::OnPremiseVpWorkerVersionDetails',
        'configuration_details': :'Object',
        'worker_type': :'String',
        'status': :'String',
        'priority': :'Integer',
        'geo_info': :'String',
        'monitor_list': :'Array<OCI::ApmSynthetics::Models::WorkerMonitorList>',
        'time_last_syncup': :'DateTime',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [OCI::ApmSynthetics::Models::OnPremiseVpWorkerVersionDetails] :version_details The value to assign to the {#version_details} property
    # @option attributes [Object] :configuration_details The value to assign to the {#configuration_details} property
    # @option attributes [String] :worker_type The value to assign to the {#worker_type} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [Integer] :priority The value to assign to the {#priority} property
    # @option attributes [String] :geo_info The value to assign to the {#geo_info} property
    # @option attributes [Array<OCI::ApmSynthetics::Models::WorkerMonitorList>] :monitor_list The value to assign to the {#monitor_list} property
    # @option attributes [DateTime] :time_last_syncup The value to assign to the {#time_last_syncup} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.name = attributes[:'name'] if attributes[:'name']

      self.version_details = attributes[:'versionDetails'] if attributes[:'versionDetails']

      raise 'You cannot provide both :versionDetails and :version_details' if attributes.key?(:'versionDetails') && attributes.key?(:'version_details')

      self.version_details = attributes[:'version_details'] if attributes[:'version_details']

      self.configuration_details = attributes[:'configurationDetails'] if attributes[:'configurationDetails']

      raise 'You cannot provide both :configurationDetails and :configuration_details' if attributes.key?(:'configurationDetails') && attributes.key?(:'configuration_details')

      self.configuration_details = attributes[:'configuration_details'] if attributes[:'configuration_details']

      self.worker_type = attributes[:'workerType'] if attributes[:'workerType']

      raise 'You cannot provide both :workerType and :worker_type' if attributes.key?(:'workerType') && attributes.key?(:'worker_type')

      self.worker_type = attributes[:'worker_type'] if attributes[:'worker_type']

      self.status = attributes[:'status'] if attributes[:'status']

      self.priority = attributes[:'priority'] if attributes[:'priority']

      self.geo_info = attributes[:'geoInfo'] if attributes[:'geoInfo']

      raise 'You cannot provide both :geoInfo and :geo_info' if attributes.key?(:'geoInfo') && attributes.key?(:'geo_info')

      self.geo_info = attributes[:'geo_info'] if attributes[:'geo_info']

      self.monitor_list = attributes[:'monitorList'] if attributes[:'monitorList']

      raise 'You cannot provide both :monitorList and :monitor_list' if attributes.key?(:'monitorList') && attributes.key?(:'monitor_list')

      self.monitor_list = attributes[:'monitor_list'] if attributes[:'monitor_list']

      self.time_last_syncup = attributes[:'timeLastSyncup'] if attributes[:'timeLastSyncup']

      raise 'You cannot provide both :timeLastSyncup and :time_last_syncup' if attributes.key?(:'timeLastSyncup') && attributes.key?(:'time_last_syncup')

      self.time_last_syncup = attributes[:'time_last_syncup'] if attributes[:'time_last_syncup']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] worker_type Object to be assigned
    def worker_type=(worker_type)
      # rubocop:disable Style/ConditionalAssignment
      if worker_type && !WORKER_TYPE_ENUM.include?(worker_type)
        OCI.logger.debug("Unknown value for 'worker_type' [" + worker_type + "]. Mapping to 'WORKER_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @worker_type = WORKER_TYPE_UNKNOWN_ENUM_VALUE
      else
        @worker_type = worker_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        name == other.name &&
        version_details == other.version_details &&
        configuration_details == other.configuration_details &&
        worker_type == other.worker_type &&
        status == other.status &&
        priority == other.priority &&
        geo_info == other.geo_info &&
        monitor_list == other.monitor_list &&
        time_last_syncup == other.time_last_syncup &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, name, version_details, configuration_details, worker_type, status, priority, geo_info, monitor_list, time_last_syncup, time_created, time_updated, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
