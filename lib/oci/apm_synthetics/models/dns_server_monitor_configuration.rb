# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'
require 'logger'
require_relative 'monitor_configuration'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Request configuration details for the DNS Server monitor type.
  class ApmSynthetics::Models::DnsServerMonitorConfiguration < ApmSynthetics::Models::MonitorConfiguration
    RECORD_TYPE_ENUM = [
      RECORD_TYPE_A = 'A'.freeze,
      RECORD_TYPE_AAAA = 'AAAA'.freeze,
      RECORD_TYPE_ANY = 'ANY'.freeze,
      RECORD_TYPE_CNAME = 'CNAME'.freeze,
      RECORD_TYPE_DNSKEY = 'DNSKEY'.freeze,
      RECORD_TYPE_DS = 'DS'.freeze,
      RECORD_TYPE_MX = 'MX'.freeze,
      RECORD_TYPE_NS = 'NS'.freeze,
      RECORD_TYPE_NSEC = 'NSEC'.freeze,
      RECORD_TYPE_NULL_REC = 'NULL_REC'.freeze,
      RECORD_TYPE_PTR = 'PTR'.freeze,
      RECORD_TYPE_RRSIG = 'RRSIG'.freeze,
      RECORD_TYPE_SOA = 'SOA'.freeze,
      RECORD_TYPE_TXT = 'TXT'.freeze,
      RECORD_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PROTOCOL_ENUM = [
      PROTOCOL_TCP = 'TCP'.freeze,
      PROTOCOL_UDP = 'UDP'.freeze,
      PROTOCOL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # DNS record type.
    # @return [String]
    attr_reader :record_type

    # Name of the server that will be used to perform DNS lookup.
    # @return [String]
    attr_accessor :name_server

    # @return [OCI::ApmSynthetics::Models::NetworkConfiguration]
    attr_accessor :network_configuration

    # Type of protocol.
    # @return [String]
    attr_reader :protocol

    # Verify response content against regular expression based string.
    # If response content does not match the verifyResponseContent value, then it will be considered a failure.
    #
    # @return [String]
    attr_accessor :verify_response_content

    # If isQueryRecursive is enabled, then queries will be sent recursively to the target server.
    # @return [BOOLEAN]
    attr_accessor :is_query_recursive

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'config_type': :'configType',
        'is_failure_retried': :'isFailureRetried',
        'dns_configuration': :'dnsConfiguration',
        'record_type': :'recordType',
        'name_server': :'nameServer',
        'network_configuration': :'networkConfiguration',
        'protocol': :'protocol',
        'verify_response_content': :'verifyResponseContent',
        'is_query_recursive': :'isQueryRecursive'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'config_type': :'String',
        'is_failure_retried': :'BOOLEAN',
        'dns_configuration': :'OCI::ApmSynthetics::Models::DnsConfiguration',
        'record_type': :'String',
        'name_server': :'String',
        'network_configuration': :'OCI::ApmSynthetics::Models::NetworkConfiguration',
        'protocol': :'String',
        'verify_response_content': :'String',
        'is_query_recursive': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :is_failure_retried The value to assign to the {OCI::ApmSynthetics::Models::MonitorConfiguration#is_failure_retried #is_failure_retried} proprety
    # @option attributes [OCI::ApmSynthetics::Models::DnsConfiguration] :dns_configuration The value to assign to the {OCI::ApmSynthetics::Models::MonitorConfiguration#dns_configuration #dns_configuration} proprety
    # @option attributes [String] :record_type The value to assign to the {#record_type} property
    # @option attributes [String] :name_server The value to assign to the {#name_server} property
    # @option attributes [OCI::ApmSynthetics::Models::NetworkConfiguration] :network_configuration The value to assign to the {#network_configuration} property
    # @option attributes [String] :protocol The value to assign to the {#protocol} property
    # @option attributes [String] :verify_response_content The value to assign to the {#verify_response_content} property
    # @option attributes [BOOLEAN] :is_query_recursive The value to assign to the {#is_query_recursive} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['configType'] = 'DNS_SERVER_CONFIG'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.record_type = attributes[:'recordType'] if attributes[:'recordType']

      raise 'You cannot provide both :recordType and :record_type' if attributes.key?(:'recordType') && attributes.key?(:'record_type')

      self.record_type = attributes[:'record_type'] if attributes[:'record_type']

      self.name_server = attributes[:'nameServer'] if attributes[:'nameServer']

      raise 'You cannot provide both :nameServer and :name_server' if attributes.key?(:'nameServer') && attributes.key?(:'name_server')

      self.name_server = attributes[:'name_server'] if attributes[:'name_server']

      self.network_configuration = attributes[:'networkConfiguration'] if attributes[:'networkConfiguration']

      raise 'You cannot provide both :networkConfiguration and :network_configuration' if attributes.key?(:'networkConfiguration') && attributes.key?(:'network_configuration')

      self.network_configuration = attributes[:'network_configuration'] if attributes[:'network_configuration']

      self.protocol = attributes[:'protocol'] if attributes[:'protocol']
      self.protocol = "UDP" if protocol.nil? && !attributes.key?(:'protocol') # rubocop:disable Style/StringLiterals

      self.verify_response_content = attributes[:'verifyResponseContent'] if attributes[:'verifyResponseContent']

      raise 'You cannot provide both :verifyResponseContent and :verify_response_content' if attributes.key?(:'verifyResponseContent') && attributes.key?(:'verify_response_content')

      self.verify_response_content = attributes[:'verify_response_content'] if attributes[:'verify_response_content']

      self.is_query_recursive = attributes[:'isQueryRecursive'] unless attributes[:'isQueryRecursive'].nil?
      self.is_query_recursive = false if is_query_recursive.nil? && !attributes.key?(:'isQueryRecursive') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isQueryRecursive and :is_query_recursive' if attributes.key?(:'isQueryRecursive') && attributes.key?(:'is_query_recursive')

      self.is_query_recursive = attributes[:'is_query_recursive'] unless attributes[:'is_query_recursive'].nil?
      self.is_query_recursive = false if is_query_recursive.nil? && !attributes.key?(:'isQueryRecursive') && !attributes.key?(:'is_query_recursive') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] record_type Object to be assigned
    def record_type=(record_type)
      # rubocop:disable Style/ConditionalAssignment
      if record_type && !RECORD_TYPE_ENUM.include?(record_type)
        OCI.logger.debug("Unknown value for 'record_type' [" + record_type + "]. Mapping to 'RECORD_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @record_type = RECORD_TYPE_UNKNOWN_ENUM_VALUE
      else
        @record_type = record_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] protocol Object to be assigned
    def protocol=(protocol)
      # rubocop:disable Style/ConditionalAssignment
      if protocol && !PROTOCOL_ENUM.include?(protocol)
        OCI.logger.debug("Unknown value for 'protocol' [" + protocol + "]. Mapping to 'PROTOCOL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @protocol = PROTOCOL_UNKNOWN_ENUM_VALUE
      else
        @protocol = protocol
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        config_type == other.config_type &&
        is_failure_retried == other.is_failure_retried &&
        dns_configuration == other.dns_configuration &&
        record_type == other.record_type &&
        name_server == other.name_server &&
        network_configuration == other.network_configuration &&
        protocol == other.protocol &&
        verify_response_content == other.verify_response_content &&
        is_query_recursive == other.is_query_recursive
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [config_type, is_failure_retried, dns_configuration, record_type, name_server, network_configuration, protocol, verify_response_content, is_query_recursive].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
