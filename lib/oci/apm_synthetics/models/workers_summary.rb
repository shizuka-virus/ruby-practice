# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200630
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of the workers in a specific On-premise vantage point.
  #
  class ApmSynthetics::Models::WorkersSummary
    # **[Required]** Total number of workers in a specific On-premise vantage point.
    # @return [Integer]
    attr_accessor :total

    # **[Required]** Number of available workers in a specific On-premise vantage point.
    # @return [Integer]
    attr_accessor :available

    # **[Required]** Number of occupied workers in a specific On-premise vantage point.
    # @return [Integer]
    attr_accessor :used

    # **[Required]** Number of disabled workers in a specific On-premise vantage point.
    # @return [Integer]
    attr_accessor :disabled

    # **[Required]** Minimum version among the workers in a specific On-premise vantage point.
    # @return [String]
    attr_accessor :min_version

    # **[Required]** List of available capabilities in a specific On-premise vantage point.
    # @return [Array<OCI::ApmSynthetics::Models::AvailableCapability>]
    attr_accessor :available_capabilities

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'total': :'total',
        'available': :'available',
        'used': :'used',
        'disabled': :'disabled',
        'min_version': :'minVersion',
        'available_capabilities': :'availableCapabilities'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'total': :'Integer',
        'available': :'Integer',
        'used': :'Integer',
        'disabled': :'Integer',
        'min_version': :'String',
        'available_capabilities': :'Array<OCI::ApmSynthetics::Models::AvailableCapability>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :total The value to assign to the {#total} property
    # @option attributes [Integer] :available The value to assign to the {#available} property
    # @option attributes [Integer] :used The value to assign to the {#used} property
    # @option attributes [Integer] :disabled The value to assign to the {#disabled} property
    # @option attributes [String] :min_version The value to assign to the {#min_version} property
    # @option attributes [Array<OCI::ApmSynthetics::Models::AvailableCapability>] :available_capabilities The value to assign to the {#available_capabilities} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.total = attributes[:'total'] if attributes[:'total']

      self.available = attributes[:'available'] if attributes[:'available']

      self.used = attributes[:'used'] if attributes[:'used']

      self.disabled = attributes[:'disabled'] if attributes[:'disabled']

      self.min_version = attributes[:'minVersion'] if attributes[:'minVersion']

      raise 'You cannot provide both :minVersion and :min_version' if attributes.key?(:'minVersion') && attributes.key?(:'min_version')

      self.min_version = attributes[:'min_version'] if attributes[:'min_version']

      self.available_capabilities = attributes[:'availableCapabilities'] if attributes[:'availableCapabilities']

      raise 'You cannot provide both :availableCapabilities and :available_capabilities' if attributes.key?(:'availableCapabilities') && attributes.key?(:'available_capabilities')

      self.available_capabilities = attributes[:'available_capabilities'] if attributes[:'available_capabilities']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        total == other.total &&
        available == other.available &&
        used == other.used &&
        disabled == other.disabled &&
        min_version == other.min_version &&
        available_capabilities == other.available_capabilities
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [total, available, used, disabled, min_version, available_capabilities].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
