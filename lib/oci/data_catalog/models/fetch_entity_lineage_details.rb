# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190325
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information needed to obtain desired lineage.
  class DataCatalog::Models::FetchEntityLineageDetails
    DIRECTION_ENUM = [
      DIRECTION_UPSTREAM = 'UPSTREAM'.freeze,
      DIRECTION_BOTH = 'BOTH'.freeze,
      DIRECTION_DOWNSTREAM = 'DOWNSTREAM'.freeze
    ].freeze

    # Object level at which the lineage is returned.
    #
    # @return [Integer]
    attr_accessor :level

    # Direction of the lineage returned.
    # @return [String]
    attr_reader :direction

    # Intra-lineages are drill down lineages. This field indicates whether all intra-lineages need to be
    # expanded inline in the lineage returned.
    #
    # @return [BOOLEAN]
    attr_accessor :is_intra_lineage

    # Unique object key for which intra-lineage needs to be fetched. Only drill-down lineage corresponding
    # to the object whose object key is passed is returned.
    #
    # @return [String]
    attr_accessor :intra_lineage_object_key

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'level': :'level',
        'direction': :'direction',
        'is_intra_lineage': :'isIntraLineage',
        'intra_lineage_object_key': :'intraLineageObjectKey'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'level': :'Integer',
        'direction': :'String',
        'is_intra_lineage': :'BOOLEAN',
        'intra_lineage_object_key': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :level The value to assign to the {#level} property
    # @option attributes [String] :direction The value to assign to the {#direction} property
    # @option attributes [BOOLEAN] :is_intra_lineage The value to assign to the {#is_intra_lineage} property
    # @option attributes [String] :intra_lineage_object_key The value to assign to the {#intra_lineage_object_key} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      self.level = attributes[:'level'] if attributes[:'level']

      self.direction = attributes[:'direction'] if attributes[:'direction']

      self.is_intra_lineage = attributes[:'isIntraLineage'] unless attributes[:'isIntraLineage'].nil?
      self.is_intra_lineage = false if is_intra_lineage.nil? && !attributes.key?(:'isIntraLineage') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isIntraLineage and :is_intra_lineage' if attributes.key?(:'isIntraLineage') && attributes.key?(:'is_intra_lineage')

      self.is_intra_lineage = attributes[:'is_intra_lineage'] unless attributes[:'is_intra_lineage'].nil?
      self.is_intra_lineage = false if is_intra_lineage.nil? && !attributes.key?(:'isIntraLineage') && !attributes.key?(:'is_intra_lineage') # rubocop:disable Style/StringLiterals

      self.intra_lineage_object_key = attributes[:'intraLineageObjectKey'] if attributes[:'intraLineageObjectKey']

      raise 'You cannot provide both :intraLineageObjectKey and :intra_lineage_object_key' if attributes.key?(:'intraLineageObjectKey') && attributes.key?(:'intra_lineage_object_key')

      self.intra_lineage_object_key = attributes[:'intra_lineage_object_key'] if attributes[:'intra_lineage_object_key']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] direction Object to be assigned
    def direction=(direction)
      raise "Invalid value for 'direction': this must be one of the values in DIRECTION_ENUM." if direction && !DIRECTION_ENUM.include?(direction)

      @direction = direction
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        level == other.level &&
        direction == other.direction &&
        is_intra_lineage == other.is_intra_lineage &&
        intra_lineage_object_key == other.intra_lineage_object_key
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [level, direction, is_intra_lineage, intra_lineage_object_key].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
