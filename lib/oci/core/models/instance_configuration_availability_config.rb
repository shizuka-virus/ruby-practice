# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Options for defining the availabiity of a VM instance after a maintenance event that impacts the underlying hardware.
  #
  class Core::Models::InstanceConfigurationAvailabilityConfig
    RECOVERY_ACTION_ENUM = [
      RECOVERY_ACTION_RESTORE_INSTANCE = 'RESTORE_INSTANCE'.freeze,
      RECOVERY_ACTION_STOP_INSTANCE = 'STOP_INSTANCE'.freeze,
      RECOVERY_ACTION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Whether to live migrate supported VM instances to a healthy physical VM host without
    # disrupting running instances during infrastructure maintenance events. If null, Oracle
    # chooses the best option for migrating the VM during infrastructure maintenance events.
    #
    # @return [BOOLEAN]
    attr_accessor :is_live_migration_preferred

    # The lifecycle state for an instance when it is recovered after infrastructure maintenance.
    # * `RESTORE_INSTANCE` - The instance is restored to the lifecycle state it was in before the maintenance event.
    # If the instance was running, it is automatically rebooted. This is the default action when a value is not set.
    # * `STOP_INSTANCE` - The instance is recovered in the stopped state.
    #
    # @return [String]
    attr_reader :recovery_action

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'is_live_migration_preferred': :'isLiveMigrationPreferred',
        'recovery_action': :'recoveryAction'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'is_live_migration_preferred': :'BOOLEAN',
        'recovery_action': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :is_live_migration_preferred The value to assign to the {#is_live_migration_preferred} property
    # @option attributes [String] :recovery_action The value to assign to the {#recovery_action} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.is_live_migration_preferred = attributes[:'isLiveMigrationPreferred'] unless attributes[:'isLiveMigrationPreferred'].nil?

      raise 'You cannot provide both :isLiveMigrationPreferred and :is_live_migration_preferred' if attributes.key?(:'isLiveMigrationPreferred') && attributes.key?(:'is_live_migration_preferred')

      self.is_live_migration_preferred = attributes[:'is_live_migration_preferred'] unless attributes[:'is_live_migration_preferred'].nil?

      self.recovery_action = attributes[:'recoveryAction'] if attributes[:'recoveryAction']
      self.recovery_action = "RESTORE_INSTANCE" if recovery_action.nil? && !attributes.key?(:'recoveryAction') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :recoveryAction and :recovery_action' if attributes.key?(:'recoveryAction') && attributes.key?(:'recovery_action')

      self.recovery_action = attributes[:'recovery_action'] if attributes[:'recovery_action']
      self.recovery_action = "RESTORE_INSTANCE" if recovery_action.nil? && !attributes.key?(:'recoveryAction') && !attributes.key?(:'recovery_action') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recovery_action Object to be assigned
    def recovery_action=(recovery_action)
      # rubocop:disable Style/ConditionalAssignment
      if recovery_action && !RECOVERY_ACTION_ENUM.include?(recovery_action)
        OCI.logger.debug("Unknown value for 'recovery_action' [" + recovery_action + "]. Mapping to 'RECOVERY_ACTION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @recovery_action = RECOVERY_ACTION_UNKNOWN_ENUM_VALUE
      else
        @recovery_action = recovery_action
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        is_live_migration_preferred == other.is_live_migration_preferred &&
        recovery_action == other.recovery_action
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [is_live_migration_preferred, recovery_action].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
