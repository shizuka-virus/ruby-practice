# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The location for where an instance pool will place instances.
  class Core::Models::UpdateInstancePoolPlacementConfigurationDetails
    # **[Required]** The availability domain to place instances.
    #
    # Example: `Uocm:PHX-AD-1`
    #
    # @return [String]
    attr_accessor :availability_domain

    # The fault domains to place instances.
    #
    # If you don't provide any values, the system makes a best effort to distribute
    # instances across all fault domains based on capacity.
    #
    # To distribute the instances evenly across selected fault domains, provide a
    # set of fault domains. For example, you might want instances to be evenly
    # distributed if your applications require high availability.
    #
    # To get a list of fault domains, use the
    # {#list_fault_domains list_fault_domains} operation
    # in the Identity and Access Management Service API.
    #
    # Example: `[FAULT-DOMAIN-1, FAULT-DOMAIN-2, FAULT-DOMAIN-3]`
    #
    # @return [Array<String>]
    attr_accessor :fault_domains

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the primary subnet in which to place instances. This field is deprecated.
    # Use `primaryVnicSubnets` instead to set VNIC data for instances in the pool.
    #
    # @return [String]
    attr_accessor :primary_subnet_id

    # @return [OCI::Core::Models::InstancePoolPlacementPrimarySubnet]
    attr_accessor :primary_vnic_subnets

    # The set of secondary VNIC data for instances in the pool.
    # @return [Array<OCI::Core::Models::InstancePoolPlacementSecondaryVnicSubnet>]
    attr_accessor :secondary_vnic_subnets

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'availability_domain': :'availabilityDomain',
        'fault_domains': :'faultDomains',
        'primary_subnet_id': :'primarySubnetId',
        'primary_vnic_subnets': :'primaryVnicSubnets',
        'secondary_vnic_subnets': :'secondaryVnicSubnets'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'availability_domain': :'String',
        'fault_domains': :'Array<String>',
        'primary_subnet_id': :'String',
        'primary_vnic_subnets': :'OCI::Core::Models::InstancePoolPlacementPrimarySubnet',
        'secondary_vnic_subnets': :'Array<OCI::Core::Models::InstancePoolPlacementSecondaryVnicSubnet>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :availability_domain The value to assign to the {#availability_domain} property
    # @option attributes [Array<String>] :fault_domains The value to assign to the {#fault_domains} property
    # @option attributes [String] :primary_subnet_id The value to assign to the {#primary_subnet_id} property
    # @option attributes [OCI::Core::Models::InstancePoolPlacementPrimarySubnet] :primary_vnic_subnets The value to assign to the {#primary_vnic_subnets} property
    # @option attributes [Array<OCI::Core::Models::InstancePoolPlacementSecondaryVnicSubnet>] :secondary_vnic_subnets The value to assign to the {#secondary_vnic_subnets} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.availability_domain = attributes[:'availabilityDomain'] if attributes[:'availabilityDomain']

      raise 'You cannot provide both :availabilityDomain and :availability_domain' if attributes.key?(:'availabilityDomain') && attributes.key?(:'availability_domain')

      self.availability_domain = attributes[:'availability_domain'] if attributes[:'availability_domain']

      self.fault_domains = attributes[:'faultDomains'] if attributes[:'faultDomains']

      raise 'You cannot provide both :faultDomains and :fault_domains' if attributes.key?(:'faultDomains') && attributes.key?(:'fault_domains')

      self.fault_domains = attributes[:'fault_domains'] if attributes[:'fault_domains']

      self.primary_subnet_id = attributes[:'primarySubnetId'] if attributes[:'primarySubnetId']

      raise 'You cannot provide both :primarySubnetId and :primary_subnet_id' if attributes.key?(:'primarySubnetId') && attributes.key?(:'primary_subnet_id')

      self.primary_subnet_id = attributes[:'primary_subnet_id'] if attributes[:'primary_subnet_id']

      self.primary_vnic_subnets = attributes[:'primaryVnicSubnets'] if attributes[:'primaryVnicSubnets']

      raise 'You cannot provide both :primaryVnicSubnets and :primary_vnic_subnets' if attributes.key?(:'primaryVnicSubnets') && attributes.key?(:'primary_vnic_subnets')

      self.primary_vnic_subnets = attributes[:'primary_vnic_subnets'] if attributes[:'primary_vnic_subnets']

      self.secondary_vnic_subnets = attributes[:'secondaryVnicSubnets'] if attributes[:'secondaryVnicSubnets']

      raise 'You cannot provide both :secondaryVnicSubnets and :secondary_vnic_subnets' if attributes.key?(:'secondaryVnicSubnets') && attributes.key?(:'secondary_vnic_subnets')

      self.secondary_vnic_subnets = attributes[:'secondary_vnic_subnets'] if attributes[:'secondary_vnic_subnets']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        availability_domain == other.availability_domain &&
        fault_domains == other.fault_domains &&
        primary_subnet_id == other.primary_subnet_id &&
        primary_vnic_subnets == other.primary_vnic_subnets &&
        secondary_vnic_subnets == other.secondary_vnic_subnets
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [availability_domain, fault_domains, primary_subnet_id, primary_vnic_subnets, secondary_vnic_subnets].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
