# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A compute bare metal host.
  #
  class Core::Models::ComputeBareMetalHost
    LIFECYCLE_DETAILS_ENUM = [
      LIFECYCLE_DETAILS_AVAILABLE = 'AVAILABLE'.freeze,
      LIFECYCLE_DETAILS_DEGRADED = 'DEGRADED'.freeze,
      LIFECYCLE_DETAILS_UNAVAILABLE = 'UNAVAILABLE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_INACTIVE = 'INACTIVE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute capacity topology.
    # @return [String]
    attr_accessor :compute_capacity_topology_id

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute HPC island.
    # @return [String]
    attr_accessor :compute_hpc_island_id

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute local block.
    # @return [String]
    attr_accessor :compute_local_block_id

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute network block.
    # @return [String]
    attr_accessor :compute_network_block_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute bare metal host.
    # @return [String]
    attr_accessor :id

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compute instance that runs on the compute bare metal host.
    # @return [String]
    attr_accessor :instance_id

    # **[Required]** The shape of the compute instance that runs on the compute bare metal host.
    # @return [String]
    attr_accessor :instance_shape

    # The lifecycle state details of the compute bare metal host.
    # @return [String]
    attr_reader :lifecycle_details

    # **[Required]** The current state of the compute bare metal host.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The date and time that the compute bare metal host was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The date and time that the compute bare metal host was updated, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
    #
    # Example: `2016-08-25T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compute_capacity_topology_id': :'computeCapacityTopologyId',
        'compute_hpc_island_id': :'computeHpcIslandId',
        'compute_local_block_id': :'computeLocalBlockId',
        'compute_network_block_id': :'computeNetworkBlockId',
        'id': :'id',
        'instance_id': :'instanceId',
        'instance_shape': :'instanceShape',
        'lifecycle_details': :'lifecycleDetails',
        'lifecycle_state': :'lifecycleState',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compute_capacity_topology_id': :'String',
        'compute_hpc_island_id': :'String',
        'compute_local_block_id': :'String',
        'compute_network_block_id': :'String',
        'id': :'String',
        'instance_id': :'String',
        'instance_shape': :'String',
        'lifecycle_details': :'String',
        'lifecycle_state': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compute_capacity_topology_id The value to assign to the {#compute_capacity_topology_id} property
    # @option attributes [String] :compute_hpc_island_id The value to assign to the {#compute_hpc_island_id} property
    # @option attributes [String] :compute_local_block_id The value to assign to the {#compute_local_block_id} property
    # @option attributes [String] :compute_network_block_id The value to assign to the {#compute_network_block_id} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :instance_id The value to assign to the {#instance_id} property
    # @option attributes [String] :instance_shape The value to assign to the {#instance_shape} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compute_capacity_topology_id = attributes[:'computeCapacityTopologyId'] if attributes[:'computeCapacityTopologyId']

      raise 'You cannot provide both :computeCapacityTopologyId and :compute_capacity_topology_id' if attributes.key?(:'computeCapacityTopologyId') && attributes.key?(:'compute_capacity_topology_id')

      self.compute_capacity_topology_id = attributes[:'compute_capacity_topology_id'] if attributes[:'compute_capacity_topology_id']

      self.compute_hpc_island_id = attributes[:'computeHpcIslandId'] if attributes[:'computeHpcIslandId']

      raise 'You cannot provide both :computeHpcIslandId and :compute_hpc_island_id' if attributes.key?(:'computeHpcIslandId') && attributes.key?(:'compute_hpc_island_id')

      self.compute_hpc_island_id = attributes[:'compute_hpc_island_id'] if attributes[:'compute_hpc_island_id']

      self.compute_local_block_id = attributes[:'computeLocalBlockId'] if attributes[:'computeLocalBlockId']

      raise 'You cannot provide both :computeLocalBlockId and :compute_local_block_id' if attributes.key?(:'computeLocalBlockId') && attributes.key?(:'compute_local_block_id')

      self.compute_local_block_id = attributes[:'compute_local_block_id'] if attributes[:'compute_local_block_id']

      self.compute_network_block_id = attributes[:'computeNetworkBlockId'] if attributes[:'computeNetworkBlockId']

      raise 'You cannot provide both :computeNetworkBlockId and :compute_network_block_id' if attributes.key?(:'computeNetworkBlockId') && attributes.key?(:'compute_network_block_id')

      self.compute_network_block_id = attributes[:'compute_network_block_id'] if attributes[:'compute_network_block_id']

      self.id = attributes[:'id'] if attributes[:'id']

      self.instance_id = attributes[:'instanceId'] if attributes[:'instanceId']

      raise 'You cannot provide both :instanceId and :instance_id' if attributes.key?(:'instanceId') && attributes.key?(:'instance_id')

      self.instance_id = attributes[:'instance_id'] if attributes[:'instance_id']

      self.instance_shape = attributes[:'instanceShape'] if attributes[:'instanceShape']

      raise 'You cannot provide both :instanceShape and :instance_shape' if attributes.key?(:'instanceShape') && attributes.key?(:'instance_shape')

      self.instance_shape = attributes[:'instance_shape'] if attributes[:'instance_shape']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_details Object to be assigned
    def lifecycle_details=(lifecycle_details)
      raise "Invalid value for 'lifecycle_details': this must be one of the values in LIFECYCLE_DETAILS_ENUM." if lifecycle_details && !LIFECYCLE_DETAILS_ENUM.include?(lifecycle_details)

      @lifecycle_details = lifecycle_details
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      raise "Invalid value for 'lifecycle_state': this must be one of the values in LIFECYCLE_STATE_ENUM." if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)

      @lifecycle_state = lifecycle_state
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compute_capacity_topology_id == other.compute_capacity_topology_id &&
        compute_hpc_island_id == other.compute_hpc_island_id &&
        compute_local_block_id == other.compute_local_block_id &&
        compute_network_block_id == other.compute_network_block_id &&
        id == other.id &&
        instance_id == other.instance_id &&
        instance_shape == other.instance_shape &&
        lifecycle_details == other.lifecycle_details &&
        lifecycle_state == other.lifecycle_state &&
        time_created == other.time_created &&
        time_updated == other.time_updated
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compute_capacity_topology_id, compute_hpc_island_id, compute_local_block_id, compute_network_block_id, id, instance_id, instance_shape, lifecycle_details, lifecycle_state, time_created, time_updated].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
