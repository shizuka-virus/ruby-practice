# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Provides the IP Inventory details of a subnet and its associated resources.
  #
  class Core::Models::IpInventorySubnetResourceSummary
    IP_ADDRESS_LIFETIME_ENUM = [
      IP_ADDRESS_LIFETIME_EPHEMERAL = 'Ephemeral'.freeze,
      IP_ADDRESS_LIFETIME_RESERVED = 'Reserved'.freeze,
      IP_ADDRESS_LIFETIME_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PUBLIC_IP_LIFETIME_ENUM = [
      PUBLIC_IP_LIFETIME_EPHEMERAL = 'Ephemeral'.freeze,
      PUBLIC_IP_LIFETIME_RESERVED = 'Reserved'.freeze,
      PUBLIC_IP_LIFETIME_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ASSOCIATED_PUBLIC_IP_POOL_ENUM = [
      ASSOCIATED_PUBLIC_IP_POOL_ORACLE = 'ORACLE'.freeze,
      ASSOCIATED_PUBLIC_IP_POOL_BYOIP = 'BYOIP'.freeze,
      ASSOCIATED_PUBLIC_IP_POOL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    ASSIGNED_RESOURCE_TYPE_ENUM = [
      ASSIGNED_RESOURCE_TYPE_RESOURCE = 'Resource'.freeze,
      ASSIGNED_RESOURCE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the IP address.
    # @return [String]
    attr_accessor :ip_id

    # Lists the allocated private IP address.
    # @return [String]
    attr_accessor :ip_address

    # Lifetime of the allocated private IP address.
    # @return [String]
    attr_reader :ip_address_lifetime

    # The address range the IP address is assigned from.
    # @return [String]
    attr_accessor :parent_cidr

    # Associated public IP address for the private IP address.
    # @return [String]
    attr_accessor :associated_public_ip

    # Lifetime of the assigned public IP address.
    # @return [String]
    attr_reader :public_ip_lifetime

    # Public IP address Pool the IP address is allocated from.
    # @return [String]
    attr_reader :associated_public_ip_pool

    # DNS hostname of the IP address.
    # @return [String]
    attr_accessor :dns_host_name

    # Name of the created resource.
    # @return [String]
    attr_accessor :assigned_resource_name

    # Type of the resource.
    # @return [String]
    attr_reader :assigned_resource_type

    # Address type of the allocated private IP address.
    # @return [String]
    attr_accessor :address_type

    # Assigned time of the private IP address.
    # @return [DateTime]
    attr_accessor :assigned_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'ip_id': :'ipId',
        'ip_address': :'ipAddress',
        'ip_address_lifetime': :'ipAddressLifetime',
        'parent_cidr': :'parentCidr',
        'associated_public_ip': :'associatedPublicIp',
        'public_ip_lifetime': :'publicIpLifetime',
        'associated_public_ip_pool': :'associatedPublicIpPool',
        'dns_host_name': :'dnsHostName',
        'assigned_resource_name': :'assignedResourceName',
        'assigned_resource_type': :'assignedResourceType',
        'address_type': :'addressType',
        'assigned_time': :'assignedTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'ip_id': :'String',
        'ip_address': :'String',
        'ip_address_lifetime': :'String',
        'parent_cidr': :'String',
        'associated_public_ip': :'String',
        'public_ip_lifetime': :'String',
        'associated_public_ip_pool': :'String',
        'dns_host_name': :'String',
        'assigned_resource_name': :'String',
        'assigned_resource_type': :'String',
        'address_type': :'String',
        'assigned_time': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :ip_id The value to assign to the {#ip_id} property
    # @option attributes [String] :ip_address The value to assign to the {#ip_address} property
    # @option attributes [String] :ip_address_lifetime The value to assign to the {#ip_address_lifetime} property
    # @option attributes [String] :parent_cidr The value to assign to the {#parent_cidr} property
    # @option attributes [String] :associated_public_ip The value to assign to the {#associated_public_ip} property
    # @option attributes [String] :public_ip_lifetime The value to assign to the {#public_ip_lifetime} property
    # @option attributes [String] :associated_public_ip_pool The value to assign to the {#associated_public_ip_pool} property
    # @option attributes [String] :dns_host_name The value to assign to the {#dns_host_name} property
    # @option attributes [String] :assigned_resource_name The value to assign to the {#assigned_resource_name} property
    # @option attributes [String] :assigned_resource_type The value to assign to the {#assigned_resource_type} property
    # @option attributes [String] :address_type The value to assign to the {#address_type} property
    # @option attributes [DateTime] :assigned_time The value to assign to the {#assigned_time} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.ip_id = attributes[:'ipId'] if attributes[:'ipId']

      raise 'You cannot provide both :ipId and :ip_id' if attributes.key?(:'ipId') && attributes.key?(:'ip_id')

      self.ip_id = attributes[:'ip_id'] if attributes[:'ip_id']

      self.ip_address = attributes[:'ipAddress'] if attributes[:'ipAddress']

      raise 'You cannot provide both :ipAddress and :ip_address' if attributes.key?(:'ipAddress') && attributes.key?(:'ip_address')

      self.ip_address = attributes[:'ip_address'] if attributes[:'ip_address']

      self.ip_address_lifetime = attributes[:'ipAddressLifetime'] if attributes[:'ipAddressLifetime']

      raise 'You cannot provide both :ipAddressLifetime and :ip_address_lifetime' if attributes.key?(:'ipAddressLifetime') && attributes.key?(:'ip_address_lifetime')

      self.ip_address_lifetime = attributes[:'ip_address_lifetime'] if attributes[:'ip_address_lifetime']

      self.parent_cidr = attributes[:'parentCidr'] if attributes[:'parentCidr']

      raise 'You cannot provide both :parentCidr and :parent_cidr' if attributes.key?(:'parentCidr') && attributes.key?(:'parent_cidr')

      self.parent_cidr = attributes[:'parent_cidr'] if attributes[:'parent_cidr']

      self.associated_public_ip = attributes[:'associatedPublicIp'] if attributes[:'associatedPublicIp']

      raise 'You cannot provide both :associatedPublicIp and :associated_public_ip' if attributes.key?(:'associatedPublicIp') && attributes.key?(:'associated_public_ip')

      self.associated_public_ip = attributes[:'associated_public_ip'] if attributes[:'associated_public_ip']

      self.public_ip_lifetime = attributes[:'publicIpLifetime'] if attributes[:'publicIpLifetime']

      raise 'You cannot provide both :publicIpLifetime and :public_ip_lifetime' if attributes.key?(:'publicIpLifetime') && attributes.key?(:'public_ip_lifetime')

      self.public_ip_lifetime = attributes[:'public_ip_lifetime'] if attributes[:'public_ip_lifetime']

      self.associated_public_ip_pool = attributes[:'associatedPublicIpPool'] if attributes[:'associatedPublicIpPool']

      raise 'You cannot provide both :associatedPublicIpPool and :associated_public_ip_pool' if attributes.key?(:'associatedPublicIpPool') && attributes.key?(:'associated_public_ip_pool')

      self.associated_public_ip_pool = attributes[:'associated_public_ip_pool'] if attributes[:'associated_public_ip_pool']

      self.dns_host_name = attributes[:'dnsHostName'] if attributes[:'dnsHostName']

      raise 'You cannot provide both :dnsHostName and :dns_host_name' if attributes.key?(:'dnsHostName') && attributes.key?(:'dns_host_name')

      self.dns_host_name = attributes[:'dns_host_name'] if attributes[:'dns_host_name']

      self.assigned_resource_name = attributes[:'assignedResourceName'] if attributes[:'assignedResourceName']

      raise 'You cannot provide both :assignedResourceName and :assigned_resource_name' if attributes.key?(:'assignedResourceName') && attributes.key?(:'assigned_resource_name')

      self.assigned_resource_name = attributes[:'assigned_resource_name'] if attributes[:'assigned_resource_name']

      self.assigned_resource_type = attributes[:'assignedResourceType'] if attributes[:'assignedResourceType']

      raise 'You cannot provide both :assignedResourceType and :assigned_resource_type' if attributes.key?(:'assignedResourceType') && attributes.key?(:'assigned_resource_type')

      self.assigned_resource_type = attributes[:'assigned_resource_type'] if attributes[:'assigned_resource_type']

      self.address_type = attributes[:'addressType'] if attributes[:'addressType']

      raise 'You cannot provide both :addressType and :address_type' if attributes.key?(:'addressType') && attributes.key?(:'address_type')

      self.address_type = attributes[:'address_type'] if attributes[:'address_type']

      self.assigned_time = attributes[:'assignedTime'] if attributes[:'assignedTime']

      raise 'You cannot provide both :assignedTime and :assigned_time' if attributes.key?(:'assignedTime') && attributes.key?(:'assigned_time')

      self.assigned_time = attributes[:'assigned_time'] if attributes[:'assigned_time']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ip_address_lifetime Object to be assigned
    def ip_address_lifetime=(ip_address_lifetime)
      # rubocop:disable Style/ConditionalAssignment
      if ip_address_lifetime && !IP_ADDRESS_LIFETIME_ENUM.include?(ip_address_lifetime)
        OCI.logger.debug("Unknown value for 'ip_address_lifetime' [" + ip_address_lifetime + "]. Mapping to 'IP_ADDRESS_LIFETIME_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @ip_address_lifetime = IP_ADDRESS_LIFETIME_UNKNOWN_ENUM_VALUE
      else
        @ip_address_lifetime = ip_address_lifetime
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] public_ip_lifetime Object to be assigned
    def public_ip_lifetime=(public_ip_lifetime)
      # rubocop:disable Style/ConditionalAssignment
      if public_ip_lifetime && !PUBLIC_IP_LIFETIME_ENUM.include?(public_ip_lifetime)
        OCI.logger.debug("Unknown value for 'public_ip_lifetime' [" + public_ip_lifetime + "]. Mapping to 'PUBLIC_IP_LIFETIME_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @public_ip_lifetime = PUBLIC_IP_LIFETIME_UNKNOWN_ENUM_VALUE
      else
        @public_ip_lifetime = public_ip_lifetime
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] associated_public_ip_pool Object to be assigned
    def associated_public_ip_pool=(associated_public_ip_pool)
      # rubocop:disable Style/ConditionalAssignment
      if associated_public_ip_pool && !ASSOCIATED_PUBLIC_IP_POOL_ENUM.include?(associated_public_ip_pool)
        OCI.logger.debug("Unknown value for 'associated_public_ip_pool' [" + associated_public_ip_pool + "]. Mapping to 'ASSOCIATED_PUBLIC_IP_POOL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @associated_public_ip_pool = ASSOCIATED_PUBLIC_IP_POOL_UNKNOWN_ENUM_VALUE
      else
        @associated_public_ip_pool = associated_public_ip_pool
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] assigned_resource_type Object to be assigned
    def assigned_resource_type=(assigned_resource_type)
      # rubocop:disable Style/ConditionalAssignment
      if assigned_resource_type && !ASSIGNED_RESOURCE_TYPE_ENUM.include?(assigned_resource_type)
        OCI.logger.debug("Unknown value for 'assigned_resource_type' [" + assigned_resource_type + "]. Mapping to 'ASSIGNED_RESOURCE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @assigned_resource_type = ASSIGNED_RESOURCE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @assigned_resource_type = assigned_resource_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        ip_id == other.ip_id &&
        ip_address == other.ip_address &&
        ip_address_lifetime == other.ip_address_lifetime &&
        parent_cidr == other.parent_cidr &&
        associated_public_ip == other.associated_public_ip &&
        public_ip_lifetime == other.public_ip_lifetime &&
        associated_public_ip_pool == other.associated_public_ip_pool &&
        dns_host_name == other.dns_host_name &&
        assigned_resource_name == other.assigned_resource_name &&
        assigned_resource_type == other.assigned_resource_type &&
        address_type == other.address_type &&
        assigned_time == other.assigned_time
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ip_id, ip_address, ip_address_lifetime, parent_cidr, associated_public_ip, public_ip_lifetime, associated_public_ip_pool, dns_host_name, assigned_resource_name, assigned_resource_type, address_type, assigned_time].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
