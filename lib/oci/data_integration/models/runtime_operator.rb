# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200430
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Runtime operator model which holds the runtime metadata of the task operator executed.
  class DataIntegration::Models::RuntimeOperator
    STATUS_ENUM = [
      STATUS_NOT_STARTED = 'NOT_STARTED'.freeze,
      STATUS_QUEUED = 'QUEUED'.freeze,
      STATUS_RUNNING = 'RUNNING'.freeze,
      STATUS_TERMINATING = 'TERMINATING'.freeze,
      STATUS_TERMINATED = 'TERMINATED'.freeze,
      STATUS_SUCCESS = 'SUCCESS'.freeze,
      STATUS_ERROR = 'ERROR'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    EXECUTION_STATE_ENUM = [
      EXECUTION_STATE_NOT_STARTED = 'NOT_STARTED'.freeze,
      EXECUTION_STATE_RUNNING = 'RUNNING'.freeze,
      EXECUTION_STATE_TERMINATED = 'TERMINATED'.freeze,
      EXECUTION_STATE_SUCCESS = 'SUCCESS'.freeze,
      EXECUTION_STATE_ERROR = 'ERROR'.freeze,
      EXECUTION_STATE_SKIPPED = 'SKIPPED'.freeze,
      EXECUTION_STATE_UNKNOWN = 'UNKNOWN'.freeze,
      EXECUTION_STATE_IGNORED = 'IGNORED'.freeze,
      EXECUTION_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    TASK_TYPE_ENUM = [
      TASK_TYPE_INTEGRATION_TASK = 'INTEGRATION_TASK'.freeze,
      TASK_TYPE_DATA_LOADER_TASK = 'DATA_LOADER_TASK'.freeze,
      TASK_TYPE_PIPELINE_TASK = 'PIPELINE_TASK'.freeze,
      TASK_TYPE_SQL_TASK = 'SQL_TASK'.freeze,
      TASK_TYPE_OCI_DATAFLOW_TASK = 'OCI_DATAFLOW_TASK'.freeze,
      TASK_TYPE_REST_TASK = 'REST_TASK'.freeze,
      TASK_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    OPERATOR_TYPE_ENUM = [
      OPERATOR_TYPE_BASH_OPERATOR = 'BASH_OPERATOR'.freeze,
      OPERATOR_TYPE_TASK_OPERATOR = 'TASK_OPERATOR'.freeze,
      OPERATOR_TYPE_REST_OPERATOR = 'REST_OPERATOR'.freeze,
      OPERATOR_TYPE_START_OPERATOR = 'START_OPERATOR'.freeze,
      OPERATOR_TYPE_END_OPERATOR = 'END_OPERATOR'.freeze,
      OPERATOR_TYPE_EXPRESSION_OPERATOR = 'EXPRESSION_OPERATOR'.freeze,
      OPERATOR_TYPE_MERGE_OPERATOR = 'MERGE_OPERATOR'.freeze,
      OPERATOR_TYPE_DECISION_OPERATOR = 'DECISION_OPERATOR'.freeze,
      OPERATOR_TYPE_LOOP_OPERATOR = 'LOOP_OPERATOR'.freeze,
      OPERATOR_TYPE_ACTUAL_END_OPERATOR = 'ACTUAL_END_OPERATOR'.freeze,
      OPERATOR_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The RuntimeOperator key.
    # @return [String]
    attr_accessor :key

    # The TaskRun key.
    # @return [String]
    attr_accessor :task_run_key

    # The runtime operator start time.
    # @return [Integer]
    attr_accessor :start_time_in_millis

    # The runtime operator end time.
    # @return [Integer]
    attr_accessor :end_time_in_millis

    # Status of RuntimeOperator. This field is deprecated, use RuntimeOperator's executionState field instead.
    # @return [String]
    attr_reader :status

    # The type of the object.
    # @return [String]
    attr_accessor :model_type

    # The model version of an object.
    # @return [String]
    attr_accessor :model_version

    # @return [OCI::DataIntegration::Models::ParentReference]
    attr_accessor :parent_ref

    # Free form text without any restriction on permitted characters. Name can have letters, numbers, and special characters. The value is editable and is restricted to 1000 characters.
    # @return [String]
    attr_accessor :name

    # The version of the object that is used to track changes in the object instance.
    # @return [Integer]
    attr_accessor :object_version

    # Value can only contain upper case letters, underscore and numbers. It should begin with upper case letter or underscore. The value can be modified.
    # @return [String]
    attr_accessor :identifier

    # status
    # @return [String]
    attr_reader :execution_state

    # A list of parameters for the pipeline, this allows certain aspects of the pipeline to be configured when the pipeline is executed.
    # @return [Array<OCI::DataIntegration::Models::Parameter>]
    attr_accessor :parameters

    # The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
    # @return [Integer]
    attr_accessor :object_status

    # @return [OCI::DataIntegration::Models::ObjectMetadata]
    attr_accessor :metadata

    # @return [OCI::DataIntegration::Models::Operator]
    attr_accessor :operator

    # The configuration provider bindings.
    # @return [Hash<String, OCI::DataIntegration::Models::ParameterValue>]
    attr_accessor :inputs

    # The configuration provider bindings.
    # @return [Hash<String, OCI::DataIntegration::Models::ParameterValue>]
    attr_accessor :outputs

    # The type of task run.
    # @return [String]
    attr_reader :task_type

    # @return [OCI::DataIntegration::Models::ConfigProvider]
    attr_accessor :config_provider

    # The type of Runtime Operator
    # @return [String]
    attr_reader :operator_type

    # A map metrics for the task run.
    # @return [Hash<String, Float>]
    attr_accessor :metrics

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'key': :'key',
        'task_run_key': :'taskRunKey',
        'start_time_in_millis': :'startTimeInMillis',
        'end_time_in_millis': :'endTimeInMillis',
        'status': :'status',
        'model_type': :'modelType',
        'model_version': :'modelVersion',
        'parent_ref': :'parentRef',
        'name': :'name',
        'object_version': :'objectVersion',
        'identifier': :'identifier',
        'execution_state': :'executionState',
        'parameters': :'parameters',
        'object_status': :'objectStatus',
        'metadata': :'metadata',
        'operator': :'operator',
        'inputs': :'inputs',
        'outputs': :'outputs',
        'task_type': :'taskType',
        'config_provider': :'configProvider',
        'operator_type': :'operatorType',
        'metrics': :'metrics'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'key': :'String',
        'task_run_key': :'String',
        'start_time_in_millis': :'Integer',
        'end_time_in_millis': :'Integer',
        'status': :'String',
        'model_type': :'String',
        'model_version': :'String',
        'parent_ref': :'OCI::DataIntegration::Models::ParentReference',
        'name': :'String',
        'object_version': :'Integer',
        'identifier': :'String',
        'execution_state': :'String',
        'parameters': :'Array<OCI::DataIntegration::Models::Parameter>',
        'object_status': :'Integer',
        'metadata': :'OCI::DataIntegration::Models::ObjectMetadata',
        'operator': :'OCI::DataIntegration::Models::Operator',
        'inputs': :'Hash<String, OCI::DataIntegration::Models::ParameterValue>',
        'outputs': :'Hash<String, OCI::DataIntegration::Models::ParameterValue>',
        'task_type': :'String',
        'config_provider': :'OCI::DataIntegration::Models::ConfigProvider',
        'operator_type': :'String',
        'metrics': :'Hash<String, Float>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :key The value to assign to the {#key} property
    # @option attributes [String] :task_run_key The value to assign to the {#task_run_key} property
    # @option attributes [Integer] :start_time_in_millis The value to assign to the {#start_time_in_millis} property
    # @option attributes [Integer] :end_time_in_millis The value to assign to the {#end_time_in_millis} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :model_type The value to assign to the {#model_type} property
    # @option attributes [String] :model_version The value to assign to the {#model_version} property
    # @option attributes [OCI::DataIntegration::Models::ParentReference] :parent_ref The value to assign to the {#parent_ref} property
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [Integer] :object_version The value to assign to the {#object_version} property
    # @option attributes [String] :identifier The value to assign to the {#identifier} property
    # @option attributes [String] :execution_state The value to assign to the {#execution_state} property
    # @option attributes [Array<OCI::DataIntegration::Models::Parameter>] :parameters The value to assign to the {#parameters} property
    # @option attributes [Integer] :object_status The value to assign to the {#object_status} property
    # @option attributes [OCI::DataIntegration::Models::ObjectMetadata] :metadata The value to assign to the {#metadata} property
    # @option attributes [OCI::DataIntegration::Models::Operator] :operator The value to assign to the {#operator} property
    # @option attributes [Hash<String, OCI::DataIntegration::Models::ParameterValue>] :inputs The value to assign to the {#inputs} property
    # @option attributes [Hash<String, OCI::DataIntegration::Models::ParameterValue>] :outputs The value to assign to the {#outputs} property
    # @option attributes [String] :task_type The value to assign to the {#task_type} property
    # @option attributes [OCI::DataIntegration::Models::ConfigProvider] :config_provider The value to assign to the {#config_provider} property
    # @option attributes [String] :operator_type The value to assign to the {#operator_type} property
    # @option attributes [Hash<String, Float>] :metrics The value to assign to the {#metrics} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.key = attributes[:'key'] if attributes[:'key']

      self.task_run_key = attributes[:'taskRunKey'] if attributes[:'taskRunKey']

      raise 'You cannot provide both :taskRunKey and :task_run_key' if attributes.key?(:'taskRunKey') && attributes.key?(:'task_run_key')

      self.task_run_key = attributes[:'task_run_key'] if attributes[:'task_run_key']

      self.start_time_in_millis = attributes[:'startTimeInMillis'] if attributes[:'startTimeInMillis']

      raise 'You cannot provide both :startTimeInMillis and :start_time_in_millis' if attributes.key?(:'startTimeInMillis') && attributes.key?(:'start_time_in_millis')

      self.start_time_in_millis = attributes[:'start_time_in_millis'] if attributes[:'start_time_in_millis']

      self.end_time_in_millis = attributes[:'endTimeInMillis'] if attributes[:'endTimeInMillis']

      raise 'You cannot provide both :endTimeInMillis and :end_time_in_millis' if attributes.key?(:'endTimeInMillis') && attributes.key?(:'end_time_in_millis')

      self.end_time_in_millis = attributes[:'end_time_in_millis'] if attributes[:'end_time_in_millis']

      self.status = attributes[:'status'] if attributes[:'status']

      self.model_type = attributes[:'modelType'] if attributes[:'modelType']

      raise 'You cannot provide both :modelType and :model_type' if attributes.key?(:'modelType') && attributes.key?(:'model_type')

      self.model_type = attributes[:'model_type'] if attributes[:'model_type']

      self.model_version = attributes[:'modelVersion'] if attributes[:'modelVersion']

      raise 'You cannot provide both :modelVersion and :model_version' if attributes.key?(:'modelVersion') && attributes.key?(:'model_version')

      self.model_version = attributes[:'model_version'] if attributes[:'model_version']

      self.parent_ref = attributes[:'parentRef'] if attributes[:'parentRef']

      raise 'You cannot provide both :parentRef and :parent_ref' if attributes.key?(:'parentRef') && attributes.key?(:'parent_ref')

      self.parent_ref = attributes[:'parent_ref'] if attributes[:'parent_ref']

      self.name = attributes[:'name'] if attributes[:'name']

      self.object_version = attributes[:'objectVersion'] if attributes[:'objectVersion']

      raise 'You cannot provide both :objectVersion and :object_version' if attributes.key?(:'objectVersion') && attributes.key?(:'object_version')

      self.object_version = attributes[:'object_version'] if attributes[:'object_version']

      self.identifier = attributes[:'identifier'] if attributes[:'identifier']

      self.execution_state = attributes[:'executionState'] if attributes[:'executionState']

      raise 'You cannot provide both :executionState and :execution_state' if attributes.key?(:'executionState') && attributes.key?(:'execution_state')

      self.execution_state = attributes[:'execution_state'] if attributes[:'execution_state']

      self.parameters = attributes[:'parameters'] if attributes[:'parameters']

      self.object_status = attributes[:'objectStatus'] if attributes[:'objectStatus']

      raise 'You cannot provide both :objectStatus and :object_status' if attributes.key?(:'objectStatus') && attributes.key?(:'object_status')

      self.object_status = attributes[:'object_status'] if attributes[:'object_status']

      self.metadata = attributes[:'metadata'] if attributes[:'metadata']

      self.operator = attributes[:'operator'] if attributes[:'operator']

      self.inputs = attributes[:'inputs'] if attributes[:'inputs']

      self.outputs = attributes[:'outputs'] if attributes[:'outputs']

      self.task_type = attributes[:'taskType'] if attributes[:'taskType']

      raise 'You cannot provide both :taskType and :task_type' if attributes.key?(:'taskType') && attributes.key?(:'task_type')

      self.task_type = attributes[:'task_type'] if attributes[:'task_type']

      self.config_provider = attributes[:'configProvider'] if attributes[:'configProvider']

      raise 'You cannot provide both :configProvider and :config_provider' if attributes.key?(:'configProvider') && attributes.key?(:'config_provider')

      self.config_provider = attributes[:'config_provider'] if attributes[:'config_provider']

      self.operator_type = attributes[:'operatorType'] if attributes[:'operatorType']

      raise 'You cannot provide both :operatorType and :operator_type' if attributes.key?(:'operatorType') && attributes.key?(:'operator_type')

      self.operator_type = attributes[:'operator_type'] if attributes[:'operator_type']

      self.metrics = attributes[:'metrics'] if attributes[:'metrics']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] execution_state Object to be assigned
    def execution_state=(execution_state)
      # rubocop:disable Style/ConditionalAssignment
      if execution_state && !EXECUTION_STATE_ENUM.include?(execution_state)
        OCI.logger.debug("Unknown value for 'execution_state' [" + execution_state + "]. Mapping to 'EXECUTION_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @execution_state = EXECUTION_STATE_UNKNOWN_ENUM_VALUE
      else
        @execution_state = execution_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] task_type Object to be assigned
    def task_type=(task_type)
      # rubocop:disable Style/ConditionalAssignment
      if task_type && !TASK_TYPE_ENUM.include?(task_type)
        OCI.logger.debug("Unknown value for 'task_type' [" + task_type + "]. Mapping to 'TASK_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @task_type = TASK_TYPE_UNKNOWN_ENUM_VALUE
      else
        @task_type = task_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operator_type Object to be assigned
    def operator_type=(operator_type)
      # rubocop:disable Style/ConditionalAssignment
      if operator_type && !OPERATOR_TYPE_ENUM.include?(operator_type)
        OCI.logger.debug("Unknown value for 'operator_type' [" + operator_type + "]. Mapping to 'OPERATOR_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @operator_type = OPERATOR_TYPE_UNKNOWN_ENUM_VALUE
      else
        @operator_type = operator_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        key == other.key &&
        task_run_key == other.task_run_key &&
        start_time_in_millis == other.start_time_in_millis &&
        end_time_in_millis == other.end_time_in_millis &&
        status == other.status &&
        model_type == other.model_type &&
        model_version == other.model_version &&
        parent_ref == other.parent_ref &&
        name == other.name &&
        object_version == other.object_version &&
        identifier == other.identifier &&
        execution_state == other.execution_state &&
        parameters == other.parameters &&
        object_status == other.object_status &&
        metadata == other.metadata &&
        operator == other.operator &&
        inputs == other.inputs &&
        outputs == other.outputs &&
        task_type == other.task_type &&
        config_provider == other.config_provider &&
        operator_type == other.operator_type &&
        metrics == other.metrics
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [key, task_run_key, start_time_in_millis, end_time_in_millis, status, model_type, model_version, parent_ref, name, object_version, identifier, execution_state, parameters, object_status, metadata, operator, inputs, outputs, task_type, config_provider, operator_type, metrics].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
