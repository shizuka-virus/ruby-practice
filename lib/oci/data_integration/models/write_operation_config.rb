# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200430
require 'date'
require 'logger'
require_relative 'abstract_data_operation_config'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The information about the write operation.
  class DataIntegration::Models::WriteOperationConfig < DataIntegration::Models::AbstractDataOperationConfig
    WRITE_MODE_ENUM = [
      WRITE_MODE_OVERWRITE = 'OVERWRITE'.freeze,
      WRITE_MODE_APPEND = 'APPEND'.freeze,
      WRITE_MODE_MERGE = 'MERGE'.freeze,
      WRITE_MODE_IGNORE = 'IGNORE'.freeze,
      WRITE_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The object key.
    # @return [String]
    attr_accessor :key

    # The object's model version.
    # @return [String]
    attr_accessor :model_version

    # @return [OCI::DataIntegration::Models::ParentReference]
    attr_accessor :parent_ref

    # An array of operations.
    # @return [Array<OCI::DataIntegration::Models::PushDownOperation>]
    attr_accessor :operations

    # @return [OCI::DataIntegration::Models::DataFormat]
    attr_accessor :data_format

    # @return [OCI::DataIntegration::Models::PartitionConfig]
    attr_accessor :partition_config

    # @return [OCI::DataIntegration::Models::AbstractWriteAttribute]
    attr_accessor :write_attribute

    # The mode for the write operation.
    # @return [String]
    attr_reader :write_mode

    # @return [OCI::DataIntegration::Models::UniqueKey]
    attr_accessor :merge_key

    # The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
    # @return [Integer]
    attr_accessor :object_status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'modelType',
        'metadata_config_properties': :'metadataConfigProperties',
        'derived_attributes': :'derivedAttributes',
        'call_attribute': :'callAttribute',
        'key': :'key',
        'model_version': :'modelVersion',
        'parent_ref': :'parentRef',
        'operations': :'operations',
        'data_format': :'dataFormat',
        'partition_config': :'partitionConfig',
        'write_attribute': :'writeAttribute',
        'write_mode': :'writeMode',
        'merge_key': :'mergeKey',
        'object_status': :'objectStatus'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'String',
        'metadata_config_properties': :'Hash<String, String>',
        'derived_attributes': :'Hash<String, String>',
        'call_attribute': :'OCI::DataIntegration::Models::BipCallAttribute',
        'key': :'String',
        'model_version': :'String',
        'parent_ref': :'OCI::DataIntegration::Models::ParentReference',
        'operations': :'Array<OCI::DataIntegration::Models::PushDownOperation>',
        'data_format': :'OCI::DataIntegration::Models::DataFormat',
        'partition_config': :'OCI::DataIntegration::Models::PartitionConfig',
        'write_attribute': :'OCI::DataIntegration::Models::AbstractWriteAttribute',
        'write_mode': :'String',
        'merge_key': :'OCI::DataIntegration::Models::UniqueKey',
        'object_status': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Hash<String, String>] :metadata_config_properties The value to assign to the {OCI::DataIntegration::Models::AbstractDataOperationConfig#metadata_config_properties #metadata_config_properties} proprety
    # @option attributes [Hash<String, String>] :derived_attributes The value to assign to the {OCI::DataIntegration::Models::AbstractDataOperationConfig#derived_attributes #derived_attributes} proprety
    # @option attributes [OCI::DataIntegration::Models::BipCallAttribute] :call_attribute The value to assign to the {OCI::DataIntegration::Models::AbstractDataOperationConfig#call_attribute #call_attribute} proprety
    # @option attributes [String] :key The value to assign to the {#key} property
    # @option attributes [String] :model_version The value to assign to the {#model_version} property
    # @option attributes [OCI::DataIntegration::Models::ParentReference] :parent_ref The value to assign to the {#parent_ref} property
    # @option attributes [Array<OCI::DataIntegration::Models::PushDownOperation>] :operations The value to assign to the {#operations} property
    # @option attributes [OCI::DataIntegration::Models::DataFormat] :data_format The value to assign to the {#data_format} property
    # @option attributes [OCI::DataIntegration::Models::PartitionConfig] :partition_config The value to assign to the {#partition_config} property
    # @option attributes [OCI::DataIntegration::Models::AbstractWriteAttribute] :write_attribute The value to assign to the {#write_attribute} property
    # @option attributes [String] :write_mode The value to assign to the {#write_mode} property
    # @option attributes [OCI::DataIntegration::Models::UniqueKey] :merge_key The value to assign to the {#merge_key} property
    # @option attributes [Integer] :object_status The value to assign to the {#object_status} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['modelType'] = 'WRITE_OPERATION_CONFIG'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.key = attributes[:'key'] if attributes[:'key']

      self.model_version = attributes[:'modelVersion'] if attributes[:'modelVersion']

      raise 'You cannot provide both :modelVersion and :model_version' if attributes.key?(:'modelVersion') && attributes.key?(:'model_version')

      self.model_version = attributes[:'model_version'] if attributes[:'model_version']

      self.parent_ref = attributes[:'parentRef'] if attributes[:'parentRef']

      raise 'You cannot provide both :parentRef and :parent_ref' if attributes.key?(:'parentRef') && attributes.key?(:'parent_ref')

      self.parent_ref = attributes[:'parent_ref'] if attributes[:'parent_ref']

      self.operations = attributes[:'operations'] if attributes[:'operations']

      self.data_format = attributes[:'dataFormat'] if attributes[:'dataFormat']

      raise 'You cannot provide both :dataFormat and :data_format' if attributes.key?(:'dataFormat') && attributes.key?(:'data_format')

      self.data_format = attributes[:'data_format'] if attributes[:'data_format']

      self.partition_config = attributes[:'partitionConfig'] if attributes[:'partitionConfig']

      raise 'You cannot provide both :partitionConfig and :partition_config' if attributes.key?(:'partitionConfig') && attributes.key?(:'partition_config')

      self.partition_config = attributes[:'partition_config'] if attributes[:'partition_config']

      self.write_attribute = attributes[:'writeAttribute'] if attributes[:'writeAttribute']

      raise 'You cannot provide both :writeAttribute and :write_attribute' if attributes.key?(:'writeAttribute') && attributes.key?(:'write_attribute')

      self.write_attribute = attributes[:'write_attribute'] if attributes[:'write_attribute']

      self.write_mode = attributes[:'writeMode'] if attributes[:'writeMode']

      raise 'You cannot provide both :writeMode and :write_mode' if attributes.key?(:'writeMode') && attributes.key?(:'write_mode')

      self.write_mode = attributes[:'write_mode'] if attributes[:'write_mode']

      self.merge_key = attributes[:'mergeKey'] if attributes[:'mergeKey']

      raise 'You cannot provide both :mergeKey and :merge_key' if attributes.key?(:'mergeKey') && attributes.key?(:'merge_key')

      self.merge_key = attributes[:'merge_key'] if attributes[:'merge_key']

      self.object_status = attributes[:'objectStatus'] if attributes[:'objectStatus']

      raise 'You cannot provide both :objectStatus and :object_status' if attributes.key?(:'objectStatus') && attributes.key?(:'object_status')

      self.object_status = attributes[:'object_status'] if attributes[:'object_status']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] write_mode Object to be assigned
    def write_mode=(write_mode)
      # rubocop:disable Style/ConditionalAssignment
      if write_mode && !WRITE_MODE_ENUM.include?(write_mode)
        OCI.logger.debug("Unknown value for 'write_mode' [" + write_mode + "]. Mapping to 'WRITE_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @write_mode = WRITE_MODE_UNKNOWN_ENUM_VALUE
      else
        @write_mode = write_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        model_type == other.model_type &&
        metadata_config_properties == other.metadata_config_properties &&
        derived_attributes == other.derived_attributes &&
        call_attribute == other.call_attribute &&
        key == other.key &&
        model_version == other.model_version &&
        parent_ref == other.parent_ref &&
        operations == other.operations &&
        data_format == other.data_format &&
        partition_config == other.partition_config &&
        write_attribute == other.write_attribute &&
        write_mode == other.write_mode &&
        merge_key == other.merge_key &&
        object_status == other.object_status
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [model_type, metadata_config_properties, derived_attributes, call_attribute, key, model_version, parent_ref, operations, data_format, partition_config, write_attribute, write_mode, merge_key, object_status].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
