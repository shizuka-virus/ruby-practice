# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200430
require 'date'
require 'logger'
require_relative 'dynamic_type_handler'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The rule type config.
  class DataIntegration::Models::RuleTypeConfig < DataIntegration::Models::DynamicTypeHandler
    # The key of the object.
    # @return [String]
    attr_accessor :key

    # The model version of an object.
    # @return [String]
    attr_accessor :model_version

    # @return [OCI::DataIntegration::Models::ParentReference]
    attr_accessor :parent_ref

    # Deprecated - Reference to a typed object, this can be either a key value to an object within the document, a shall referenced to a `TypedObject` or a full `TypedObject` definition.
    # @return [Object]
    attr_accessor :scope

    # @return [OCI::DataIntegration::Models::ScopeReference]
    attr_accessor :scope_reference

    # Specifies whether it is ordered by rule.
    # @return [BOOLEAN]
    attr_accessor :is_order_by_rule

    # The projection rules.
    # @return [Array<OCI::DataIntegration::Models::ProjectionRule>]
    attr_accessor :projection_rules

    # @return [OCI::DataIntegration::Models::ConfigValues]
    attr_accessor :config_values

    # The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
    # @return [Integer]
    attr_accessor :object_status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'modelType',
        'key': :'key',
        'model_version': :'modelVersion',
        'parent_ref': :'parentRef',
        'scope': :'scope',
        'scope_reference': :'scopeReference',
        'is_order_by_rule': :'isOrderByRule',
        'projection_rules': :'projectionRules',
        'config_values': :'configValues',
        'object_status': :'objectStatus'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'String',
        'key': :'String',
        'model_version': :'String',
        'parent_ref': :'OCI::DataIntegration::Models::ParentReference',
        'scope': :'Object',
        'scope_reference': :'OCI::DataIntegration::Models::ScopeReference',
        'is_order_by_rule': :'BOOLEAN',
        'projection_rules': :'Array<OCI::DataIntegration::Models::ProjectionRule>',
        'config_values': :'OCI::DataIntegration::Models::ConfigValues',
        'object_status': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :key The value to assign to the {#key} property
    # @option attributes [String] :model_version The value to assign to the {#model_version} property
    # @option attributes [OCI::DataIntegration::Models::ParentReference] :parent_ref The value to assign to the {#parent_ref} property
    # @option attributes [Object] :scope The value to assign to the {#scope} property
    # @option attributes [OCI::DataIntegration::Models::ScopeReference] :scope_reference The value to assign to the {#scope_reference} property
    # @option attributes [BOOLEAN] :is_order_by_rule The value to assign to the {#is_order_by_rule} property
    # @option attributes [Array<OCI::DataIntegration::Models::ProjectionRule>] :projection_rules The value to assign to the {#projection_rules} property
    # @option attributes [OCI::DataIntegration::Models::ConfigValues] :config_values The value to assign to the {#config_values} property
    # @option attributes [Integer] :object_status The value to assign to the {#object_status} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['modelType'] = 'RULE_TYPE_CONFIGS'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.key = attributes[:'key'] if attributes[:'key']

      self.model_version = attributes[:'modelVersion'] if attributes[:'modelVersion']

      raise 'You cannot provide both :modelVersion and :model_version' if attributes.key?(:'modelVersion') && attributes.key?(:'model_version')

      self.model_version = attributes[:'model_version'] if attributes[:'model_version']

      self.parent_ref = attributes[:'parentRef'] if attributes[:'parentRef']

      raise 'You cannot provide both :parentRef and :parent_ref' if attributes.key?(:'parentRef') && attributes.key?(:'parent_ref')

      self.parent_ref = attributes[:'parent_ref'] if attributes[:'parent_ref']

      self.scope = attributes[:'scope'] if attributes[:'scope']

      self.scope_reference = attributes[:'scopeReference'] if attributes[:'scopeReference']

      raise 'You cannot provide both :scopeReference and :scope_reference' if attributes.key?(:'scopeReference') && attributes.key?(:'scope_reference')

      self.scope_reference = attributes[:'scope_reference'] if attributes[:'scope_reference']

      self.is_order_by_rule = attributes[:'isOrderByRule'] unless attributes[:'isOrderByRule'].nil?

      raise 'You cannot provide both :isOrderByRule and :is_order_by_rule' if attributes.key?(:'isOrderByRule') && attributes.key?(:'is_order_by_rule')

      self.is_order_by_rule = attributes[:'is_order_by_rule'] unless attributes[:'is_order_by_rule'].nil?

      self.projection_rules = attributes[:'projectionRules'] if attributes[:'projectionRules']

      raise 'You cannot provide both :projectionRules and :projection_rules' if attributes.key?(:'projectionRules') && attributes.key?(:'projection_rules')

      self.projection_rules = attributes[:'projection_rules'] if attributes[:'projection_rules']

      self.config_values = attributes[:'configValues'] if attributes[:'configValues']

      raise 'You cannot provide both :configValues and :config_values' if attributes.key?(:'configValues') && attributes.key?(:'config_values')

      self.config_values = attributes[:'config_values'] if attributes[:'config_values']

      self.object_status = attributes[:'objectStatus'] if attributes[:'objectStatus']

      raise 'You cannot provide both :objectStatus and :object_status' if attributes.key?(:'objectStatus') && attributes.key?(:'object_status')

      self.object_status = attributes[:'object_status'] if attributes[:'object_status']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        model_type == other.model_type &&
        key == other.key &&
        model_version == other.model_version &&
        parent_ref == other.parent_ref &&
        scope == other.scope &&
        scope_reference == other.scope_reference &&
        is_order_by_rule == other.is_order_by_rule &&
        projection_rules == other.projection_rules &&
        config_values == other.config_values &&
        object_status == other.object_status
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [model_type, key, model_version, parent_ref, scope, scope_reference, is_order_by_rule, projection_rules, config_values, object_status].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
