# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200430
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Copy metadata object response summary.
  class DataIntegration::Models::CopyObjectRequestSummary
    COPY_METADATA_OBJECT_REQUEST_STATUS_ENUM = [
      COPY_METADATA_OBJECT_REQUEST_STATUS_SUCCESSFUL = 'SUCCESSFUL'.freeze,
      COPY_METADATA_OBJECT_REQUEST_STATUS_FAILED = 'FAILED'.freeze,
      COPY_METADATA_OBJECT_REQUEST_STATUS_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      COPY_METADATA_OBJECT_REQUEST_STATUS_QUEUED = 'QUEUED'.freeze,
      COPY_METADATA_OBJECT_REQUEST_STATUS_TERMINATING = 'TERMINATING'.freeze,
      COPY_METADATA_OBJECT_REQUEST_STATUS_TERMINATED = 'TERMINATED'.freeze,
      COPY_METADATA_OBJECT_REQUEST_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Copy object request key.
    # @return [String]
    attr_accessor :key

    # The workspace id of the source from where we need to copy object.
    # @return [String]
    attr_accessor :source_workspace_id

    # The list of the objects to be copied.
    # @return [Array<String>]
    attr_accessor :object_keys

    # @return [OCI::DataIntegration::Models::CopyConflictResolution]
    attr_accessor :copy_conflict_resolution

    # Copy Object request status.
    # @return [String]
    attr_reader :copy_metadata_object_request_status

    # OCID of the user who initiated copy request.
    # @return [String]
    attr_accessor :created_by

    # Name of the user who created the copy object request.
    # @return [String]
    attr_accessor :created_by_name

    # Number of source objects to be copied.
    # @return [Integer]
    attr_accessor :total_source_object_count

    # Number of objects copied into the target.
    # @return [Integer]
    attr_accessor :total_objects_copied_into_target

    # Time at which the request started getting processed.
    # @return [Integer]
    attr_accessor :time_started_in_millis

    # Time at which the request was completely processed.
    # @return [Integer]
    attr_accessor :time_ended_in_millis

    # The array of copy object details.
    # @return [Array<OCI::DataIntegration::Models::CopyObjectMetadataSummary>]
    attr_accessor :copied_items

    # The array of copied referenced objects.
    # @return [Array<OCI::DataIntegration::Models::CopyObjectMetadataSummary>]
    attr_accessor :referenced_items

    # Name of the copy object request.
    # @return [String]
    attr_accessor :name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'key': :'key',
        'source_workspace_id': :'sourceWorkspaceId',
        'object_keys': :'objectKeys',
        'copy_conflict_resolution': :'copyConflictResolution',
        'copy_metadata_object_request_status': :'copyMetadataObjectRequestStatus',
        'created_by': :'createdBy',
        'created_by_name': :'createdByName',
        'total_source_object_count': :'totalSourceObjectCount',
        'total_objects_copied_into_target': :'totalObjectsCopiedIntoTarget',
        'time_started_in_millis': :'timeStartedInMillis',
        'time_ended_in_millis': :'timeEndedInMillis',
        'copied_items': :'copiedItems',
        'referenced_items': :'referencedItems',
        'name': :'name'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'key': :'String',
        'source_workspace_id': :'String',
        'object_keys': :'Array<String>',
        'copy_conflict_resolution': :'OCI::DataIntegration::Models::CopyConflictResolution',
        'copy_metadata_object_request_status': :'String',
        'created_by': :'String',
        'created_by_name': :'String',
        'total_source_object_count': :'Integer',
        'total_objects_copied_into_target': :'Integer',
        'time_started_in_millis': :'Integer',
        'time_ended_in_millis': :'Integer',
        'copied_items': :'Array<OCI::DataIntegration::Models::CopyObjectMetadataSummary>',
        'referenced_items': :'Array<OCI::DataIntegration::Models::CopyObjectMetadataSummary>',
        'name': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :key The value to assign to the {#key} property
    # @option attributes [String] :source_workspace_id The value to assign to the {#source_workspace_id} property
    # @option attributes [Array<String>] :object_keys The value to assign to the {#object_keys} property
    # @option attributes [OCI::DataIntegration::Models::CopyConflictResolution] :copy_conflict_resolution The value to assign to the {#copy_conflict_resolution} property
    # @option attributes [String] :copy_metadata_object_request_status The value to assign to the {#copy_metadata_object_request_status} property
    # @option attributes [String] :created_by The value to assign to the {#created_by} property
    # @option attributes [String] :created_by_name The value to assign to the {#created_by_name} property
    # @option attributes [Integer] :total_source_object_count The value to assign to the {#total_source_object_count} property
    # @option attributes [Integer] :total_objects_copied_into_target The value to assign to the {#total_objects_copied_into_target} property
    # @option attributes [Integer] :time_started_in_millis The value to assign to the {#time_started_in_millis} property
    # @option attributes [Integer] :time_ended_in_millis The value to assign to the {#time_ended_in_millis} property
    # @option attributes [Array<OCI::DataIntegration::Models::CopyObjectMetadataSummary>] :copied_items The value to assign to the {#copied_items} property
    # @option attributes [Array<OCI::DataIntegration::Models::CopyObjectMetadataSummary>] :referenced_items The value to assign to the {#referenced_items} property
    # @option attributes [String] :name The value to assign to the {#name} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      self.key = attributes[:'key'] if attributes[:'key']

      self.source_workspace_id = attributes[:'sourceWorkspaceId'] if attributes[:'sourceWorkspaceId']

      raise 'You cannot provide both :sourceWorkspaceId and :source_workspace_id' if attributes.key?(:'sourceWorkspaceId') && attributes.key?(:'source_workspace_id')

      self.source_workspace_id = attributes[:'source_workspace_id'] if attributes[:'source_workspace_id']

      self.object_keys = attributes[:'objectKeys'] if attributes[:'objectKeys']

      raise 'You cannot provide both :objectKeys and :object_keys' if attributes.key?(:'objectKeys') && attributes.key?(:'object_keys')

      self.object_keys = attributes[:'object_keys'] if attributes[:'object_keys']

      self.copy_conflict_resolution = attributes[:'copyConflictResolution'] if attributes[:'copyConflictResolution']

      raise 'You cannot provide both :copyConflictResolution and :copy_conflict_resolution' if attributes.key?(:'copyConflictResolution') && attributes.key?(:'copy_conflict_resolution')

      self.copy_conflict_resolution = attributes[:'copy_conflict_resolution'] if attributes[:'copy_conflict_resolution']

      self.copy_metadata_object_request_status = attributes[:'copyMetadataObjectRequestStatus'] if attributes[:'copyMetadataObjectRequestStatus']

      raise 'You cannot provide both :copyMetadataObjectRequestStatus and :copy_metadata_object_request_status' if attributes.key?(:'copyMetadataObjectRequestStatus') && attributes.key?(:'copy_metadata_object_request_status')

      self.copy_metadata_object_request_status = attributes[:'copy_metadata_object_request_status'] if attributes[:'copy_metadata_object_request_status']

      self.created_by = attributes[:'createdBy'] if attributes[:'createdBy']

      raise 'You cannot provide both :createdBy and :created_by' if attributes.key?(:'createdBy') && attributes.key?(:'created_by')

      self.created_by = attributes[:'created_by'] if attributes[:'created_by']

      self.created_by_name = attributes[:'createdByName'] if attributes[:'createdByName']

      raise 'You cannot provide both :createdByName and :created_by_name' if attributes.key?(:'createdByName') && attributes.key?(:'created_by_name')

      self.created_by_name = attributes[:'created_by_name'] if attributes[:'created_by_name']

      self.total_source_object_count = attributes[:'totalSourceObjectCount'] if attributes[:'totalSourceObjectCount']

      raise 'You cannot provide both :totalSourceObjectCount and :total_source_object_count' if attributes.key?(:'totalSourceObjectCount') && attributes.key?(:'total_source_object_count')

      self.total_source_object_count = attributes[:'total_source_object_count'] if attributes[:'total_source_object_count']

      self.total_objects_copied_into_target = attributes[:'totalObjectsCopiedIntoTarget'] if attributes[:'totalObjectsCopiedIntoTarget']

      raise 'You cannot provide both :totalObjectsCopiedIntoTarget and :total_objects_copied_into_target' if attributes.key?(:'totalObjectsCopiedIntoTarget') && attributes.key?(:'total_objects_copied_into_target')

      self.total_objects_copied_into_target = attributes[:'total_objects_copied_into_target'] if attributes[:'total_objects_copied_into_target']

      self.time_started_in_millis = attributes[:'timeStartedInMillis'] if attributes[:'timeStartedInMillis']

      raise 'You cannot provide both :timeStartedInMillis and :time_started_in_millis' if attributes.key?(:'timeStartedInMillis') && attributes.key?(:'time_started_in_millis')

      self.time_started_in_millis = attributes[:'time_started_in_millis'] if attributes[:'time_started_in_millis']

      self.time_ended_in_millis = attributes[:'timeEndedInMillis'] if attributes[:'timeEndedInMillis']

      raise 'You cannot provide both :timeEndedInMillis and :time_ended_in_millis' if attributes.key?(:'timeEndedInMillis') && attributes.key?(:'time_ended_in_millis')

      self.time_ended_in_millis = attributes[:'time_ended_in_millis'] if attributes[:'time_ended_in_millis']

      self.copied_items = attributes[:'copiedItems'] if attributes[:'copiedItems']

      raise 'You cannot provide both :copiedItems and :copied_items' if attributes.key?(:'copiedItems') && attributes.key?(:'copied_items')

      self.copied_items = attributes[:'copied_items'] if attributes[:'copied_items']

      self.referenced_items = attributes[:'referencedItems'] if attributes[:'referencedItems']

      raise 'You cannot provide both :referencedItems and :referenced_items' if attributes.key?(:'referencedItems') && attributes.key?(:'referenced_items')

      self.referenced_items = attributes[:'referenced_items'] if attributes[:'referenced_items']

      self.name = attributes[:'name'] if attributes[:'name']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] copy_metadata_object_request_status Object to be assigned
    def copy_metadata_object_request_status=(copy_metadata_object_request_status)
      # rubocop:disable Style/ConditionalAssignment
      if copy_metadata_object_request_status && !COPY_METADATA_OBJECT_REQUEST_STATUS_ENUM.include?(copy_metadata_object_request_status)
        OCI.logger.debug("Unknown value for 'copy_metadata_object_request_status' [" + copy_metadata_object_request_status + "]. Mapping to 'COPY_METADATA_OBJECT_REQUEST_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @copy_metadata_object_request_status = COPY_METADATA_OBJECT_REQUEST_STATUS_UNKNOWN_ENUM_VALUE
      else
        @copy_metadata_object_request_status = copy_metadata_object_request_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        key == other.key &&
        source_workspace_id == other.source_workspace_id &&
        object_keys == other.object_keys &&
        copy_conflict_resolution == other.copy_conflict_resolution &&
        copy_metadata_object_request_status == other.copy_metadata_object_request_status &&
        created_by == other.created_by &&
        created_by_name == other.created_by_name &&
        total_source_object_count == other.total_source_object_count &&
        total_objects_copied_into_target == other.total_objects_copied_into_target &&
        time_started_in_millis == other.time_started_in_millis &&
        time_ended_in_millis == other.time_ended_in_millis &&
        copied_items == other.copied_items &&
        referenced_items == other.referenced_items &&
        name == other.name
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [key, source_workspace_id, object_keys, copy_conflict_resolution, copy_metadata_object_request_status, created_by, created_by_name, total_source_object_count, total_objects_copied_into_target, time_started_in_millis, time_ended_in_millis, copied_items, referenced_items, name].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
