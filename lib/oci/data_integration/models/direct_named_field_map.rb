# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200430
require 'date'
require_relative 'field_map'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A named field map.
  class DataIntegration::Models::DirectNamedFieldMap < DataIntegration::Models::FieldMap
    # The object key.
    # @return [String]
    attr_accessor :key

    # The object's model version.
    # @return [String]
    attr_accessor :model_version

    # @return [OCI::DataIntegration::Models::ParentReference]
    attr_accessor :parent_ref

    # @return [OCI::DataIntegration::Models::ConfigValues]
    attr_accessor :config_values

    # Deprecated - Reference to a typed object.
    # @return [String]
    attr_accessor :source_typed_object

    # Deprecated - Reference to a typed object
    # @return [String]
    attr_accessor :target_typed_object

    # @return [OCI::DataIntegration::Models::ScopeReference]
    attr_accessor :source_scope_reference

    # @return [OCI::DataIntegration::Models::ScopeReference]
    attr_accessor :target_scope_reference

    # The source field name.
    # @return [String]
    attr_accessor :source_field_name

    # The target field name.
    # @return [String]
    attr_accessor :target_field_name

    # The status of an object that can be set to value 1 for shallow references across objects, other values reserved.
    # @return [Integer]
    attr_accessor :object_status

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'modelType',
        'description': :'description',
        'key': :'key',
        'model_version': :'modelVersion',
        'parent_ref': :'parentRef',
        'config_values': :'configValues',
        'source_typed_object': :'sourceTypedObject',
        'target_typed_object': :'targetTypedObject',
        'source_scope_reference': :'sourceScopeReference',
        'target_scope_reference': :'targetScopeReference',
        'source_field_name': :'sourceFieldName',
        'target_field_name': :'targetFieldName',
        'object_status': :'objectStatus'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'String',
        'description': :'String',
        'key': :'String',
        'model_version': :'String',
        'parent_ref': :'OCI::DataIntegration::Models::ParentReference',
        'config_values': :'OCI::DataIntegration::Models::ConfigValues',
        'source_typed_object': :'String',
        'target_typed_object': :'String',
        'source_scope_reference': :'OCI::DataIntegration::Models::ScopeReference',
        'target_scope_reference': :'OCI::DataIntegration::Models::ScopeReference',
        'source_field_name': :'String',
        'target_field_name': :'String',
        'object_status': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :description The value to assign to the {OCI::DataIntegration::Models::FieldMap#description #description} proprety
    # @option attributes [String] :key The value to assign to the {#key} property
    # @option attributes [String] :model_version The value to assign to the {#model_version} property
    # @option attributes [OCI::DataIntegration::Models::ParentReference] :parent_ref The value to assign to the {#parent_ref} property
    # @option attributes [OCI::DataIntegration::Models::ConfigValues] :config_values The value to assign to the {#config_values} property
    # @option attributes [String] :source_typed_object The value to assign to the {#source_typed_object} property
    # @option attributes [String] :target_typed_object The value to assign to the {#target_typed_object} property
    # @option attributes [OCI::DataIntegration::Models::ScopeReference] :source_scope_reference The value to assign to the {#source_scope_reference} property
    # @option attributes [OCI::DataIntegration::Models::ScopeReference] :target_scope_reference The value to assign to the {#target_scope_reference} property
    # @option attributes [String] :source_field_name The value to assign to the {#source_field_name} property
    # @option attributes [String] :target_field_name The value to assign to the {#target_field_name} property
    # @option attributes [Integer] :object_status The value to assign to the {#object_status} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['modelType'] = 'DIRECT_NAMED_FIELD_MAP'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.key = attributes[:'key'] if attributes[:'key']

      self.model_version = attributes[:'modelVersion'] if attributes[:'modelVersion']

      raise 'You cannot provide both :modelVersion and :model_version' if attributes.key?(:'modelVersion') && attributes.key?(:'model_version')

      self.model_version = attributes[:'model_version'] if attributes[:'model_version']

      self.parent_ref = attributes[:'parentRef'] if attributes[:'parentRef']

      raise 'You cannot provide both :parentRef and :parent_ref' if attributes.key?(:'parentRef') && attributes.key?(:'parent_ref')

      self.parent_ref = attributes[:'parent_ref'] if attributes[:'parent_ref']

      self.config_values = attributes[:'configValues'] if attributes[:'configValues']

      raise 'You cannot provide both :configValues and :config_values' if attributes.key?(:'configValues') && attributes.key?(:'config_values')

      self.config_values = attributes[:'config_values'] if attributes[:'config_values']

      self.source_typed_object = attributes[:'sourceTypedObject'] if attributes[:'sourceTypedObject']

      raise 'You cannot provide both :sourceTypedObject and :source_typed_object' if attributes.key?(:'sourceTypedObject') && attributes.key?(:'source_typed_object')

      self.source_typed_object = attributes[:'source_typed_object'] if attributes[:'source_typed_object']

      self.target_typed_object = attributes[:'targetTypedObject'] if attributes[:'targetTypedObject']

      raise 'You cannot provide both :targetTypedObject and :target_typed_object' if attributes.key?(:'targetTypedObject') && attributes.key?(:'target_typed_object')

      self.target_typed_object = attributes[:'target_typed_object'] if attributes[:'target_typed_object']

      self.source_scope_reference = attributes[:'sourceScopeReference'] if attributes[:'sourceScopeReference']

      raise 'You cannot provide both :sourceScopeReference and :source_scope_reference' if attributes.key?(:'sourceScopeReference') && attributes.key?(:'source_scope_reference')

      self.source_scope_reference = attributes[:'source_scope_reference'] if attributes[:'source_scope_reference']

      self.target_scope_reference = attributes[:'targetScopeReference'] if attributes[:'targetScopeReference']

      raise 'You cannot provide both :targetScopeReference and :target_scope_reference' if attributes.key?(:'targetScopeReference') && attributes.key?(:'target_scope_reference')

      self.target_scope_reference = attributes[:'target_scope_reference'] if attributes[:'target_scope_reference']

      self.source_field_name = attributes[:'sourceFieldName'] if attributes[:'sourceFieldName']

      raise 'You cannot provide both :sourceFieldName and :source_field_name' if attributes.key?(:'sourceFieldName') && attributes.key?(:'source_field_name')

      self.source_field_name = attributes[:'source_field_name'] if attributes[:'source_field_name']

      self.target_field_name = attributes[:'targetFieldName'] if attributes[:'targetFieldName']

      raise 'You cannot provide both :targetFieldName and :target_field_name' if attributes.key?(:'targetFieldName') && attributes.key?(:'target_field_name')

      self.target_field_name = attributes[:'target_field_name'] if attributes[:'target_field_name']

      self.object_status = attributes[:'objectStatus'] if attributes[:'objectStatus']

      raise 'You cannot provide both :objectStatus and :object_status' if attributes.key?(:'objectStatus') && attributes.key?(:'object_status')

      self.object_status = attributes[:'object_status'] if attributes[:'object_status']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        model_type == other.model_type &&
        description == other.description &&
        key == other.key &&
        model_version == other.model_version &&
        parent_ref == other.parent_ref &&
        config_values == other.config_values &&
        source_typed_object == other.source_typed_object &&
        target_typed_object == other.target_typed_object &&
        source_scope_reference == other.source_scope_reference &&
        target_scope_reference == other.target_scope_reference &&
        source_field_name == other.source_field_name &&
        target_field_name == other.target_field_name &&
        object_status == other.object_status
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [model_type, description, key, model_version, parent_ref, config_values, source_typed_object, target_typed_object, source_scope_reference, target_scope_reference, source_field_name, target_field_name, object_status].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
