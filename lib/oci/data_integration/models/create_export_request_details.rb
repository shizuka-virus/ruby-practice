# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200430
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details of export request. Export is supported using three ways.
  # First, when objectKeys are provided, export of those objects take place.
  # Second, when filter are provided, all the objects based on the filter provided are exported.
  # Third, when neither objectKeys nor filters are provided, we export all the design objects for the workspace.
  #
  class DataIntegration::Models::CreateExportRequestDetails
    # **[Required]** Name of the Object Storage bucket where the object will be exported.
    # @return [String]
    attr_accessor :bucket_name

    # Name of the exported zip file.
    # @return [String]
    attr_accessor :file_name

    # Optional parameter to point to object storage tenancy (if using Object Storage of different tenancy)
    # @return [String]
    attr_accessor :object_storage_tenancy_id

    # Region of the object storage (if using object storage of different region)
    # @return [String]
    attr_accessor :object_storage_region

    # Flag to control whether to overwrite the object if it is already present at the provided object storage location.
    # @return [BOOLEAN]
    attr_accessor :is_object_overwrite_enabled

    # Field is used to specify which object keys to export
    # @return [Array<String>]
    attr_accessor :object_keys

    # This field controls if the references will be exported along with the objects
    # @return [BOOLEAN]
    attr_accessor :are_references_included

    # Filters for exported objects
    # @return [Array<String>]
    attr_accessor :filters

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'bucket_name': :'bucketName',
        'file_name': :'fileName',
        'object_storage_tenancy_id': :'objectStorageTenancyId',
        'object_storage_region': :'objectStorageRegion',
        'is_object_overwrite_enabled': :'isObjectOverwriteEnabled',
        'object_keys': :'objectKeys',
        'are_references_included': :'areReferencesIncluded',
        'filters': :'filters'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'bucket_name': :'String',
        'file_name': :'String',
        'object_storage_tenancy_id': :'String',
        'object_storage_region': :'String',
        'is_object_overwrite_enabled': :'BOOLEAN',
        'object_keys': :'Array<String>',
        'are_references_included': :'BOOLEAN',
        'filters': :'Array<String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :bucket_name The value to assign to the {#bucket_name} property
    # @option attributes [String] :file_name The value to assign to the {#file_name} property
    # @option attributes [String] :object_storage_tenancy_id The value to assign to the {#object_storage_tenancy_id} property
    # @option attributes [String] :object_storage_region The value to assign to the {#object_storage_region} property
    # @option attributes [BOOLEAN] :is_object_overwrite_enabled The value to assign to the {#is_object_overwrite_enabled} property
    # @option attributes [Array<String>] :object_keys The value to assign to the {#object_keys} property
    # @option attributes [BOOLEAN] :are_references_included The value to assign to the {#are_references_included} property
    # @option attributes [Array<String>] :filters The value to assign to the {#filters} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.bucket_name = attributes[:'bucketName'] if attributes[:'bucketName']

      raise 'You cannot provide both :bucketName and :bucket_name' if attributes.key?(:'bucketName') && attributes.key?(:'bucket_name')

      self.bucket_name = attributes[:'bucket_name'] if attributes[:'bucket_name']

      self.file_name = attributes[:'fileName'] if attributes[:'fileName']

      raise 'You cannot provide both :fileName and :file_name' if attributes.key?(:'fileName') && attributes.key?(:'file_name')

      self.file_name = attributes[:'file_name'] if attributes[:'file_name']

      self.object_storage_tenancy_id = attributes[:'objectStorageTenancyId'] if attributes[:'objectStorageTenancyId']

      raise 'You cannot provide both :objectStorageTenancyId and :object_storage_tenancy_id' if attributes.key?(:'objectStorageTenancyId') && attributes.key?(:'object_storage_tenancy_id')

      self.object_storage_tenancy_id = attributes[:'object_storage_tenancy_id'] if attributes[:'object_storage_tenancy_id']

      self.object_storage_region = attributes[:'objectStorageRegion'] if attributes[:'objectStorageRegion']

      raise 'You cannot provide both :objectStorageRegion and :object_storage_region' if attributes.key?(:'objectStorageRegion') && attributes.key?(:'object_storage_region')

      self.object_storage_region = attributes[:'object_storage_region'] if attributes[:'object_storage_region']

      self.is_object_overwrite_enabled = attributes[:'isObjectOverwriteEnabled'] unless attributes[:'isObjectOverwriteEnabled'].nil?
      self.is_object_overwrite_enabled = false if is_object_overwrite_enabled.nil? && !attributes.key?(:'isObjectOverwriteEnabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isObjectOverwriteEnabled and :is_object_overwrite_enabled' if attributes.key?(:'isObjectOverwriteEnabled') && attributes.key?(:'is_object_overwrite_enabled')

      self.is_object_overwrite_enabled = attributes[:'is_object_overwrite_enabled'] unless attributes[:'is_object_overwrite_enabled'].nil?
      self.is_object_overwrite_enabled = false if is_object_overwrite_enabled.nil? && !attributes.key?(:'isObjectOverwriteEnabled') && !attributes.key?(:'is_object_overwrite_enabled') # rubocop:disable Style/StringLiterals

      self.object_keys = attributes[:'objectKeys'] if attributes[:'objectKeys']

      raise 'You cannot provide both :objectKeys and :object_keys' if attributes.key?(:'objectKeys') && attributes.key?(:'object_keys')

      self.object_keys = attributes[:'object_keys'] if attributes[:'object_keys']

      self.are_references_included = attributes[:'areReferencesIncluded'] unless attributes[:'areReferencesIncluded'].nil?
      self.are_references_included = true if are_references_included.nil? && !attributes.key?(:'areReferencesIncluded') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :areReferencesIncluded and :are_references_included' if attributes.key?(:'areReferencesIncluded') && attributes.key?(:'are_references_included')

      self.are_references_included = attributes[:'are_references_included'] unless attributes[:'are_references_included'].nil?
      self.are_references_included = true if are_references_included.nil? && !attributes.key?(:'areReferencesIncluded') && !attributes.key?(:'are_references_included') # rubocop:disable Style/StringLiterals

      self.filters = attributes[:'filters'] if attributes[:'filters']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        bucket_name == other.bucket_name &&
        file_name == other.file_name &&
        object_storage_tenancy_id == other.object_storage_tenancy_id &&
        object_storage_region == other.object_storage_region &&
        is_object_overwrite_enabled == other.is_object_overwrite_enabled &&
        object_keys == other.object_keys &&
        are_references_included == other.are_references_included &&
        filters == other.filters
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [bucket_name, file_name, object_storage_tenancy_id, object_storage_region, is_object_overwrite_enabled, object_keys, are_references_included, filters].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
