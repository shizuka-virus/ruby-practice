# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200430
require 'date'
require_relative 'connection_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The connection details for a OAuth connection.
  class DataIntegration::Models::ConnectionFromOAuth2Details < DataIntegration::Models::ConnectionDetails
    GRANT_TYPE_ENUM = [
      GRANT_TYPE_CLIENT_CREDENTIALS = 'CLIENT_CREDENTIALS'.freeze
    ].freeze

    # **[Required]** Specifies the endpoint used to exchange authentication credentials for access tokens
    # @return [String]
    attr_accessor :access_token_url

    # Specifies the client ID key for specific application
    # @return [String]
    attr_accessor :client_id

    # @return [OCI::DataIntegration::Models::SensitiveAttribute]
    attr_accessor :client_secret

    # Specifies the OAuth scopes that limit the permissions granted by an access token.
    # @return [String]
    attr_accessor :scope

    # Specifies the OAuth2 grant mechanism. Example CLIENT_CREDENTIALS, Implicit Flow etc.
    # @return [String]
    attr_reader :grant_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'modelType',
        'key': :'key',
        'model_version': :'modelVersion',
        'parent_ref': :'parentRef',
        'name': :'name',
        'description': :'description',
        'object_version': :'objectVersion',
        'object_status': :'objectStatus',
        'identifier': :'identifier',
        'primary_schema': :'primarySchema',
        'connection_properties': :'connectionProperties',
        'is_default': :'isDefault',
        'metadata': :'metadata',
        'access_token_url': :'accessTokenUrl',
        'client_id': :'clientId',
        'client_secret': :'clientSecret',
        'scope': :'scope',
        'grant_type': :'grantType'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'String',
        'key': :'String',
        'model_version': :'String',
        'parent_ref': :'OCI::DataIntegration::Models::ParentReference',
        'name': :'String',
        'description': :'String',
        'object_version': :'Integer',
        'object_status': :'Integer',
        'identifier': :'String',
        'primary_schema': :'OCI::DataIntegration::Models::Schema',
        'connection_properties': :'Array<OCI::DataIntegration::Models::ConnectionProperty>',
        'is_default': :'BOOLEAN',
        'metadata': :'OCI::DataIntegration::Models::ObjectMetadata',
        'access_token_url': :'String',
        'client_id': :'String',
        'client_secret': :'OCI::DataIntegration::Models::SensitiveAttribute',
        'scope': :'String',
        'grant_type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :key The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#key #key} proprety
    # @option attributes [String] :model_version The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#model_version #model_version} proprety
    # @option attributes [OCI::DataIntegration::Models::ParentReference] :parent_ref The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#parent_ref #parent_ref} proprety
    # @option attributes [String] :name The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#name #name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#description #description} proprety
    # @option attributes [Integer] :object_version The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#object_version #object_version} proprety
    # @option attributes [Integer] :object_status The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#object_status #object_status} proprety
    # @option attributes [String] :identifier The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#identifier #identifier} proprety
    # @option attributes [OCI::DataIntegration::Models::Schema] :primary_schema The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#primary_schema #primary_schema} proprety
    # @option attributes [Array<OCI::DataIntegration::Models::ConnectionProperty>] :connection_properties The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#connection_properties #connection_properties} proprety
    # @option attributes [BOOLEAN] :is_default The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#is_default #is_default} proprety
    # @option attributes [OCI::DataIntegration::Models::ObjectMetadata] :metadata The value to assign to the {OCI::DataIntegration::Models::ConnectionDetails#metadata #metadata} proprety
    # @option attributes [String] :access_token_url The value to assign to the {#access_token_url} property
    # @option attributes [String] :client_id The value to assign to the {#client_id} property
    # @option attributes [OCI::DataIntegration::Models::SensitiveAttribute] :client_secret The value to assign to the {#client_secret} property
    # @option attributes [String] :scope The value to assign to the {#scope} property
    # @option attributes [String] :grant_type The value to assign to the {#grant_type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['modelType'] = 'OAUTH2_CONNECTION'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.access_token_url = attributes[:'accessTokenUrl'] if attributes[:'accessTokenUrl']

      raise 'You cannot provide both :accessTokenUrl and :access_token_url' if attributes.key?(:'accessTokenUrl') && attributes.key?(:'access_token_url')

      self.access_token_url = attributes[:'access_token_url'] if attributes[:'access_token_url']

      self.client_id = attributes[:'clientId'] if attributes[:'clientId']

      raise 'You cannot provide both :clientId and :client_id' if attributes.key?(:'clientId') && attributes.key?(:'client_id')

      self.client_id = attributes[:'client_id'] if attributes[:'client_id']

      self.client_secret = attributes[:'clientSecret'] if attributes[:'clientSecret']

      raise 'You cannot provide both :clientSecret and :client_secret' if attributes.key?(:'clientSecret') && attributes.key?(:'client_secret')

      self.client_secret = attributes[:'client_secret'] if attributes[:'client_secret']

      self.scope = attributes[:'scope'] if attributes[:'scope']

      self.grant_type = attributes[:'grantType'] if attributes[:'grantType']
      self.grant_type = "CLIENT_CREDENTIALS" if grant_type.nil? && !attributes.key?(:'grantType') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :grantType and :grant_type' if attributes.key?(:'grantType') && attributes.key?(:'grant_type')

      self.grant_type = attributes[:'grant_type'] if attributes[:'grant_type']
      self.grant_type = "CLIENT_CREDENTIALS" if grant_type.nil? && !attributes.key?(:'grantType') && !attributes.key?(:'grant_type') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] grant_type Object to be assigned
    def grant_type=(grant_type)
      raise "Invalid value for 'grant_type': this must be one of the values in GRANT_TYPE_ENUM." if grant_type && !GRANT_TYPE_ENUM.include?(grant_type)

      @grant_type = grant_type
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        model_type == other.model_type &&
        key == other.key &&
        model_version == other.model_version &&
        parent_ref == other.parent_ref &&
        name == other.name &&
        description == other.description &&
        object_version == other.object_version &&
        object_status == other.object_status &&
        identifier == other.identifier &&
        primary_schema == other.primary_schema &&
        connection_properties == other.connection_properties &&
        is_default == other.is_default &&
        metadata == other.metadata &&
        access_token_url == other.access_token_url &&
        client_id == other.client_id &&
        client_secret == other.client_secret &&
        scope == other.scope &&
        grant_type == other.grant_type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [model_type, key, model_version, parent_ref, name, description, object_version, object_status, identifier, primary_schema, connection_properties, is_default, metadata, access_token_url, client_id, client_secret, scope, grant_type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
