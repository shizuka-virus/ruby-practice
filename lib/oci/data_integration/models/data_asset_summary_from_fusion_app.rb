# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200430
require 'date'
require_relative 'data_asset_summary'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary details for the FUSION_APP data asset type.
  class DataIntegration::Models::DataAssetSummaryFromFusionApp < DataIntegration::Models::DataAssetSummary
    # The generic JDBC host name.
    # @return [String]
    attr_accessor :service_url

    # @return [OCI::DataIntegration::Models::ConnectionSummary]
    attr_accessor :default_connection

    # @return [OCI::DataIntegration::Models::DataAssetSummaryFromObjectStorage]
    attr_accessor :staging_data_asset

    # @return [OCI::DataIntegration::Models::ConnectionSummaryFromObjectStorage]
    attr_accessor :staging_connection

    # @return [OCI::DataIntegration::Models::Schema]
    attr_accessor :bucket_schema

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'modelType',
        'key': :'key',
        'model_version': :'modelVersion',
        'name': :'name',
        'description': :'description',
        'object_status': :'objectStatus',
        'identifier': :'identifier',
        'external_key': :'externalKey',
        'asset_properties': :'assetProperties',
        'native_type_system': :'nativeTypeSystem',
        'object_version': :'objectVersion',
        'parent_ref': :'parentRef',
        'metadata': :'metadata',
        'service_url': :'serviceUrl',
        'default_connection': :'defaultConnection',
        'staging_data_asset': :'stagingDataAsset',
        'staging_connection': :'stagingConnection',
        'bucket_schema': :'bucketSchema'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'String',
        'key': :'String',
        'model_version': :'String',
        'name': :'String',
        'description': :'String',
        'object_status': :'Integer',
        'identifier': :'String',
        'external_key': :'String',
        'asset_properties': :'Hash<String, String>',
        'native_type_system': :'OCI::DataIntegration::Models::TypeSystem',
        'object_version': :'Integer',
        'parent_ref': :'OCI::DataIntegration::Models::ParentReference',
        'metadata': :'OCI::DataIntegration::Models::ObjectMetadata',
        'service_url': :'String',
        'default_connection': :'OCI::DataIntegration::Models::ConnectionSummary',
        'staging_data_asset': :'OCI::DataIntegration::Models::DataAssetSummaryFromObjectStorage',
        'staging_connection': :'OCI::DataIntegration::Models::ConnectionSummaryFromObjectStorage',
        'bucket_schema': :'OCI::DataIntegration::Models::Schema'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :key The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#key #key} proprety
    # @option attributes [String] :model_version The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#model_version #model_version} proprety
    # @option attributes [String] :name The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#name #name} proprety
    # @option attributes [String] :description The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#description #description} proprety
    # @option attributes [Integer] :object_status The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#object_status #object_status} proprety
    # @option attributes [String] :identifier The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#identifier #identifier} proprety
    # @option attributes [String] :external_key The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#external_key #external_key} proprety
    # @option attributes [Hash<String, String>] :asset_properties The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#asset_properties #asset_properties} proprety
    # @option attributes [OCI::DataIntegration::Models::TypeSystem] :native_type_system The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#native_type_system #native_type_system} proprety
    # @option attributes [Integer] :object_version The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#object_version #object_version} proprety
    # @option attributes [OCI::DataIntegration::Models::ParentReference] :parent_ref The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#parent_ref #parent_ref} proprety
    # @option attributes [OCI::DataIntegration::Models::ObjectMetadata] :metadata The value to assign to the {OCI::DataIntegration::Models::DataAssetSummary#metadata #metadata} proprety
    # @option attributes [String] :service_url The value to assign to the {#service_url} property
    # @option attributes [OCI::DataIntegration::Models::ConnectionSummary] :default_connection The value to assign to the {#default_connection} property
    # @option attributes [OCI::DataIntegration::Models::DataAssetSummaryFromObjectStorage] :staging_data_asset The value to assign to the {#staging_data_asset} property
    # @option attributes [OCI::DataIntegration::Models::ConnectionSummaryFromObjectStorage] :staging_connection The value to assign to the {#staging_connection} property
    # @option attributes [OCI::DataIntegration::Models::Schema] :bucket_schema The value to assign to the {#bucket_schema} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['modelType'] = 'FUSION_APP_DATA_ASSET'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.service_url = attributes[:'serviceUrl'] if attributes[:'serviceUrl']

      raise 'You cannot provide both :serviceUrl and :service_url' if attributes.key?(:'serviceUrl') && attributes.key?(:'service_url')

      self.service_url = attributes[:'service_url'] if attributes[:'service_url']

      self.default_connection = attributes[:'defaultConnection'] if attributes[:'defaultConnection']

      raise 'You cannot provide both :defaultConnection and :default_connection' if attributes.key?(:'defaultConnection') && attributes.key?(:'default_connection')

      self.default_connection = attributes[:'default_connection'] if attributes[:'default_connection']

      self.staging_data_asset = attributes[:'stagingDataAsset'] if attributes[:'stagingDataAsset']

      raise 'You cannot provide both :stagingDataAsset and :staging_data_asset' if attributes.key?(:'stagingDataAsset') && attributes.key?(:'staging_data_asset')

      self.staging_data_asset = attributes[:'staging_data_asset'] if attributes[:'staging_data_asset']

      self.staging_connection = attributes[:'stagingConnection'] if attributes[:'stagingConnection']

      raise 'You cannot provide both :stagingConnection and :staging_connection' if attributes.key?(:'stagingConnection') && attributes.key?(:'staging_connection')

      self.staging_connection = attributes[:'staging_connection'] if attributes[:'staging_connection']

      self.bucket_schema = attributes[:'bucketSchema'] if attributes[:'bucketSchema']

      raise 'You cannot provide both :bucketSchema and :bucket_schema' if attributes.key?(:'bucketSchema') && attributes.key?(:'bucket_schema')

      self.bucket_schema = attributes[:'bucket_schema'] if attributes[:'bucket_schema']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        model_type == other.model_type &&
        key == other.key &&
        model_version == other.model_version &&
        name == other.name &&
        description == other.description &&
        object_status == other.object_status &&
        identifier == other.identifier &&
        external_key == other.external_key &&
        asset_properties == other.asset_properties &&
        native_type_system == other.native_type_system &&
        object_version == other.object_version &&
        parent_ref == other.parent_ref &&
        metadata == other.metadata &&
        service_url == other.service_url &&
        default_connection == other.default_connection &&
        staging_data_asset == other.staging_data_asset &&
        staging_connection == other.staging_connection &&
        bucket_schema == other.bucket_schema
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [model_type, key, model_version, name, description, object_status, identifier, external_key, asset_properties, native_type_system, object_version, parent_ref, metadata, service_url, default_connection, staging_data_asset, staging_connection, bucket_schema].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
