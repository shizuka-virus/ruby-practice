# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20181201
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A data discovery job. It helps track job's metadata as well as result statistics.
  class DataSafe::Models::DiscoveryJob
    DISCOVERY_TYPE_ENUM = [
      DISCOVERY_TYPE_ALL = 'ALL'.freeze,
      DISCOVERY_TYPE_NEW = 'NEW'.freeze,
      DISCOVERY_TYPE_MODIFIED = 'MODIFIED'.freeze,
      DISCOVERY_TYPE_DELETED = 'DELETED'.freeze,
      DISCOVERY_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the discovery job.
    # @return [String]
    attr_accessor :id

    # **[Required]** The type of the discovery job. It defines the job's scope.
    # NEW identifies new sensitive columns in the target database that are not in the sensitive data model.
    # DELETED identifies columns that are present in the sensitive data model but have been deleted from the target database.
    # MODIFIED identifies columns that are present in the target database as well as the sensitive data model but some of their attributes have been modified.
    # ALL covers all the above three scenarios and reports new, deleted and modified columns.
    #
    # @return [String]
    attr_reader :discovery_type

    # **[Required]** The display name of the discovery job.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The OCID of the compartment that contains the discovery job.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The date and time the discovery job started, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
    # @return [DateTime]
    attr_accessor :time_started

    # **[Required]** The date and time the discovery job finished, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339)..
    # @return [DateTime]
    attr_accessor :time_finished

    # **[Required]** The current state of the discovery job.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** The OCID of the sensitive data model associated with the discovery job.
    # @return [String]
    attr_accessor :sensitive_data_model_id

    # **[Required]** The OCID of the target database associated with the discovery job.
    # @return [String]
    attr_accessor :target_id

    # The schemas used for data discovery.
    # @return [Array<String>]
    attr_accessor :schemas_for_discovery

    # The OCIDs of the sensitive types used for data discovery.
    # @return [Array<String>]
    attr_accessor :sensitive_type_ids_for_discovery

    # **[Required]** Indicates if the discovery job should collect and store sample data values for the discovered columns.
    # Sample data helps review the discovered columns and ensure that they actually contain sensitive data.
    # As it collects original data from the target database, it's disabled by default and should be used only
    # if it's acceptable to store sample data in Data Safe's repository in Oracle Cloud. Note that sample data
    # values are not collected for columns with the following data types: LONG, LOB, RAW, XMLTYPE and BFILE.
    #
    # @return [BOOLEAN]
    attr_accessor :is_sample_data_collection_enabled

    # **[Required]** Indicates if the discovery job should identify potential application-level (non-dictionary) referential
    # relationships between columns. Note that data discovery automatically identifies and adds database-level (dictionary-defined)
    # relationships. This option helps identify application-level relationships that are not defined in the database dictionary,
    # which in turn, helps identify additional sensitive columns and preserve referential integrity during data masking.
    # It's disabled by default and should be used only if there is a need to identify application-level relationships.
    #
    # @return [BOOLEAN]
    attr_accessor :is_app_defined_relation_discovery_enabled

    # **[Required]** Indicates if all the schemas in the associated target database are used for data discovery.
    # If it is set to true, sensitive data is discovered in all schemas (except for schemas maintained by Oracle).
    #
    # @return [BOOLEAN]
    attr_accessor :is_include_all_schemas

    # **[Required]** Indicates if all the existing sensitive types are used for data discovery. If it's set to true, the
    # sensitiveTypeIdsForDiscovery attribute is ignored and all sensitive types are used.
    #
    # @return [BOOLEAN]
    attr_accessor :is_include_all_sensitive_types

    # **[Required]** The total number of schemas scanned by the discovery job.
    # @return [Integer]
    attr_accessor :total_schemas_scanned

    # **[Required]** The total number of objects (tables and editioning views) scanned by the discovery job.
    # @return [Integer]
    attr_accessor :total_objects_scanned

    # **[Required]** The total number of columns scanned by the discovery job.
    # @return [Integer]
    attr_accessor :total_columns_scanned

    # **[Required]** The total number of new sensitive columns identified by the discovery job.
    # @return [Integer]
    attr_accessor :total_new_sensitive_columns

    # **[Required]** The total number of modified sensitive columns identified by the discovery job.
    # @return [Integer]
    attr_accessor :total_modified_sensitive_columns

    # **[Required]** The total number of deleted sensitive columns identified by the discovery job.
    # @return [Integer]
    attr_accessor :total_deleted_sensitive_columns

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'discovery_type': :'discoveryType',
        'display_name': :'displayName',
        'compartment_id': :'compartmentId',
        'time_started': :'timeStarted',
        'time_finished': :'timeFinished',
        'lifecycle_state': :'lifecycleState',
        'sensitive_data_model_id': :'sensitiveDataModelId',
        'target_id': :'targetId',
        'schemas_for_discovery': :'schemasForDiscovery',
        'sensitive_type_ids_for_discovery': :'sensitiveTypeIdsForDiscovery',
        'is_sample_data_collection_enabled': :'isSampleDataCollectionEnabled',
        'is_app_defined_relation_discovery_enabled': :'isAppDefinedRelationDiscoveryEnabled',
        'is_include_all_schemas': :'isIncludeAllSchemas',
        'is_include_all_sensitive_types': :'isIncludeAllSensitiveTypes',
        'total_schemas_scanned': :'totalSchemasScanned',
        'total_objects_scanned': :'totalObjectsScanned',
        'total_columns_scanned': :'totalColumnsScanned',
        'total_new_sensitive_columns': :'totalNewSensitiveColumns',
        'total_modified_sensitive_columns': :'totalModifiedSensitiveColumns',
        'total_deleted_sensitive_columns': :'totalDeletedSensitiveColumns',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'discovery_type': :'String',
        'display_name': :'String',
        'compartment_id': :'String',
        'time_started': :'DateTime',
        'time_finished': :'DateTime',
        'lifecycle_state': :'String',
        'sensitive_data_model_id': :'String',
        'target_id': :'String',
        'schemas_for_discovery': :'Array<String>',
        'sensitive_type_ids_for_discovery': :'Array<String>',
        'is_sample_data_collection_enabled': :'BOOLEAN',
        'is_app_defined_relation_discovery_enabled': :'BOOLEAN',
        'is_include_all_schemas': :'BOOLEAN',
        'is_include_all_sensitive_types': :'BOOLEAN',
        'total_schemas_scanned': :'Integer',
        'total_objects_scanned': :'Integer',
        'total_columns_scanned': :'Integer',
        'total_new_sensitive_columns': :'Integer',
        'total_modified_sensitive_columns': :'Integer',
        'total_deleted_sensitive_columns': :'Integer',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :discovery_type The value to assign to the {#discovery_type} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_finished The value to assign to the {#time_finished} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :sensitive_data_model_id The value to assign to the {#sensitive_data_model_id} property
    # @option attributes [String] :target_id The value to assign to the {#target_id} property
    # @option attributes [Array<String>] :schemas_for_discovery The value to assign to the {#schemas_for_discovery} property
    # @option attributes [Array<String>] :sensitive_type_ids_for_discovery The value to assign to the {#sensitive_type_ids_for_discovery} property
    # @option attributes [BOOLEAN] :is_sample_data_collection_enabled The value to assign to the {#is_sample_data_collection_enabled} property
    # @option attributes [BOOLEAN] :is_app_defined_relation_discovery_enabled The value to assign to the {#is_app_defined_relation_discovery_enabled} property
    # @option attributes [BOOLEAN] :is_include_all_schemas The value to assign to the {#is_include_all_schemas} property
    # @option attributes [BOOLEAN] :is_include_all_sensitive_types The value to assign to the {#is_include_all_sensitive_types} property
    # @option attributes [Integer] :total_schemas_scanned The value to assign to the {#total_schemas_scanned} property
    # @option attributes [Integer] :total_objects_scanned The value to assign to the {#total_objects_scanned} property
    # @option attributes [Integer] :total_columns_scanned The value to assign to the {#total_columns_scanned} property
    # @option attributes [Integer] :total_new_sensitive_columns The value to assign to the {#total_new_sensitive_columns} property
    # @option attributes [Integer] :total_modified_sensitive_columns The value to assign to the {#total_modified_sensitive_columns} property
    # @option attributes [Integer] :total_deleted_sensitive_columns The value to assign to the {#total_deleted_sensitive_columns} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.discovery_type = attributes[:'discoveryType'] if attributes[:'discoveryType']

      raise 'You cannot provide both :discoveryType and :discovery_type' if attributes.key?(:'discoveryType') && attributes.key?(:'discovery_type')

      self.discovery_type = attributes[:'discovery_type'] if attributes[:'discovery_type']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_finished = attributes[:'timeFinished'] if attributes[:'timeFinished']

      raise 'You cannot provide both :timeFinished and :time_finished' if attributes.key?(:'timeFinished') && attributes.key?(:'time_finished')

      self.time_finished = attributes[:'time_finished'] if attributes[:'time_finished']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.sensitive_data_model_id = attributes[:'sensitiveDataModelId'] if attributes[:'sensitiveDataModelId']

      raise 'You cannot provide both :sensitiveDataModelId and :sensitive_data_model_id' if attributes.key?(:'sensitiveDataModelId') && attributes.key?(:'sensitive_data_model_id')

      self.sensitive_data_model_id = attributes[:'sensitive_data_model_id'] if attributes[:'sensitive_data_model_id']

      self.target_id = attributes[:'targetId'] if attributes[:'targetId']

      raise 'You cannot provide both :targetId and :target_id' if attributes.key?(:'targetId') && attributes.key?(:'target_id')

      self.target_id = attributes[:'target_id'] if attributes[:'target_id']

      self.schemas_for_discovery = attributes[:'schemasForDiscovery'] if attributes[:'schemasForDiscovery']

      raise 'You cannot provide both :schemasForDiscovery and :schemas_for_discovery' if attributes.key?(:'schemasForDiscovery') && attributes.key?(:'schemas_for_discovery')

      self.schemas_for_discovery = attributes[:'schemas_for_discovery'] if attributes[:'schemas_for_discovery']

      self.sensitive_type_ids_for_discovery = attributes[:'sensitiveTypeIdsForDiscovery'] if attributes[:'sensitiveTypeIdsForDiscovery']

      raise 'You cannot provide both :sensitiveTypeIdsForDiscovery and :sensitive_type_ids_for_discovery' if attributes.key?(:'sensitiveTypeIdsForDiscovery') && attributes.key?(:'sensitive_type_ids_for_discovery')

      self.sensitive_type_ids_for_discovery = attributes[:'sensitive_type_ids_for_discovery'] if attributes[:'sensitive_type_ids_for_discovery']

      self.is_sample_data_collection_enabled = attributes[:'isSampleDataCollectionEnabled'] unless attributes[:'isSampleDataCollectionEnabled'].nil?

      raise 'You cannot provide both :isSampleDataCollectionEnabled and :is_sample_data_collection_enabled' if attributes.key?(:'isSampleDataCollectionEnabled') && attributes.key?(:'is_sample_data_collection_enabled')

      self.is_sample_data_collection_enabled = attributes[:'is_sample_data_collection_enabled'] unless attributes[:'is_sample_data_collection_enabled'].nil?

      self.is_app_defined_relation_discovery_enabled = attributes[:'isAppDefinedRelationDiscoveryEnabled'] unless attributes[:'isAppDefinedRelationDiscoveryEnabled'].nil?

      raise 'You cannot provide both :isAppDefinedRelationDiscoveryEnabled and :is_app_defined_relation_discovery_enabled' if attributes.key?(:'isAppDefinedRelationDiscoveryEnabled') && attributes.key?(:'is_app_defined_relation_discovery_enabled')

      self.is_app_defined_relation_discovery_enabled = attributes[:'is_app_defined_relation_discovery_enabled'] unless attributes[:'is_app_defined_relation_discovery_enabled'].nil?

      self.is_include_all_schemas = attributes[:'isIncludeAllSchemas'] unless attributes[:'isIncludeAllSchemas'].nil?

      raise 'You cannot provide both :isIncludeAllSchemas and :is_include_all_schemas' if attributes.key?(:'isIncludeAllSchemas') && attributes.key?(:'is_include_all_schemas')

      self.is_include_all_schemas = attributes[:'is_include_all_schemas'] unless attributes[:'is_include_all_schemas'].nil?

      self.is_include_all_sensitive_types = attributes[:'isIncludeAllSensitiveTypes'] unless attributes[:'isIncludeAllSensitiveTypes'].nil?

      raise 'You cannot provide both :isIncludeAllSensitiveTypes and :is_include_all_sensitive_types' if attributes.key?(:'isIncludeAllSensitiveTypes') && attributes.key?(:'is_include_all_sensitive_types')

      self.is_include_all_sensitive_types = attributes[:'is_include_all_sensitive_types'] unless attributes[:'is_include_all_sensitive_types'].nil?

      self.total_schemas_scanned = attributes[:'totalSchemasScanned'] if attributes[:'totalSchemasScanned']

      raise 'You cannot provide both :totalSchemasScanned and :total_schemas_scanned' if attributes.key?(:'totalSchemasScanned') && attributes.key?(:'total_schemas_scanned')

      self.total_schemas_scanned = attributes[:'total_schemas_scanned'] if attributes[:'total_schemas_scanned']

      self.total_objects_scanned = attributes[:'totalObjectsScanned'] if attributes[:'totalObjectsScanned']

      raise 'You cannot provide both :totalObjectsScanned and :total_objects_scanned' if attributes.key?(:'totalObjectsScanned') && attributes.key?(:'total_objects_scanned')

      self.total_objects_scanned = attributes[:'total_objects_scanned'] if attributes[:'total_objects_scanned']

      self.total_columns_scanned = attributes[:'totalColumnsScanned'] if attributes[:'totalColumnsScanned']

      raise 'You cannot provide both :totalColumnsScanned and :total_columns_scanned' if attributes.key?(:'totalColumnsScanned') && attributes.key?(:'total_columns_scanned')

      self.total_columns_scanned = attributes[:'total_columns_scanned'] if attributes[:'total_columns_scanned']

      self.total_new_sensitive_columns = attributes[:'totalNewSensitiveColumns'] if attributes[:'totalNewSensitiveColumns']

      raise 'You cannot provide both :totalNewSensitiveColumns and :total_new_sensitive_columns' if attributes.key?(:'totalNewSensitiveColumns') && attributes.key?(:'total_new_sensitive_columns')

      self.total_new_sensitive_columns = attributes[:'total_new_sensitive_columns'] if attributes[:'total_new_sensitive_columns']

      self.total_modified_sensitive_columns = attributes[:'totalModifiedSensitiveColumns'] if attributes[:'totalModifiedSensitiveColumns']

      raise 'You cannot provide both :totalModifiedSensitiveColumns and :total_modified_sensitive_columns' if attributes.key?(:'totalModifiedSensitiveColumns') && attributes.key?(:'total_modified_sensitive_columns')

      self.total_modified_sensitive_columns = attributes[:'total_modified_sensitive_columns'] if attributes[:'total_modified_sensitive_columns']

      self.total_deleted_sensitive_columns = attributes[:'totalDeletedSensitiveColumns'] if attributes[:'totalDeletedSensitiveColumns']

      raise 'You cannot provide both :totalDeletedSensitiveColumns and :total_deleted_sensitive_columns' if attributes.key?(:'totalDeletedSensitiveColumns') && attributes.key?(:'total_deleted_sensitive_columns')

      self.total_deleted_sensitive_columns = attributes[:'total_deleted_sensitive_columns'] if attributes[:'total_deleted_sensitive_columns']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] discovery_type Object to be assigned
    def discovery_type=(discovery_type)
      # rubocop:disable Style/ConditionalAssignment
      if discovery_type && !DISCOVERY_TYPE_ENUM.include?(discovery_type)
        OCI.logger.debug("Unknown value for 'discovery_type' [" + discovery_type + "]. Mapping to 'DISCOVERY_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @discovery_type = DISCOVERY_TYPE_UNKNOWN_ENUM_VALUE
      else
        @discovery_type = discovery_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        discovery_type == other.discovery_type &&
        display_name == other.display_name &&
        compartment_id == other.compartment_id &&
        time_started == other.time_started &&
        time_finished == other.time_finished &&
        lifecycle_state == other.lifecycle_state &&
        sensitive_data_model_id == other.sensitive_data_model_id &&
        target_id == other.target_id &&
        schemas_for_discovery == other.schemas_for_discovery &&
        sensitive_type_ids_for_discovery == other.sensitive_type_ids_for_discovery &&
        is_sample_data_collection_enabled == other.is_sample_data_collection_enabled &&
        is_app_defined_relation_discovery_enabled == other.is_app_defined_relation_discovery_enabled &&
        is_include_all_schemas == other.is_include_all_schemas &&
        is_include_all_sensitive_types == other.is_include_all_sensitive_types &&
        total_schemas_scanned == other.total_schemas_scanned &&
        total_objects_scanned == other.total_objects_scanned &&
        total_columns_scanned == other.total_columns_scanned &&
        total_new_sensitive_columns == other.total_new_sensitive_columns &&
        total_modified_sensitive_columns == other.total_modified_sensitive_columns &&
        total_deleted_sensitive_columns == other.total_deleted_sensitive_columns &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, discovery_type, display_name, compartment_id, time_started, time_finished, lifecycle_state, sensitive_data_model_id, target_id, schemas_for_discovery, sensitive_type_ids_for_discovery, is_sample_data_collection_enabled, is_app_defined_relation_discovery_enabled, is_include_all_schemas, is_include_all_sensitive_types, total_schemas_scanned, total_objects_scanned, total_columns_scanned, total_new_sensitive_columns, total_modified_sensitive_columns, total_deleted_sensitive_columns, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
