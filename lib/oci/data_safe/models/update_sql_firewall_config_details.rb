# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20181201
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details to update the SQL Firewall config.
  #
  class DataSafe::Models::UpdateSqlFirewallConfigDetails
    STATUS_ENUM = [
      STATUS_ENABLED = 'ENABLED'.freeze,
      STATUS_DISABLED = 'DISABLED'.freeze
    ].freeze

    VIOLATION_LOG_AUTO_PURGE_ENUM = [
      VIOLATION_LOG_AUTO_PURGE_ENABLED = 'ENABLED'.freeze,
      VIOLATION_LOG_AUTO_PURGE_DISABLED = 'DISABLED'.freeze
    ].freeze

    EXCLUDE_JOB_ENUM = [
      EXCLUDE_JOB_EXCLUDED = 'EXCLUDED'.freeze,
      EXCLUDE_JOB_INCLUDED = 'INCLUDED'.freeze
    ].freeze

    # Specifies whether the firewall is enabled or disabled on the target database.
    # @return [String]
    attr_reader :status

    # Specifies whether Data Safe should automatically purge the violation logs
    # from the database after collecting the violation logs and persisting on Data Safe.
    #
    # @return [String]
    attr_reader :violation_log_auto_purge

    # Specifies whether the firewall should include or exclude the database internal job activities.
    # @return [String]
    attr_reader :exclude_job

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'status': :'status',
        'violation_log_auto_purge': :'violationLogAutoPurge',
        'exclude_job': :'excludeJob'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'status': :'String',
        'violation_log_auto_purge': :'String',
        'exclude_job': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :violation_log_auto_purge The value to assign to the {#violation_log_auto_purge} property
    # @option attributes [String] :exclude_job The value to assign to the {#exclude_job} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.status = attributes[:'status'] if attributes[:'status']

      self.violation_log_auto_purge = attributes[:'violationLogAutoPurge'] if attributes[:'violationLogAutoPurge']

      raise 'You cannot provide both :violationLogAutoPurge and :violation_log_auto_purge' if attributes.key?(:'violationLogAutoPurge') && attributes.key?(:'violation_log_auto_purge')

      self.violation_log_auto_purge = attributes[:'violation_log_auto_purge'] if attributes[:'violation_log_auto_purge']

      self.exclude_job = attributes[:'excludeJob'] if attributes[:'excludeJob']

      raise 'You cannot provide both :excludeJob and :exclude_job' if attributes.key?(:'excludeJob') && attributes.key?(:'exclude_job')

      self.exclude_job = attributes[:'exclude_job'] if attributes[:'exclude_job']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      raise "Invalid value for 'status': this must be one of the values in STATUS_ENUM." if status && !STATUS_ENUM.include?(status)

      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] violation_log_auto_purge Object to be assigned
    def violation_log_auto_purge=(violation_log_auto_purge)
      raise "Invalid value for 'violation_log_auto_purge': this must be one of the values in VIOLATION_LOG_AUTO_PURGE_ENUM." if violation_log_auto_purge && !VIOLATION_LOG_AUTO_PURGE_ENUM.include?(violation_log_auto_purge)

      @violation_log_auto_purge = violation_log_auto_purge
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] exclude_job Object to be assigned
    def exclude_job=(exclude_job)
      raise "Invalid value for 'exclude_job': this must be one of the values in EXCLUDE_JOB_ENUM." if exclude_job && !EXCLUDE_JOB_ENUM.include?(exclude_job)

      @exclude_job = exclude_job
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        status == other.status &&
        violation_log_auto_purge == other.violation_log_auto_purge &&
        exclude_job == other.exclude_job
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [status, violation_log_auto_purge, exclude_job].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
