# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20181201
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The resource represents the SQL violations collected from the target database by Oracle Data Safe.
  class DataSafe::Models::SqlFirewallViolationSummary
    SQL_LEVEL_ENUM = [
      SQL_LEVEL_USER_ISSUED_SQL = 'USER_ISSUED_SQL'.freeze,
      SQL_LEVEL_ALL_SQL = 'ALL_SQL'.freeze,
      SQL_LEVEL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    VIOLATION_ACTION_ENUM = [
      VIOLATION_ACTION_BLOCKED = 'BLOCKED'.freeze,
      VIOLATION_ACTION_ALLOWED = 'ALLOWED'.freeze,
      VIOLATION_ACTION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the SQL violation.
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the compartment containing the SQL violation.
    # @return [String]
    attr_accessor :compartment_id

    # The name of the database user.
    # @return [String]
    attr_accessor :db_user_name

    # **[Required]** The OCID of the target database.
    # @return [String]
    attr_accessor :target_id

    # **[Required]** The name of the target database.
    # @return [String]
    attr_accessor :target_name

    # **[Required]** The time of the SQL violation occurrence in the target database.
    # @return [DateTime]
    attr_accessor :operation_time

    # **[Required]** The timestamp when this SQL violation was collected from the target database by Data Safe.
    # @return [DateTime]
    attr_accessor :time_collected

    # The name of the operating system user for the database session.
    # @return [String]
    attr_accessor :client_os_user_name

    # The name of the action executed by the user on the target database. For example, ALTER, CREATE, DROP.
    # @return [String]
    attr_accessor :operation

    # The SQL text caught by the firewall.
    # @return [String]
    attr_accessor :sql_text

    # The objects accessed by the SQL.
    # @return [String]
    attr_accessor :sql_accessed_objects

    # The name of the user that SQL was executed as.
    # @return [String]
    attr_accessor :current_db_user_name

    # Specifies the level of SQL for this violation.
    # USER_ISSUED_SQL - User issued SQL statements only.
    # ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
    #
    # @return [String]
    attr_reader :sql_level

    # The IP address of the host machine from which the session was generated.
    # @return [String]
    attr_accessor :client_ip

    # The application from which the SQL violation was generated. Examples include SQL Plus or SQL Developer.
    # @return [String]
    attr_accessor :client_program

    # Indicates whether SQL or context violation.
    # @return [String]
    attr_accessor :violation_cause

    # **[Required]** The action taken for this SQL violation.
    # @return [String]
    attr_reader :violation_action

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'db_user_name': :'dbUserName',
        'target_id': :'targetId',
        'target_name': :'targetName',
        'operation_time': :'operationTime',
        'time_collected': :'timeCollected',
        'client_os_user_name': :'clientOsUserName',
        'operation': :'operation',
        'sql_text': :'sqlText',
        'sql_accessed_objects': :'sqlAccessedObjects',
        'current_db_user_name': :'currentDbUserName',
        'sql_level': :'sqlLevel',
        'client_ip': :'clientIp',
        'client_program': :'clientProgram',
        'violation_cause': :'violationCause',
        'violation_action': :'violationAction'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'db_user_name': :'String',
        'target_id': :'String',
        'target_name': :'String',
        'operation_time': :'DateTime',
        'time_collected': :'DateTime',
        'client_os_user_name': :'String',
        'operation': :'String',
        'sql_text': :'String',
        'sql_accessed_objects': :'String',
        'current_db_user_name': :'String',
        'sql_level': :'String',
        'client_ip': :'String',
        'client_program': :'String',
        'violation_cause': :'String',
        'violation_action': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :db_user_name The value to assign to the {#db_user_name} property
    # @option attributes [String] :target_id The value to assign to the {#target_id} property
    # @option attributes [String] :target_name The value to assign to the {#target_name} property
    # @option attributes [DateTime] :operation_time The value to assign to the {#operation_time} property
    # @option attributes [DateTime] :time_collected The value to assign to the {#time_collected} property
    # @option attributes [String] :client_os_user_name The value to assign to the {#client_os_user_name} property
    # @option attributes [String] :operation The value to assign to the {#operation} property
    # @option attributes [String] :sql_text The value to assign to the {#sql_text} property
    # @option attributes [String] :sql_accessed_objects The value to assign to the {#sql_accessed_objects} property
    # @option attributes [String] :current_db_user_name The value to assign to the {#current_db_user_name} property
    # @option attributes [String] :sql_level The value to assign to the {#sql_level} property
    # @option attributes [String] :client_ip The value to assign to the {#client_ip} property
    # @option attributes [String] :client_program The value to assign to the {#client_program} property
    # @option attributes [String] :violation_cause The value to assign to the {#violation_cause} property
    # @option attributes [String] :violation_action The value to assign to the {#violation_action} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.db_user_name = attributes[:'dbUserName'] if attributes[:'dbUserName']

      raise 'You cannot provide both :dbUserName and :db_user_name' if attributes.key?(:'dbUserName') && attributes.key?(:'db_user_name')

      self.db_user_name = attributes[:'db_user_name'] if attributes[:'db_user_name']

      self.target_id = attributes[:'targetId'] if attributes[:'targetId']

      raise 'You cannot provide both :targetId and :target_id' if attributes.key?(:'targetId') && attributes.key?(:'target_id')

      self.target_id = attributes[:'target_id'] if attributes[:'target_id']

      self.target_name = attributes[:'targetName'] if attributes[:'targetName']

      raise 'You cannot provide both :targetName and :target_name' if attributes.key?(:'targetName') && attributes.key?(:'target_name')

      self.target_name = attributes[:'target_name'] if attributes[:'target_name']

      self.operation_time = attributes[:'operationTime'] if attributes[:'operationTime']

      raise 'You cannot provide both :operationTime and :operation_time' if attributes.key?(:'operationTime') && attributes.key?(:'operation_time')

      self.operation_time = attributes[:'operation_time'] if attributes[:'operation_time']

      self.time_collected = attributes[:'timeCollected'] if attributes[:'timeCollected']

      raise 'You cannot provide both :timeCollected and :time_collected' if attributes.key?(:'timeCollected') && attributes.key?(:'time_collected')

      self.time_collected = attributes[:'time_collected'] if attributes[:'time_collected']

      self.client_os_user_name = attributes[:'clientOsUserName'] if attributes[:'clientOsUserName']

      raise 'You cannot provide both :clientOsUserName and :client_os_user_name' if attributes.key?(:'clientOsUserName') && attributes.key?(:'client_os_user_name')

      self.client_os_user_name = attributes[:'client_os_user_name'] if attributes[:'client_os_user_name']

      self.operation = attributes[:'operation'] if attributes[:'operation']

      self.sql_text = attributes[:'sqlText'] if attributes[:'sqlText']

      raise 'You cannot provide both :sqlText and :sql_text' if attributes.key?(:'sqlText') && attributes.key?(:'sql_text')

      self.sql_text = attributes[:'sql_text'] if attributes[:'sql_text']

      self.sql_accessed_objects = attributes[:'sqlAccessedObjects'] if attributes[:'sqlAccessedObjects']

      raise 'You cannot provide both :sqlAccessedObjects and :sql_accessed_objects' if attributes.key?(:'sqlAccessedObjects') && attributes.key?(:'sql_accessed_objects')

      self.sql_accessed_objects = attributes[:'sql_accessed_objects'] if attributes[:'sql_accessed_objects']

      self.current_db_user_name = attributes[:'currentDbUserName'] if attributes[:'currentDbUserName']

      raise 'You cannot provide both :currentDbUserName and :current_db_user_name' if attributes.key?(:'currentDbUserName') && attributes.key?(:'current_db_user_name')

      self.current_db_user_name = attributes[:'current_db_user_name'] if attributes[:'current_db_user_name']

      self.sql_level = attributes[:'sqlLevel'] if attributes[:'sqlLevel']

      raise 'You cannot provide both :sqlLevel and :sql_level' if attributes.key?(:'sqlLevel') && attributes.key?(:'sql_level')

      self.sql_level = attributes[:'sql_level'] if attributes[:'sql_level']

      self.client_ip = attributes[:'clientIp'] if attributes[:'clientIp']

      raise 'You cannot provide both :clientIp and :client_ip' if attributes.key?(:'clientIp') && attributes.key?(:'client_ip')

      self.client_ip = attributes[:'client_ip'] if attributes[:'client_ip']

      self.client_program = attributes[:'clientProgram'] if attributes[:'clientProgram']

      raise 'You cannot provide both :clientProgram and :client_program' if attributes.key?(:'clientProgram') && attributes.key?(:'client_program')

      self.client_program = attributes[:'client_program'] if attributes[:'client_program']

      self.violation_cause = attributes[:'violationCause'] if attributes[:'violationCause']

      raise 'You cannot provide both :violationCause and :violation_cause' if attributes.key?(:'violationCause') && attributes.key?(:'violation_cause')

      self.violation_cause = attributes[:'violation_cause'] if attributes[:'violation_cause']

      self.violation_action = attributes[:'violationAction'] if attributes[:'violationAction']

      raise 'You cannot provide both :violationAction and :violation_action' if attributes.key?(:'violationAction') && attributes.key?(:'violation_action')

      self.violation_action = attributes[:'violation_action'] if attributes[:'violation_action']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sql_level Object to be assigned
    def sql_level=(sql_level)
      # rubocop:disable Style/ConditionalAssignment
      if sql_level && !SQL_LEVEL_ENUM.include?(sql_level)
        OCI.logger.debug("Unknown value for 'sql_level' [" + sql_level + "]. Mapping to 'SQL_LEVEL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @sql_level = SQL_LEVEL_UNKNOWN_ENUM_VALUE
      else
        @sql_level = sql_level
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] violation_action Object to be assigned
    def violation_action=(violation_action)
      # rubocop:disable Style/ConditionalAssignment
      if violation_action && !VIOLATION_ACTION_ENUM.include?(violation_action)
        OCI.logger.debug("Unknown value for 'violation_action' [" + violation_action + "]. Mapping to 'VIOLATION_ACTION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @violation_action = VIOLATION_ACTION_UNKNOWN_ENUM_VALUE
      else
        @violation_action = violation_action
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        db_user_name == other.db_user_name &&
        target_id == other.target_id &&
        target_name == other.target_name &&
        operation_time == other.operation_time &&
        time_collected == other.time_collected &&
        client_os_user_name == other.client_os_user_name &&
        operation == other.operation &&
        sql_text == other.sql_text &&
        sql_accessed_objects == other.sql_accessed_objects &&
        current_db_user_name == other.current_db_user_name &&
        sql_level == other.sql_level &&
        client_ip == other.client_ip &&
        client_program == other.client_program &&
        violation_cause == other.violation_cause &&
        violation_action == other.violation_action
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, db_user_name, target_id, target_name, operation_time, time_collected, client_os_user_name, operation, sql_text, sql_accessed_objects, current_db_user_name, sql_level, client_ip, client_program, violation_cause, violation_action].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
