# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20181201
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The resource represents the audit events collected from the target database by Oracle Data Safe.
  class DataSafe::Models::AuditEventSummary
    DATABASE_TYPE_ENUM = [
      DATABASE_TYPE_DATABASE_CLOUD_SERVICE = 'DATABASE_CLOUD_SERVICE'.freeze,
      DATABASE_TYPE_AUTONOMOUS_DATABASE = 'AUTONOMOUS_DATABASE'.freeze,
      DATABASE_TYPE_INSTALLED_DATABASE = 'INSTALLED_DATABASE'.freeze,
      DATABASE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    TARGET_CLASS_ENUM = [
      TARGET_CLASS_DATABASE = 'DATABASE'.freeze,
      TARGET_CLASS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    OPERATION_STATUS_ENUM = [
      OPERATION_STATUS_SUCCESS = 'SUCCESS'.freeze,
      OPERATION_STATUS_FAILURE = 'FAILURE'.freeze,
      OPERATION_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUDIT_LOCATION_ENUM = [
      AUDIT_LOCATION_AUDIT_TABLE = 'AUDIT_TABLE'.freeze,
      AUDIT_LOCATION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUDIT_TYPE_ENUM = [
      AUDIT_TYPE_STANDARD = 'STANDARD'.freeze,
      AUDIT_TYPE_FINE_GRAINED = 'FINE_GRAINED'.freeze,
      AUDIT_TYPE_XS = 'XS'.freeze,
      AUDIT_TYPE_DATABASE_VAULT = 'DATABASE_VAULT'.freeze,
      AUDIT_TYPE_LABEL_SECURITY = 'LABEL_SECURITY'.freeze,
      AUDIT_TYPE_RMAN = 'RMAN'.freeze,
      AUDIT_TYPE_DATAPUMP = 'DATAPUMP'.freeze,
      AUDIT_TYPE_DIRECT_PATH_API = 'DIRECT_PATH_API'.freeze,
      AUDIT_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    TRAIL_SOURCE_ENUM = [
      TRAIL_SOURCE_TABLE = 'TABLE'.freeze,
      TRAIL_SOURCE_FILE = 'FILE'.freeze,
      TRAIL_SOURCE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the audit event.
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the compartment containing the audit event. The compartment is the same as that of audit profile of the target database resource.
    # @return [String]
    attr_accessor :compartment_id

    # The name of the database user whose actions were audited.
    # @return [String]
    attr_accessor :db_user_name

    # **[Required]** The OCID of the target database that was audited.
    # @return [String]
    attr_accessor :target_id

    # **[Required]** The name of the target database that was audited.
    # @return [String]
    attr_accessor :target_name

    # **[Required]** The type of the target database that was audited. Allowed values are
    #   - DATABASE_CLOUD_SERVICE - Represents Oracle Database Cloud Services.
    #   - AUTONOMOUS_DATABASE - Represents Oracle Autonomous Databases.
    #   - INSTALLED_DATABASE - Represents databases running on-premises or on compute instances.
    #
    # @return [String]
    attr_reader :database_type

    # The class of the target that was audited.
    # @return [String]
    attr_reader :target_class

    # **[Required]** The time that the audit event occurs in the target database.
    # @return [DateTime]
    attr_accessor :audit_event_time

    # **[Required]** The timestamp when this audit event was collected from the target database by Data Safe.
    # @return [DateTime]
    attr_accessor :time_collected

    # The name of the operating system user for the database session.
    # @return [String]
    attr_accessor :os_user_name

    # The name of the action executed by the user on the target database. For example ALTER, CREATE or DROP.
    # @return [String]
    attr_accessor :operation

    # Indicates whether the operation was a success or a failure.
    # @return [String]
    attr_reader :operation_status

    # The name of the detail action executed by the user on the target database. For example ALTER SEQUENCE, CREATE TRIGGER or CREATE INDEX.
    # @return [String]
    attr_accessor :event_name

    # Oracle Error code generated by the action. Zero indicates the action was successful.
    # @return [String]
    attr_accessor :error_code

    # The detailed message on why the error occurred.
    # @return [String]
    attr_accessor :error_message

    # The type of the object in the source database affected by the action. For example PL/SQL, SYNONYM or PACKAGE BODY.
    # @return [String]
    attr_accessor :object_type

    # The name of the object affected by the action.
    # @return [String]
    attr_accessor :object_name

    # The schema name of the object affected by the action.
    # @return [String]
    attr_accessor :object_owner

    # The name of the host machine from which the session was spawned.
    # @return [String]
    attr_accessor :client_hostname

    # The IP address of the host machine from which the session was spawned.
    # @return [String]
    attr_accessor :client_ip

    # The OCID of the audit trail that generated this audit event. To be noted, this field has been deprecated.
    # @return [String]
    attr_accessor :audit_trail_id

    # **[Required]** Indicates whether an alert was raised for this audit event.
    # @return [BOOLEAN]
    attr_accessor :is_alerted

    # The action taken for this audit event.
    # @return [String]
    attr_accessor :action_taken

    # The application from which the audit event was generated. For example SQL Plus or SQL Developer.
    # @return [String]
    attr_accessor :client_program

    # The SQL associated with the audit event.
    # @return [String]
    attr_accessor :command_text

    # List of bind variables associated with the command text.
    # @return [String]
    attr_accessor :command_param

    # List of all other attributes of the audit event seperated by a colon other than the one returned in audit record.
    # @return [String]
    attr_accessor :extended_event_attributes

    # The location of the audit. Currently the value is audit table.
    # @return [String]
    attr_reader :audit_location

    # The operating system terminal of the user session.
    # @return [String]
    attr_accessor :os_terminal

    # The client identifier in each Oracle session.
    # @return [String]
    attr_accessor :client_id

    # Comma-seperated list of audit policies that caused the current audit event.
    # @return [String]
    attr_accessor :audit_policies

    # The type of the auditing.
    # @return [String]
    attr_reader :audit_type

    # The secondary id assigned for the peer database registered with Data Safe.
    # @return [Integer]
    attr_accessor :peer_target_database_key

    # The underlying source of unified audit trail.
    # @return [String]
    attr_reader :trail_source

    # Unique name of the database associated to the peer target database.
    # @return [String]
    attr_accessor :database_unique_name

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'db_user_name': :'dbUserName',
        'target_id': :'targetId',
        'target_name': :'targetName',
        'database_type': :'databaseType',
        'target_class': :'targetClass',
        'audit_event_time': :'auditEventTime',
        'time_collected': :'timeCollected',
        'os_user_name': :'osUserName',
        'operation': :'operation',
        'operation_status': :'operationStatus',
        'event_name': :'eventName',
        'error_code': :'errorCode',
        'error_message': :'errorMessage',
        'object_type': :'objectType',
        'object_name': :'objectName',
        'object_owner': :'objectOwner',
        'client_hostname': :'clientHostname',
        'client_ip': :'clientIp',
        'audit_trail_id': :'auditTrailId',
        'is_alerted': :'isAlerted',
        'action_taken': :'actionTaken',
        'client_program': :'clientProgram',
        'command_text': :'commandText',
        'command_param': :'commandParam',
        'extended_event_attributes': :'extendedEventAttributes',
        'audit_location': :'auditLocation',
        'os_terminal': :'osTerminal',
        'client_id': :'clientId',
        'audit_policies': :'auditPolicies',
        'audit_type': :'auditType',
        'peer_target_database_key': :'peerTargetDatabaseKey',
        'trail_source': :'trailSource',
        'database_unique_name': :'databaseUniqueName',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'db_user_name': :'String',
        'target_id': :'String',
        'target_name': :'String',
        'database_type': :'String',
        'target_class': :'String',
        'audit_event_time': :'DateTime',
        'time_collected': :'DateTime',
        'os_user_name': :'String',
        'operation': :'String',
        'operation_status': :'String',
        'event_name': :'String',
        'error_code': :'String',
        'error_message': :'String',
        'object_type': :'String',
        'object_name': :'String',
        'object_owner': :'String',
        'client_hostname': :'String',
        'client_ip': :'String',
        'audit_trail_id': :'String',
        'is_alerted': :'BOOLEAN',
        'action_taken': :'String',
        'client_program': :'String',
        'command_text': :'String',
        'command_param': :'String',
        'extended_event_attributes': :'String',
        'audit_location': :'String',
        'os_terminal': :'String',
        'client_id': :'String',
        'audit_policies': :'String',
        'audit_type': :'String',
        'peer_target_database_key': :'Integer',
        'trail_source': :'String',
        'database_unique_name': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :db_user_name The value to assign to the {#db_user_name} property
    # @option attributes [String] :target_id The value to assign to the {#target_id} property
    # @option attributes [String] :target_name The value to assign to the {#target_name} property
    # @option attributes [String] :database_type The value to assign to the {#database_type} property
    # @option attributes [String] :target_class The value to assign to the {#target_class} property
    # @option attributes [DateTime] :audit_event_time The value to assign to the {#audit_event_time} property
    # @option attributes [DateTime] :time_collected The value to assign to the {#time_collected} property
    # @option attributes [String] :os_user_name The value to assign to the {#os_user_name} property
    # @option attributes [String] :operation The value to assign to the {#operation} property
    # @option attributes [String] :operation_status The value to assign to the {#operation_status} property
    # @option attributes [String] :event_name The value to assign to the {#event_name} property
    # @option attributes [String] :error_code The value to assign to the {#error_code} property
    # @option attributes [String] :error_message The value to assign to the {#error_message} property
    # @option attributes [String] :object_type The value to assign to the {#object_type} property
    # @option attributes [String] :object_name The value to assign to the {#object_name} property
    # @option attributes [String] :object_owner The value to assign to the {#object_owner} property
    # @option attributes [String] :client_hostname The value to assign to the {#client_hostname} property
    # @option attributes [String] :client_ip The value to assign to the {#client_ip} property
    # @option attributes [String] :audit_trail_id The value to assign to the {#audit_trail_id} property
    # @option attributes [BOOLEAN] :is_alerted The value to assign to the {#is_alerted} property
    # @option attributes [String] :action_taken The value to assign to the {#action_taken} property
    # @option attributes [String] :client_program The value to assign to the {#client_program} property
    # @option attributes [String] :command_text The value to assign to the {#command_text} property
    # @option attributes [String] :command_param The value to assign to the {#command_param} property
    # @option attributes [String] :extended_event_attributes The value to assign to the {#extended_event_attributes} property
    # @option attributes [String] :audit_location The value to assign to the {#audit_location} property
    # @option attributes [String] :os_terminal The value to assign to the {#os_terminal} property
    # @option attributes [String] :client_id The value to assign to the {#client_id} property
    # @option attributes [String] :audit_policies The value to assign to the {#audit_policies} property
    # @option attributes [String] :audit_type The value to assign to the {#audit_type} property
    # @option attributes [Integer] :peer_target_database_key The value to assign to the {#peer_target_database_key} property
    # @option attributes [String] :trail_source The value to assign to the {#trail_source} property
    # @option attributes [String] :database_unique_name The value to assign to the {#database_unique_name} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.db_user_name = attributes[:'dbUserName'] if attributes[:'dbUserName']

      raise 'You cannot provide both :dbUserName and :db_user_name' if attributes.key?(:'dbUserName') && attributes.key?(:'db_user_name')

      self.db_user_name = attributes[:'db_user_name'] if attributes[:'db_user_name']

      self.target_id = attributes[:'targetId'] if attributes[:'targetId']

      raise 'You cannot provide both :targetId and :target_id' if attributes.key?(:'targetId') && attributes.key?(:'target_id')

      self.target_id = attributes[:'target_id'] if attributes[:'target_id']

      self.target_name = attributes[:'targetName'] if attributes[:'targetName']

      raise 'You cannot provide both :targetName and :target_name' if attributes.key?(:'targetName') && attributes.key?(:'target_name')

      self.target_name = attributes[:'target_name'] if attributes[:'target_name']

      self.database_type = attributes[:'databaseType'] if attributes[:'databaseType']

      raise 'You cannot provide both :databaseType and :database_type' if attributes.key?(:'databaseType') && attributes.key?(:'database_type')

      self.database_type = attributes[:'database_type'] if attributes[:'database_type']

      self.target_class = attributes[:'targetClass'] if attributes[:'targetClass']

      raise 'You cannot provide both :targetClass and :target_class' if attributes.key?(:'targetClass') && attributes.key?(:'target_class')

      self.target_class = attributes[:'target_class'] if attributes[:'target_class']

      self.audit_event_time = attributes[:'auditEventTime'] if attributes[:'auditEventTime']

      raise 'You cannot provide both :auditEventTime and :audit_event_time' if attributes.key?(:'auditEventTime') && attributes.key?(:'audit_event_time')

      self.audit_event_time = attributes[:'audit_event_time'] if attributes[:'audit_event_time']

      self.time_collected = attributes[:'timeCollected'] if attributes[:'timeCollected']

      raise 'You cannot provide both :timeCollected and :time_collected' if attributes.key?(:'timeCollected') && attributes.key?(:'time_collected')

      self.time_collected = attributes[:'time_collected'] if attributes[:'time_collected']

      self.os_user_name = attributes[:'osUserName'] if attributes[:'osUserName']

      raise 'You cannot provide both :osUserName and :os_user_name' if attributes.key?(:'osUserName') && attributes.key?(:'os_user_name')

      self.os_user_name = attributes[:'os_user_name'] if attributes[:'os_user_name']

      self.operation = attributes[:'operation'] if attributes[:'operation']

      self.operation_status = attributes[:'operationStatus'] if attributes[:'operationStatus']

      raise 'You cannot provide both :operationStatus and :operation_status' if attributes.key?(:'operationStatus') && attributes.key?(:'operation_status')

      self.operation_status = attributes[:'operation_status'] if attributes[:'operation_status']

      self.event_name = attributes[:'eventName'] if attributes[:'eventName']

      raise 'You cannot provide both :eventName and :event_name' if attributes.key?(:'eventName') && attributes.key?(:'event_name')

      self.event_name = attributes[:'event_name'] if attributes[:'event_name']

      self.error_code = attributes[:'errorCode'] if attributes[:'errorCode']

      raise 'You cannot provide both :errorCode and :error_code' if attributes.key?(:'errorCode') && attributes.key?(:'error_code')

      self.error_code = attributes[:'error_code'] if attributes[:'error_code']

      self.error_message = attributes[:'errorMessage'] if attributes[:'errorMessage']

      raise 'You cannot provide both :errorMessage and :error_message' if attributes.key?(:'errorMessage') && attributes.key?(:'error_message')

      self.error_message = attributes[:'error_message'] if attributes[:'error_message']

      self.object_type = attributes[:'objectType'] if attributes[:'objectType']

      raise 'You cannot provide both :objectType and :object_type' if attributes.key?(:'objectType') && attributes.key?(:'object_type')

      self.object_type = attributes[:'object_type'] if attributes[:'object_type']

      self.object_name = attributes[:'objectName'] if attributes[:'objectName']

      raise 'You cannot provide both :objectName and :object_name' if attributes.key?(:'objectName') && attributes.key?(:'object_name')

      self.object_name = attributes[:'object_name'] if attributes[:'object_name']

      self.object_owner = attributes[:'objectOwner'] if attributes[:'objectOwner']

      raise 'You cannot provide both :objectOwner and :object_owner' if attributes.key?(:'objectOwner') && attributes.key?(:'object_owner')

      self.object_owner = attributes[:'object_owner'] if attributes[:'object_owner']

      self.client_hostname = attributes[:'clientHostname'] if attributes[:'clientHostname']

      raise 'You cannot provide both :clientHostname and :client_hostname' if attributes.key?(:'clientHostname') && attributes.key?(:'client_hostname')

      self.client_hostname = attributes[:'client_hostname'] if attributes[:'client_hostname']

      self.client_ip = attributes[:'clientIp'] if attributes[:'clientIp']

      raise 'You cannot provide both :clientIp and :client_ip' if attributes.key?(:'clientIp') && attributes.key?(:'client_ip')

      self.client_ip = attributes[:'client_ip'] if attributes[:'client_ip']

      self.audit_trail_id = attributes[:'auditTrailId'] if attributes[:'auditTrailId']

      raise 'You cannot provide both :auditTrailId and :audit_trail_id' if attributes.key?(:'auditTrailId') && attributes.key?(:'audit_trail_id')

      self.audit_trail_id = attributes[:'audit_trail_id'] if attributes[:'audit_trail_id']

      self.is_alerted = attributes[:'isAlerted'] unless attributes[:'isAlerted'].nil?

      raise 'You cannot provide both :isAlerted and :is_alerted' if attributes.key?(:'isAlerted') && attributes.key?(:'is_alerted')

      self.is_alerted = attributes[:'is_alerted'] unless attributes[:'is_alerted'].nil?

      self.action_taken = attributes[:'actionTaken'] if attributes[:'actionTaken']

      raise 'You cannot provide both :actionTaken and :action_taken' if attributes.key?(:'actionTaken') && attributes.key?(:'action_taken')

      self.action_taken = attributes[:'action_taken'] if attributes[:'action_taken']

      self.client_program = attributes[:'clientProgram'] if attributes[:'clientProgram']

      raise 'You cannot provide both :clientProgram and :client_program' if attributes.key?(:'clientProgram') && attributes.key?(:'client_program')

      self.client_program = attributes[:'client_program'] if attributes[:'client_program']

      self.command_text = attributes[:'commandText'] if attributes[:'commandText']

      raise 'You cannot provide both :commandText and :command_text' if attributes.key?(:'commandText') && attributes.key?(:'command_text')

      self.command_text = attributes[:'command_text'] if attributes[:'command_text']

      self.command_param = attributes[:'commandParam'] if attributes[:'commandParam']

      raise 'You cannot provide both :commandParam and :command_param' if attributes.key?(:'commandParam') && attributes.key?(:'command_param')

      self.command_param = attributes[:'command_param'] if attributes[:'command_param']

      self.extended_event_attributes = attributes[:'extendedEventAttributes'] if attributes[:'extendedEventAttributes']

      raise 'You cannot provide both :extendedEventAttributes and :extended_event_attributes' if attributes.key?(:'extendedEventAttributes') && attributes.key?(:'extended_event_attributes')

      self.extended_event_attributes = attributes[:'extended_event_attributes'] if attributes[:'extended_event_attributes']

      self.audit_location = attributes[:'auditLocation'] if attributes[:'auditLocation']

      raise 'You cannot provide both :auditLocation and :audit_location' if attributes.key?(:'auditLocation') && attributes.key?(:'audit_location')

      self.audit_location = attributes[:'audit_location'] if attributes[:'audit_location']

      self.os_terminal = attributes[:'osTerminal'] if attributes[:'osTerminal']

      raise 'You cannot provide both :osTerminal and :os_terminal' if attributes.key?(:'osTerminal') && attributes.key?(:'os_terminal')

      self.os_terminal = attributes[:'os_terminal'] if attributes[:'os_terminal']

      self.client_id = attributes[:'clientId'] if attributes[:'clientId']

      raise 'You cannot provide both :clientId and :client_id' if attributes.key?(:'clientId') && attributes.key?(:'client_id')

      self.client_id = attributes[:'client_id'] if attributes[:'client_id']

      self.audit_policies = attributes[:'auditPolicies'] if attributes[:'auditPolicies']

      raise 'You cannot provide both :auditPolicies and :audit_policies' if attributes.key?(:'auditPolicies') && attributes.key?(:'audit_policies')

      self.audit_policies = attributes[:'audit_policies'] if attributes[:'audit_policies']

      self.audit_type = attributes[:'auditType'] if attributes[:'auditType']

      raise 'You cannot provide both :auditType and :audit_type' if attributes.key?(:'auditType') && attributes.key?(:'audit_type')

      self.audit_type = attributes[:'audit_type'] if attributes[:'audit_type']

      self.peer_target_database_key = attributes[:'peerTargetDatabaseKey'] if attributes[:'peerTargetDatabaseKey']

      raise 'You cannot provide both :peerTargetDatabaseKey and :peer_target_database_key' if attributes.key?(:'peerTargetDatabaseKey') && attributes.key?(:'peer_target_database_key')

      self.peer_target_database_key = attributes[:'peer_target_database_key'] if attributes[:'peer_target_database_key']

      self.trail_source = attributes[:'trailSource'] if attributes[:'trailSource']

      raise 'You cannot provide both :trailSource and :trail_source' if attributes.key?(:'trailSource') && attributes.key?(:'trail_source')

      self.trail_source = attributes[:'trail_source'] if attributes[:'trail_source']

      self.database_unique_name = attributes[:'databaseUniqueName'] if attributes[:'databaseUniqueName']

      raise 'You cannot provide both :databaseUniqueName and :database_unique_name' if attributes.key?(:'databaseUniqueName') && attributes.key?(:'database_unique_name')

      self.database_unique_name = attributes[:'database_unique_name'] if attributes[:'database_unique_name']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] database_type Object to be assigned
    def database_type=(database_type)
      # rubocop:disable Style/ConditionalAssignment
      if database_type && !DATABASE_TYPE_ENUM.include?(database_type)
        OCI.logger.debug("Unknown value for 'database_type' [" + database_type + "]. Mapping to 'DATABASE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @database_type = DATABASE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @database_type = database_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] target_class Object to be assigned
    def target_class=(target_class)
      # rubocop:disable Style/ConditionalAssignment
      if target_class && !TARGET_CLASS_ENUM.include?(target_class)
        OCI.logger.debug("Unknown value for 'target_class' [" + target_class + "]. Mapping to 'TARGET_CLASS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @target_class = TARGET_CLASS_UNKNOWN_ENUM_VALUE
      else
        @target_class = target_class
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operation_status Object to be assigned
    def operation_status=(operation_status)
      # rubocop:disable Style/ConditionalAssignment
      if operation_status && !OPERATION_STATUS_ENUM.include?(operation_status)
        OCI.logger.debug("Unknown value for 'operation_status' [" + operation_status + "]. Mapping to 'OPERATION_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @operation_status = OPERATION_STATUS_UNKNOWN_ENUM_VALUE
      else
        @operation_status = operation_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] audit_location Object to be assigned
    def audit_location=(audit_location)
      # rubocop:disable Style/ConditionalAssignment
      if audit_location && !AUDIT_LOCATION_ENUM.include?(audit_location)
        OCI.logger.debug("Unknown value for 'audit_location' [" + audit_location + "]. Mapping to 'AUDIT_LOCATION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @audit_location = AUDIT_LOCATION_UNKNOWN_ENUM_VALUE
      else
        @audit_location = audit_location
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] audit_type Object to be assigned
    def audit_type=(audit_type)
      # rubocop:disable Style/ConditionalAssignment
      if audit_type && !AUDIT_TYPE_ENUM.include?(audit_type)
        OCI.logger.debug("Unknown value for 'audit_type' [" + audit_type + "]. Mapping to 'AUDIT_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @audit_type = AUDIT_TYPE_UNKNOWN_ENUM_VALUE
      else
        @audit_type = audit_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] trail_source Object to be assigned
    def trail_source=(trail_source)
      # rubocop:disable Style/ConditionalAssignment
      if trail_source && !TRAIL_SOURCE_ENUM.include?(trail_source)
        OCI.logger.debug("Unknown value for 'trail_source' [" + trail_source + "]. Mapping to 'TRAIL_SOURCE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @trail_source = TRAIL_SOURCE_UNKNOWN_ENUM_VALUE
      else
        @trail_source = trail_source
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        db_user_name == other.db_user_name &&
        target_id == other.target_id &&
        target_name == other.target_name &&
        database_type == other.database_type &&
        target_class == other.target_class &&
        audit_event_time == other.audit_event_time &&
        time_collected == other.time_collected &&
        os_user_name == other.os_user_name &&
        operation == other.operation &&
        operation_status == other.operation_status &&
        event_name == other.event_name &&
        error_code == other.error_code &&
        error_message == other.error_message &&
        object_type == other.object_type &&
        object_name == other.object_name &&
        object_owner == other.object_owner &&
        client_hostname == other.client_hostname &&
        client_ip == other.client_ip &&
        audit_trail_id == other.audit_trail_id &&
        is_alerted == other.is_alerted &&
        action_taken == other.action_taken &&
        client_program == other.client_program &&
        command_text == other.command_text &&
        command_param == other.command_param &&
        extended_event_attributes == other.extended_event_attributes &&
        audit_location == other.audit_location &&
        os_terminal == other.os_terminal &&
        client_id == other.client_id &&
        audit_policies == other.audit_policies &&
        audit_type == other.audit_type &&
        peer_target_database_key == other.peer_target_database_key &&
        trail_source == other.trail_source &&
        database_unique_name == other.database_unique_name &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, db_user_name, target_id, target_name, database_type, target_class, audit_event_time, time_collected, os_user_name, operation, operation_status, event_name, error_code, error_message, object_type, object_name, object_owner, client_hostname, client_ip, audit_trail_id, is_alerted, action_taken, client_program, command_text, command_param, extended_event_attributes, audit_location, os_terminal, client_id, audit_policies, audit_type, peer_target_database_key, trail_source, database_unique_name, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
