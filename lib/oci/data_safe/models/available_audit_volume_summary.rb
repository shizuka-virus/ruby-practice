# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20181201
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Represents the audit data volume collected by Data Safe from the target database for the specified audit profile.
  #
  class DataSafe::Models::AvailableAuditVolumeSummary
    # **[Required]** The OCID of the audit profile resource.
    # @return [String]
    attr_accessor :audit_profile_id

    # The OCID of the audit trail.
    # @return [String]
    attr_accessor :audit_trail_id

    # Unique name of the database associated to the peer target database.
    # @return [String]
    attr_accessor :database_unique_name

    # **[Required]** Audit trail location on the target database from where the audit data is being collected by Data Safe.
    # @return [String]
    attr_accessor :trail_location

    # **[Required]** Represents the month under consideration for which aggregated audit data volume available at the target is computed.
    # This field will be the UTC start of the day of the first day of the month for which the aggregate count corresponds to, in the format defined by RFC3339..
    # For instance, the value of 01-01-2021T00:00:00Z represents Jan 2021.
    #
    # @return [DateTime]
    attr_accessor :month_in_consideration

    # **[Required]** Represents the aggregated audit data volume available in the audit trails on the target database which is yet to be collected by Data Safe for the specified month.
    #
    # @return [Integer]
    attr_accessor :volume

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'audit_profile_id': :'auditProfileId',
        'audit_trail_id': :'auditTrailId',
        'database_unique_name': :'databaseUniqueName',
        'trail_location': :'trailLocation',
        'month_in_consideration': :'monthInConsideration',
        'volume': :'volume'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'audit_profile_id': :'String',
        'audit_trail_id': :'String',
        'database_unique_name': :'String',
        'trail_location': :'String',
        'month_in_consideration': :'DateTime',
        'volume': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :audit_profile_id The value to assign to the {#audit_profile_id} property
    # @option attributes [String] :audit_trail_id The value to assign to the {#audit_trail_id} property
    # @option attributes [String] :database_unique_name The value to assign to the {#database_unique_name} property
    # @option attributes [String] :trail_location The value to assign to the {#trail_location} property
    # @option attributes [DateTime] :month_in_consideration The value to assign to the {#month_in_consideration} property
    # @option attributes [Integer] :volume The value to assign to the {#volume} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.audit_profile_id = attributes[:'auditProfileId'] if attributes[:'auditProfileId']

      raise 'You cannot provide both :auditProfileId and :audit_profile_id' if attributes.key?(:'auditProfileId') && attributes.key?(:'audit_profile_id')

      self.audit_profile_id = attributes[:'audit_profile_id'] if attributes[:'audit_profile_id']

      self.audit_trail_id = attributes[:'auditTrailId'] if attributes[:'auditTrailId']

      raise 'You cannot provide both :auditTrailId and :audit_trail_id' if attributes.key?(:'auditTrailId') && attributes.key?(:'audit_trail_id')

      self.audit_trail_id = attributes[:'audit_trail_id'] if attributes[:'audit_trail_id']

      self.database_unique_name = attributes[:'databaseUniqueName'] if attributes[:'databaseUniqueName']

      raise 'You cannot provide both :databaseUniqueName and :database_unique_name' if attributes.key?(:'databaseUniqueName') && attributes.key?(:'database_unique_name')

      self.database_unique_name = attributes[:'database_unique_name'] if attributes[:'database_unique_name']

      self.trail_location = attributes[:'trailLocation'] if attributes[:'trailLocation']

      raise 'You cannot provide both :trailLocation and :trail_location' if attributes.key?(:'trailLocation') && attributes.key?(:'trail_location')

      self.trail_location = attributes[:'trail_location'] if attributes[:'trail_location']

      self.month_in_consideration = attributes[:'monthInConsideration'] if attributes[:'monthInConsideration']

      raise 'You cannot provide both :monthInConsideration and :month_in_consideration' if attributes.key?(:'monthInConsideration') && attributes.key?(:'month_in_consideration')

      self.month_in_consideration = attributes[:'month_in_consideration'] if attributes[:'month_in_consideration']

      self.volume = attributes[:'volume'] if attributes[:'volume']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        audit_profile_id == other.audit_profile_id &&
        audit_trail_id == other.audit_trail_id &&
        database_unique_name == other.database_unique_name &&
        trail_location == other.trail_location &&
        month_in_consideration == other.month_in_consideration &&
        volume == other.volume
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [audit_profile_id, audit_trail_id, database_unique_name, trail_location, month_in_consideration, volume].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
