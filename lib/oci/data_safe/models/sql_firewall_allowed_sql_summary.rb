# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20181201
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The resource represents a SQL Firewall allowed SQL in Data Safe.
  #
  class DataSafe::Models::SqlFirewallAllowedSqlSummary
    SQL_LEVEL_ENUM = [
      SQL_LEVEL_USER_ISSUED_SQL = 'USER_ISSUED_SQL'.freeze,
      SQL_LEVEL_ALL_SQL = 'ALL_SQL'.freeze,
      SQL_LEVEL_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The OCID of the SQL Firewall allowed SQL.
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the compartment containing the SQL Firewall allowed SQL.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The display name of the SQL Firewall allowed SQL.
    # @return [String]
    attr_accessor :display_name

    # The description of the SQL Firewall allowed SQL.
    # @return [String]
    attr_accessor :description

    # **[Required]** The OCID of the SQL Firewall policy corresponding to the SQL Firewall allowed SQL.
    # @return [String]
    attr_accessor :sql_firewall_policy_id

    # The name of the user that SQL was executed as.
    # @return [String]
    attr_accessor :current_user

    # **[Required]** The database user name.
    # @return [String]
    attr_accessor :db_user_name

    # **[Required]** The SQL text of the SQL Firewall allowed SQL.
    # @return [String]
    attr_accessor :sql_text

    # **[Required]** Specifies the level of SQL included for this SQL Firewall policy.
    # USER_ISSUED_SQL - User issued SQL statements only.
    # ALL_SQL - Includes all SQL statements including SQL statement issued inside PL/SQL units.
    #
    # @return [String]
    attr_reader :sql_level

    # The objects accessed by the SQL.
    # @return [Array<String>]
    attr_accessor :sql_accessed_objects

    # **[Required]** Version of the associated SQL Firewall policy. This identifies whether the allowed SQLs were added in the same batch or not.
    # @return [Float]
    attr_accessor :version

    # **[Required]** The time the the SQL Firewall allowed SQL was collected from the target database, in the format defined by RFC3339.
    # @return [DateTime]
    attr_accessor :time_collected

    # The last date and time the SQL Firewall allowed SQL was updated, in the format defined by RFC3339.
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** The current state of the SQL Firewall allowed SQL.
    # @return [String]
    attr_reader :lifecycle_state

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
    #
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'description': :'description',
        'sql_firewall_policy_id': :'sqlFirewallPolicyId',
        'current_user': :'currentUser',
        'db_user_name': :'dbUserName',
        'sql_text': :'sqlText',
        'sql_level': :'sqlLevel',
        'sql_accessed_objects': :'sqlAccessedObjects',
        'version': :'version',
        'time_collected': :'timeCollected',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'display_name': :'String',
        'description': :'String',
        'sql_firewall_policy_id': :'String',
        'current_user': :'String',
        'db_user_name': :'String',
        'sql_text': :'String',
        'sql_level': :'String',
        'sql_accessed_objects': :'Array<String>',
        'version': :'Float',
        'time_collected': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :sql_firewall_policy_id The value to assign to the {#sql_firewall_policy_id} property
    # @option attributes [String] :current_user The value to assign to the {#current_user} property
    # @option attributes [String] :db_user_name The value to assign to the {#db_user_name} property
    # @option attributes [String] :sql_text The value to assign to the {#sql_text} property
    # @option attributes [String] :sql_level The value to assign to the {#sql_level} property
    # @option attributes [Array<String>] :sql_accessed_objects The value to assign to the {#sql_accessed_objects} property
    # @option attributes [Float] :version The value to assign to the {#version} property
    # @option attributes [DateTime] :time_collected The value to assign to the {#time_collected} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.description = attributes[:'description'] if attributes[:'description']

      self.sql_firewall_policy_id = attributes[:'sqlFirewallPolicyId'] if attributes[:'sqlFirewallPolicyId']

      raise 'You cannot provide both :sqlFirewallPolicyId and :sql_firewall_policy_id' if attributes.key?(:'sqlFirewallPolicyId') && attributes.key?(:'sql_firewall_policy_id')

      self.sql_firewall_policy_id = attributes[:'sql_firewall_policy_id'] if attributes[:'sql_firewall_policy_id']

      self.current_user = attributes[:'currentUser'] if attributes[:'currentUser']

      raise 'You cannot provide both :currentUser and :current_user' if attributes.key?(:'currentUser') && attributes.key?(:'current_user')

      self.current_user = attributes[:'current_user'] if attributes[:'current_user']

      self.db_user_name = attributes[:'dbUserName'] if attributes[:'dbUserName']

      raise 'You cannot provide both :dbUserName and :db_user_name' if attributes.key?(:'dbUserName') && attributes.key?(:'db_user_name')

      self.db_user_name = attributes[:'db_user_name'] if attributes[:'db_user_name']

      self.sql_text = attributes[:'sqlText'] if attributes[:'sqlText']

      raise 'You cannot provide both :sqlText and :sql_text' if attributes.key?(:'sqlText') && attributes.key?(:'sql_text')

      self.sql_text = attributes[:'sql_text'] if attributes[:'sql_text']

      self.sql_level = attributes[:'sqlLevel'] if attributes[:'sqlLevel']

      raise 'You cannot provide both :sqlLevel and :sql_level' if attributes.key?(:'sqlLevel') && attributes.key?(:'sql_level')

      self.sql_level = attributes[:'sql_level'] if attributes[:'sql_level']

      self.sql_accessed_objects = attributes[:'sqlAccessedObjects'] if attributes[:'sqlAccessedObjects']

      raise 'You cannot provide both :sqlAccessedObjects and :sql_accessed_objects' if attributes.key?(:'sqlAccessedObjects') && attributes.key?(:'sql_accessed_objects')

      self.sql_accessed_objects = attributes[:'sql_accessed_objects'] if attributes[:'sql_accessed_objects']

      self.version = attributes[:'version'] if attributes[:'version']

      self.time_collected = attributes[:'timeCollected'] if attributes[:'timeCollected']

      raise 'You cannot provide both :timeCollected and :time_collected' if attributes.key?(:'timeCollected') && attributes.key?(:'time_collected')

      self.time_collected = attributes[:'time_collected'] if attributes[:'time_collected']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sql_level Object to be assigned
    def sql_level=(sql_level)
      # rubocop:disable Style/ConditionalAssignment
      if sql_level && !SQL_LEVEL_ENUM.include?(sql_level)
        OCI.logger.debug("Unknown value for 'sql_level' [" + sql_level + "]. Mapping to 'SQL_LEVEL_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @sql_level = SQL_LEVEL_UNKNOWN_ENUM_VALUE
      else
        @sql_level = sql_level
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        description == other.description &&
        sql_firewall_policy_id == other.sql_firewall_policy_id &&
        current_user == other.current_user &&
        db_user_name == other.db_user_name &&
        sql_text == other.sql_text &&
        sql_level == other.sql_level &&
        sql_accessed_objects == other.sql_accessed_objects &&
        version == other.version &&
        time_collected == other.time_collected &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, display_name, description, sql_firewall_policy_id, current_user, db_user_name, sql_text, sql_level, sql_accessed_objects, version, time_collected, time_updated, lifecycle_state, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
