# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20181201
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The scope of analytics data.
  class DataSafe::Models::FindingAnalyticsDimensions
    TOP_FINDING_STATUS_ENUM = [
      TOP_FINDING_STATUS_RISK = 'RISK'.freeze,
      TOP_FINDING_STATUS_EVALUATE = 'EVALUATE'.freeze,
      TOP_FINDING_STATUS_ADVISORY = 'ADVISORY'.freeze,
      TOP_FINDING_STATUS_PASS = 'PASS'.freeze,
      TOP_FINDING_STATUS_DEFERRED = 'DEFERRED'.freeze,
      TOP_FINDING_STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    SEVERITY_ENUM = [
      SEVERITY_HIGH = 'HIGH'.freeze,
      SEVERITY_MEDIUM = 'MEDIUM'.freeze,
      SEVERITY_LOW = 'LOW'.freeze,
      SEVERITY_EVALUATE = 'EVALUATE'.freeze,
      SEVERITY_ADVISORY = 'ADVISORY'.freeze,
      SEVERITY_PASS = 'PASS'.freeze,
      SEVERITY_DEFERRED = 'DEFERRED'.freeze,
      SEVERITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Each finding in security assessment has an associated key (think of key as a finding's name).
    # For a given finding, the key will be the same across targets. The user can use these keys to filter the findings.
    #
    # @return [String]
    attr_accessor :key

    # The category of the top finding.
    # @return [String]
    attr_accessor :top_finding_category

    # The short title of the finding.
    # @return [String]
    attr_accessor :title

    # The status of the top finding.
    # All findings will have \"severity\" to indicate the risk level, but only top findings will have \"status\".
    # Possible status: Pass / Risk (Low, Medium, High)/ Evaluate / Advisory / Deferred
    # Instead of having \"Low, Medium, High\" in severity, \"Risk\" will include these three situations in status.
    #
    # @return [String]
    attr_reader :top_finding_status

    # The severity (risk level) of the finding.
    # @return [String]
    attr_reader :severity

    # The OCID of the target database.
    # @return [String]
    attr_accessor :target_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'key': :'key',
        'top_finding_category': :'topFindingCategory',
        'title': :'title',
        'top_finding_status': :'topFindingStatus',
        'severity': :'severity',
        'target_id': :'targetId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'key': :'String',
        'top_finding_category': :'String',
        'title': :'String',
        'top_finding_status': :'String',
        'severity': :'String',
        'target_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :key The value to assign to the {#key} property
    # @option attributes [String] :top_finding_category The value to assign to the {#top_finding_category} property
    # @option attributes [String] :title The value to assign to the {#title} property
    # @option attributes [String] :top_finding_status The value to assign to the {#top_finding_status} property
    # @option attributes [String] :severity The value to assign to the {#severity} property
    # @option attributes [String] :target_id The value to assign to the {#target_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.key = attributes[:'key'] if attributes[:'key']

      self.top_finding_category = attributes[:'topFindingCategory'] if attributes[:'topFindingCategory']

      raise 'You cannot provide both :topFindingCategory and :top_finding_category' if attributes.key?(:'topFindingCategory') && attributes.key?(:'top_finding_category')

      self.top_finding_category = attributes[:'top_finding_category'] if attributes[:'top_finding_category']

      self.title = attributes[:'title'] if attributes[:'title']

      self.top_finding_status = attributes[:'topFindingStatus'] if attributes[:'topFindingStatus']

      raise 'You cannot provide both :topFindingStatus and :top_finding_status' if attributes.key?(:'topFindingStatus') && attributes.key?(:'top_finding_status')

      self.top_finding_status = attributes[:'top_finding_status'] if attributes[:'top_finding_status']

      self.severity = attributes[:'severity'] if attributes[:'severity']

      self.target_id = attributes[:'targetId'] if attributes[:'targetId']

      raise 'You cannot provide both :targetId and :target_id' if attributes.key?(:'targetId') && attributes.key?(:'target_id')

      self.target_id = attributes[:'target_id'] if attributes[:'target_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] top_finding_status Object to be assigned
    def top_finding_status=(top_finding_status)
      # rubocop:disable Style/ConditionalAssignment
      if top_finding_status && !TOP_FINDING_STATUS_ENUM.include?(top_finding_status)
        OCI.logger.debug("Unknown value for 'top_finding_status' [" + top_finding_status + "]. Mapping to 'TOP_FINDING_STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @top_finding_status = TOP_FINDING_STATUS_UNKNOWN_ENUM_VALUE
      else
        @top_finding_status = top_finding_status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      # rubocop:disable Style/ConditionalAssignment
      if severity && !SEVERITY_ENUM.include?(severity)
        OCI.logger.debug("Unknown value for 'severity' [" + severity + "]. Mapping to 'SEVERITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @severity = SEVERITY_UNKNOWN_ENUM_VALUE
      else
        @severity = severity
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        key == other.key &&
        top_finding_category == other.top_finding_category &&
        title == other.title &&
        top_finding_status == other.top_finding_status &&
        severity == other.severity &&
        target_id == other.target_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [key, top_finding_category, title, top_finding_status, severity, target_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
