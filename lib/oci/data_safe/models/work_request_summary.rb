# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20181201
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Summary of a work request.
  class DataSafe::Models::WorkRequestSummary
    OPERATION_TYPE_ENUM = [
      OPERATION_TYPE_ENABLE_DATA_SAFE_CONFIGURATION = 'ENABLE_DATA_SAFE_CONFIGURATION'.freeze,
      OPERATION_TYPE_CREATE_PRIVATE_ENDPOINT = 'CREATE_PRIVATE_ENDPOINT'.freeze,
      OPERATION_TYPE_UPDATE_PRIVATE_ENDPOINT = 'UPDATE_PRIVATE_ENDPOINT'.freeze,
      OPERATION_TYPE_DELETE_PRIVATE_ENDPOINT = 'DELETE_PRIVATE_ENDPOINT'.freeze,
      OPERATION_TYPE_CHANGE_PRIVATE_ENDPOINT_COMPARTMENT = 'CHANGE_PRIVATE_ENDPOINT_COMPARTMENT'.freeze,
      OPERATION_TYPE_CREATE_ONPREM_CONNECTOR = 'CREATE_ONPREM_CONNECTOR'.freeze,
      OPERATION_TYPE_UPDATE_ONPREM_CONNECTOR = 'UPDATE_ONPREM_CONNECTOR'.freeze,
      OPERATION_TYPE_DELETE_ONPREM_CONNECTOR = 'DELETE_ONPREM_CONNECTOR'.freeze,
      OPERATION_TYPE_UPDATE_ONPREM_CONNECTOR_WALLET = 'UPDATE_ONPREM_CONNECTOR_WALLET'.freeze,
      OPERATION_TYPE_CHANGE_ONPREM_CONNECTOR_COMPARTMENT = 'CHANGE_ONPREM_CONNECTOR_COMPARTMENT'.freeze,
      OPERATION_TYPE_PROVISION_POLICY = 'PROVISION_POLICY'.freeze,
      OPERATION_TYPE_RETRIEVE_POLICY = 'RETRIEVE_POLICY'.freeze,
      OPERATION_TYPE_UPDATE_POLICY = 'UPDATE_POLICY'.freeze,
      OPERATION_TYPE_CHANGE_POLICY_COMPARTMENT = 'CHANGE_POLICY_COMPARTMENT'.freeze,
      OPERATION_TYPE_CREATE_TARGET_DATABASE = 'CREATE_TARGET_DATABASE'.freeze,
      OPERATION_TYPE_UPDATE_TARGET_DATABASE = 'UPDATE_TARGET_DATABASE'.freeze,
      OPERATION_TYPE_ACTIVATE_TARGET_DATABASE = 'ACTIVATE_TARGET_DATABASE'.freeze,
      OPERATION_TYPE_DEACTIVATE_TARGET_DATABASE = 'DEACTIVATE_TARGET_DATABASE'.freeze,
      OPERATION_TYPE_DELETE_TARGET_DATABASE = 'DELETE_TARGET_DATABASE'.freeze,
      OPERATION_TYPE_CHANGE_TARGET_DATABASE_COMPARTMENT = 'CHANGE_TARGET_DATABASE_COMPARTMENT'.freeze,
      OPERATION_TYPE_CREATE_PEER_TARGET_DATABASE = 'CREATE_PEER_TARGET_DATABASE'.freeze,
      OPERATION_TYPE_UPDATE_PEER_TARGET_DATABASE = 'UPDATE_PEER_TARGET_DATABASE'.freeze,
      OPERATION_TYPE_DELETE_PEER_TARGET_DATABASE = 'DELETE_PEER_TARGET_DATABASE'.freeze,
      OPERATION_TYPE_REFRESH_TARGET_DATABASE = 'REFRESH_TARGET_DATABASE'.freeze,
      OPERATION_TYPE_CREATE_USER_ASSESSMENT = 'CREATE_USER_ASSESSMENT'.freeze,
      OPERATION_TYPE_ASSESS_USER_ASSESSMENT = 'ASSESS_USER_ASSESSMENT'.freeze,
      OPERATION_TYPE_CREATE_SNAPSHOT_USER_ASSESSMENT = 'CREATE_SNAPSHOT_USER_ASSESSMENT'.freeze,
      OPERATION_TYPE_CREATE_SCHEDULE_USER_ASSESSMENT = 'CREATE_SCHEDULE_USER_ASSESSMENT'.freeze,
      OPERATION_TYPE_COMPARE_WITH_BASELINE_USER_ASSESSMENT = 'COMPARE_WITH_BASELINE_USER_ASSESSMENT'.freeze,
      OPERATION_TYPE_DELETE_USER_ASSESSMENT = 'DELETE_USER_ASSESSMENT'.freeze,
      OPERATION_TYPE_UPDATE_USER_ASSESSMENT = 'UPDATE_USER_ASSESSMENT'.freeze,
      OPERATION_TYPE_CHANGE_USER_ASSESSMENT_COMPARTMENT = 'CHANGE_USER_ASSESSMENT_COMPARTMENT'.freeze,
      OPERATION_TYPE_SET_USER_ASSESSMENT_BASELINE = 'SET_USER_ASSESSMENT_BASELINE'.freeze,
      OPERATION_TYPE_UNSET_USER_ASSESSMENT_BASELINE = 'UNSET_USER_ASSESSMENT_BASELINE'.freeze,
      OPERATION_TYPE_GENERATE_USER_ASSESSMENT_REPORT = 'GENERATE_USER_ASSESSMENT_REPORT'.freeze,
      OPERATION_TYPE_CREATE_SECURITY_ASSESSMENT = 'CREATE_SECURITY_ASSESSMENT'.freeze,
      OPERATION_TYPE_CREATE_SECURITY_ASSESSMENT_NOW = 'CREATE_SECURITY_ASSESSMENT_NOW'.freeze,
      OPERATION_TYPE_ASSESS_SECURITY_ASSESSMENT = 'ASSESS_SECURITY_ASSESSMENT'.freeze,
      OPERATION_TYPE_CREATE_SNAPSHOT_SECURITY_ASSESSMENT = 'CREATE_SNAPSHOT_SECURITY_ASSESSMENT'.freeze,
      OPERATION_TYPE_CREATE_SCHEDULE_SECURITY_ASSESSMENT = 'CREATE_SCHEDULE_SECURITY_ASSESSMENT'.freeze,
      OPERATION_TYPE_COMPARE_WITH_BASELINE_SECURITY_ASSESSMENT = 'COMPARE_WITH_BASELINE_SECURITY_ASSESSMENT'.freeze,
      OPERATION_TYPE_DELETE_SECURITY_ASSESSMENT = 'DELETE_SECURITY_ASSESSMENT'.freeze,
      OPERATION_TYPE_UPDATE_SECURITY_ASSESSMENT = 'UPDATE_SECURITY_ASSESSMENT'.freeze,
      OPERATION_TYPE_UPDATE_FINDING_RISK = 'UPDATE_FINDING_RISK'.freeze,
      OPERATION_TYPE_CHANGE_SECURITY_ASSESSMENT_COMPARTMENT = 'CHANGE_SECURITY_ASSESSMENT_COMPARTMENT'.freeze,
      OPERATION_TYPE_SET_SECURITY_ASSESSMENT_BASELINE = 'SET_SECURITY_ASSESSMENT_BASELINE'.freeze,
      OPERATION_TYPE_UNSET_SECURITY_ASSESSMENT_BASELINE = 'UNSET_SECURITY_ASSESSMENT_BASELINE'.freeze,
      OPERATION_TYPE_GENERATE_SECURITY_ASSESSMENT_REPORT = 'GENERATE_SECURITY_ASSESSMENT_REPORT'.freeze,
      OPERATION_TYPE_CALCULATE_VOLUME = 'CALCULATE_VOLUME'.freeze,
      OPERATION_TYPE_CALCULATE_COLLECTED_VOLUME = 'CALCULATE_COLLECTED_VOLUME'.freeze,
      OPERATION_TYPE_CREATE_DB_SECURITY_CONFIG = 'CREATE_DB_SECURITY_CONFIG'.freeze,
      OPERATION_TYPE_REFRESH_DB_SECURITY_CONFIG = 'REFRESH_DB_SECURITY_CONFIG'.freeze,
      OPERATION_TYPE_UPDATE_DB_SECURITY_CONFIG = 'UPDATE_DB_SECURITY_CONFIG'.freeze,
      OPERATION_TYPE_CHANGE_DB_SECURITY_CONFIG_COMPARTMENT = 'CHANGE_DB_SECURITY_CONFIG_COMPARTMENT'.freeze,
      OPERATION_TYPE_GENERATE_FIREWALL_POLICY = 'GENERATE_FIREWALL_POLICY'.freeze,
      OPERATION_TYPE_UPDATE_FIREWALL_POLICY = 'UPDATE_FIREWALL_POLICY'.freeze,
      OPERATION_TYPE_CHANGE_FIREWALL_POLICY_COMPARTMENT = 'CHANGE_FIREWALL_POLICY_COMPARTMENT'.freeze,
      OPERATION_TYPE_DELETE_FIREWALL_POLICY = 'DELETE_FIREWALL_POLICY'.freeze,
      OPERATION_TYPE_CREATE_SQL_COLLECTION = 'CREATE_SQL_COLLECTION'.freeze,
      OPERATION_TYPE_UPDATE_SQL_COLLECTION = 'UPDATE_SQL_COLLECTION'.freeze,
      OPERATION_TYPE_START_SQL_COLLECTION = 'START_SQL_COLLECTION'.freeze,
      OPERATION_TYPE_STOP_SQL_COLLECTION = 'STOP_SQL_COLLECTION'.freeze,
      OPERATION_TYPE_DELETE_SQL_COLLECTION = 'DELETE_SQL_COLLECTION'.freeze,
      OPERATION_TYPE_CHANGE_SQL_COLLECTION_COMPARTMENT = 'CHANGE_SQL_COLLECTION_COMPARTMENT'.freeze,
      OPERATION_TYPE_REFRESH_SQL_COLLECTION_LOG_INSIGHTS = 'REFRESH_SQL_COLLECTION_LOG_INSIGHTS'.freeze,
      OPERATION_TYPE_PURGE_SQL_COLLECTION_LOGS = 'PURGE_SQL_COLLECTION_LOGS'.freeze,
      OPERATION_TYPE_REFRESH_VIOLATIONS = 'REFRESH_VIOLATIONS'.freeze,
      OPERATION_TYPE_UPDATE_SECURITY_POLICY = 'UPDATE_SECURITY_POLICY'.freeze,
      OPERATION_TYPE_CHANGE_SECURITY_POLICY_COMPARTMENT = 'CHANGE_SECURITY_POLICY_COMPARTMENT'.freeze,
      OPERATION_TYPE_UPDATE_SECURITY_POLICY_DEPLOYMENT = 'UPDATE_SECURITY_POLICY_DEPLOYMENT'.freeze,
      OPERATION_TYPE_CHANGE_SECURITY_POLICY_DEPLOYMENT_COMPARTMENT = 'CHANGE_SECURITY_POLICY_DEPLOYMENT_COMPARTMENT'.freeze,
      OPERATION_TYPE_AUDIT_TRAIL = 'AUDIT_TRAIL'.freeze,
      OPERATION_TYPE_DELETE_AUDIT_TRAIL = 'DELETE_AUDIT_TRAIL'.freeze,
      OPERATION_TYPE_DISCOVER_AUDIT_TRAILS = 'DISCOVER_AUDIT_TRAILS'.freeze,
      OPERATION_TYPE_UPDATE_AUDIT_TRAIL = 'UPDATE_AUDIT_TRAIL'.freeze,
      OPERATION_TYPE_UPDATE_AUDIT_PROFILE = 'UPDATE_AUDIT_PROFILE'.freeze,
      OPERATION_TYPE_AUDIT_CHANGE_COMPARTMENT = 'AUDIT_CHANGE_COMPARTMENT'.freeze,
      OPERATION_TYPE_CREATE_REPORT_DEFINITION = 'CREATE_REPORT_DEFINITION'.freeze,
      OPERATION_TYPE_UPDATE_REPORT_DEFINITION = 'UPDATE_REPORT_DEFINITION'.freeze,
      OPERATION_TYPE_CHANGE_REPORT_DEFINITION_COMPARTMENT = 'CHANGE_REPORT_DEFINITION_COMPARTMENT'.freeze,
      OPERATION_TYPE_DELETE_REPORT_DEFINITION = 'DELETE_REPORT_DEFINITION'.freeze,
      OPERATION_TYPE_GENERATE_REPORT = 'GENERATE_REPORT'.freeze,
      OPERATION_TYPE_CHANGE_REPORT_COMPARTMENT = 'CHANGE_REPORT_COMPARTMENT'.freeze,
      OPERATION_TYPE_DELETE_ARCHIVE_RETRIEVAL = 'DELETE_ARCHIVE_RETRIEVAL'.freeze,
      OPERATION_TYPE_CREATE_ARCHIVE_RETRIEVAL = 'CREATE_ARCHIVE_RETRIEVAL'.freeze,
      OPERATION_TYPE_UPDATE_ARCHIVE_RETRIEVAL = 'UPDATE_ARCHIVE_RETRIEVAL'.freeze,
      OPERATION_TYPE_CHANGE_ARCHIVE_RETRIEVAL_COMPARTMENT = 'CHANGE_ARCHIVE_RETRIEVAL_COMPARTMENT'.freeze,
      OPERATION_TYPE_UPDATE_ALERT = 'UPDATE_ALERT'.freeze,
      OPERATION_TYPE_TARGET_ALERT_POLICY_ASSOCIATION = 'TARGET_ALERT_POLICY_ASSOCIATION'.freeze,
      OPERATION_TYPE_CREATE_SENSITIVE_DATA_MODEL = 'CREATE_SENSITIVE_DATA_MODEL'.freeze,
      OPERATION_TYPE_UPDATE_SENSITIVE_DATA_MODEL = 'UPDATE_SENSITIVE_DATA_MODEL'.freeze,
      OPERATION_TYPE_DELETE_SENSITIVE_DATA_MODEL = 'DELETE_SENSITIVE_DATA_MODEL'.freeze,
      OPERATION_TYPE_UPLOAD_SENSITIVE_DATA_MODEL = 'UPLOAD_SENSITIVE_DATA_MODEL'.freeze,
      OPERATION_TYPE_GENERATE_SENSITIVE_DATA_MODEL_FOR_DOWNLOAD = 'GENERATE_SENSITIVE_DATA_MODEL_FOR_DOWNLOAD'.freeze,
      OPERATION_TYPE_CREATE_SENSITIVE_COLUMN = 'CREATE_SENSITIVE_COLUMN'.freeze,
      OPERATION_TYPE_UPDATE_SENSITIVE_COLUMN = 'UPDATE_SENSITIVE_COLUMN'.freeze,
      OPERATION_TYPE_PATCH_SENSITIVE_COLUMNS = 'PATCH_SENSITIVE_COLUMNS'.freeze,
      OPERATION_TYPE_CREATE_DISCOVERY_JOB = 'CREATE_DISCOVERY_JOB'.freeze,
      OPERATION_TYPE_DELETE_DISCOVERY_JOB = 'DELETE_DISCOVERY_JOB'.freeze,
      OPERATION_TYPE_PATCH_DISCOVERY_JOB_RESULT = 'PATCH_DISCOVERY_JOB_RESULT'.freeze,
      OPERATION_TYPE_APPLY_DISCOVERY_JOB_RESULT = 'APPLY_DISCOVERY_JOB_RESULT'.freeze,
      OPERATION_TYPE_GENERATE_DISCOVERY_REPORT = 'GENERATE_DISCOVERY_REPORT'.freeze,
      OPERATION_TYPE_CREATE_SENSITIVE_TYPE = 'CREATE_SENSITIVE_TYPE'.freeze,
      OPERATION_TYPE_UPDATE_SENSITIVE_TYPE = 'UPDATE_SENSITIVE_TYPE'.freeze,
      OPERATION_TYPE_CREATE_MASKING_POLICY = 'CREATE_MASKING_POLICY'.freeze,
      OPERATION_TYPE_UPDATE_MASKING_POLICY = 'UPDATE_MASKING_POLICY'.freeze,
      OPERATION_TYPE_DELETE_MASKING_POLICY = 'DELETE_MASKING_POLICY'.freeze,
      OPERATION_TYPE_UPLOAD_MASKING_POLICY = 'UPLOAD_MASKING_POLICY'.freeze,
      OPERATION_TYPE_GENERATE_MASKING_POLICY_FOR_DOWNLOAD = 'GENERATE_MASKING_POLICY_FOR_DOWNLOAD'.freeze,
      OPERATION_TYPE_CREATE_MASKING_COLUMN = 'CREATE_MASKING_COLUMN'.freeze,
      OPERATION_TYPE_UPDATE_MASKING_COLUMN = 'UPDATE_MASKING_COLUMN'.freeze,
      OPERATION_TYPE_PATCH_MASKING_COLUMNS = 'PATCH_MASKING_COLUMNS'.freeze,
      OPERATION_TYPE_GENERATE_MASKING_REPORT = 'GENERATE_MASKING_REPORT'.freeze,
      OPERATION_TYPE_CREATE_LIBRARY_MASKING_FORMAT = 'CREATE_LIBRARY_MASKING_FORMAT'.freeze,
      OPERATION_TYPE_UPDATE_LIBRARY_MASKING_FORMAT = 'UPDATE_LIBRARY_MASKING_FORMAT'.freeze,
      OPERATION_TYPE_ADD_COLUMNS_FROM_SDM = 'ADD_COLUMNS_FROM_SDM'.freeze,
      OPERATION_TYPE_MASKING_JOB = 'MASKING_JOB'.freeze,
      OPERATION_TYPE_CREATE_DIFFERENCE = 'CREATE_DIFFERENCE'.freeze,
      OPERATION_TYPE_DELETE_DIFFERENCE = 'DELETE_DIFFERENCE'.freeze,
      OPERATION_TYPE_UPDATE_DIFFERENCE = 'UPDATE_DIFFERENCE'.freeze,
      OPERATION_TYPE_PATCH_DIFFERENCE = 'PATCH_DIFFERENCE'.freeze,
      OPERATION_TYPE_APPLY_DIFFERENCE = 'APPLY_DIFFERENCE'.freeze,
      OPERATION_TYPE_MASK_POLICY_GENERATE_HEALTH_REPORT = 'MASK_POLICY_GENERATE_HEALTH_REPORT'.freeze,
      OPERATION_TYPE_ABORT_MASKING = 'ABORT_MASKING'.freeze,
      OPERATION_TYPE_CREATE_SECURITY_POLICY_REPORT = 'CREATE_SECURITY_POLICY_REPORT'.freeze,
      OPERATION_TYPE_REFRESH_SECURITY_POLICY_CACHE = 'REFRESH_SECURITY_POLICY_CACHE'.freeze,
      OPERATION_TYPE_DELETE_SECURITY_POLICY_CACHE = 'DELETE_SECURITY_POLICY_CACHE'.freeze,
      OPERATION_TYPE_CREATE_SCHEDULE = 'CREATE_SCHEDULE'.freeze,
      OPERATION_TYPE_REMOVE_SCHEDULE_REPORT = 'REMOVE_SCHEDULE_REPORT'.freeze,
      OPERATION_TYPE_UPDATE_ALL_ALERT = 'UPDATE_ALL_ALERT'.freeze,
      OPERATION_TYPE_PATCH_TARGET_ALERT_POLICY_ASSOCIATION = 'PATCH_TARGET_ALERT_POLICY_ASSOCIATION'.freeze,
      OPERATION_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    STATUS_ENUM = [
      STATUS_ACCEPTED = 'ACCEPTED'.freeze,
      STATUS_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      STATUS_FAILED = 'FAILED'.freeze,
      STATUS_SUCCEEDED = 'SUCCEEDED'.freeze,
      STATUS_CANCELING = 'CANCELING'.freeze,
      STATUS_CANCELED = 'CANCELED'.freeze,
      STATUS_SUSPENDING = 'SUSPENDING'.freeze,
      STATUS_SUSPENDED = 'SUSPENDED'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The asynchronous operation tracked by this work request.
    # @return [String]
    attr_reader :operation_type

    # **[Required]** The current status of the work request.
    # @return [String]
    attr_reader :status

    # **[Required]** The OCID of the work request.
    # @return [String]
    attr_accessor :id

    # **[Required]** The OCID of the compartment that contains the work request.
    #
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The resources that are affected by the work request.
    # @return [Array<OCI::DataSafe::Models::WorkRequestResource>]
    attr_accessor :resources

    # **[Required]** Progress of the work request in percentage.
    # @return [Float]
    attr_accessor :percent_complete

    # **[Required]** The date and time the work request was accepted, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
    #
    # @return [DateTime]
    attr_accessor :time_accepted

    # The date and time the work request transitioned from ACCEPTED to IN_PROGRESS, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
    #
    # @return [DateTime]
    attr_accessor :time_started

    # The date and time the work request reached a terminal state, either FAILED or SUCCEEDED, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
    #
    # @return [DateTime]
    attr_accessor :time_finished

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'operation_type': :'operationType',
        'status': :'status',
        'id': :'id',
        'compartment_id': :'compartmentId',
        'resources': :'resources',
        'percent_complete': :'percentComplete',
        'time_accepted': :'timeAccepted',
        'time_started': :'timeStarted',
        'time_finished': :'timeFinished'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'operation_type': :'String',
        'status': :'String',
        'id': :'String',
        'compartment_id': :'String',
        'resources': :'Array<OCI::DataSafe::Models::WorkRequestResource>',
        'percent_complete': :'Float',
        'time_accepted': :'DateTime',
        'time_started': :'DateTime',
        'time_finished': :'DateTime'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :operation_type The value to assign to the {#operation_type} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [Array<OCI::DataSafe::Models::WorkRequestResource>] :resources The value to assign to the {#resources} property
    # @option attributes [Float] :percent_complete The value to assign to the {#percent_complete} property
    # @option attributes [DateTime] :time_accepted The value to assign to the {#time_accepted} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_finished The value to assign to the {#time_finished} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.operation_type = attributes[:'operationType'] if attributes[:'operationType']

      raise 'You cannot provide both :operationType and :operation_type' if attributes.key?(:'operationType') && attributes.key?(:'operation_type')

      self.operation_type = attributes[:'operation_type'] if attributes[:'operation_type']

      self.status = attributes[:'status'] if attributes[:'status']

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.resources = attributes[:'resources'] if attributes[:'resources']

      self.percent_complete = attributes[:'percentComplete'] if attributes[:'percentComplete']

      raise 'You cannot provide both :percentComplete and :percent_complete' if attributes.key?(:'percentComplete') && attributes.key?(:'percent_complete')

      self.percent_complete = attributes[:'percent_complete'] if attributes[:'percent_complete']

      self.time_accepted = attributes[:'timeAccepted'] if attributes[:'timeAccepted']

      raise 'You cannot provide both :timeAccepted and :time_accepted' if attributes.key?(:'timeAccepted') && attributes.key?(:'time_accepted')

      self.time_accepted = attributes[:'time_accepted'] if attributes[:'time_accepted']

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_finished = attributes[:'timeFinished'] if attributes[:'timeFinished']

      raise 'You cannot provide both :timeFinished and :time_finished' if attributes.key?(:'timeFinished') && attributes.key?(:'time_finished')

      self.time_finished = attributes[:'time_finished'] if attributes[:'time_finished']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] operation_type Object to be assigned
    def operation_type=(operation_type)
      # rubocop:disable Style/ConditionalAssignment
      if operation_type && !OPERATION_TYPE_ENUM.include?(operation_type)
        OCI.logger.debug("Unknown value for 'operation_type' [" + operation_type + "]. Mapping to 'OPERATION_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @operation_type = OPERATION_TYPE_UNKNOWN_ENUM_VALUE
      else
        @operation_type = operation_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        operation_type == other.operation_type &&
        status == other.status &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        resources == other.resources &&
        percent_complete == other.percent_complete &&
        time_accepted == other.time_accepted &&
        time_started == other.time_started &&
        time_finished == other.time_finished
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [operation_type, status, id, compartment_id, resources, percent_complete, time_accepted, time_started, time_finished].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
