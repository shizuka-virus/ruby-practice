# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200129

require 'uri'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Use the Data Flow APIs to run any Apache Spark application at any scale without deploying or managing any infrastructure.
  class DataFlow::DataFlowClient
    # Client used to make HTTP requests.
    # @return [OCI::ApiClient]
    attr_reader :api_client

    # Fully qualified endpoint URL
    # @return [String]
    attr_reader :endpoint

    # The default retry configuration to apply to all operations in this service client. This can be overridden
    # on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    # will not perform any retries
    # @return [OCI::Retry::RetryConfig]
    attr_reader :retry_config

    # The region, which will usually correspond to a value in {OCI::Regions::REGION_ENUM}.
    # @return [String]
    attr_reader :region

    # rubocop:disable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity


    # Creates a new DataFlowClient.
    # Notes:
    #   If a config is not specified, then the global OCI.config will be used.
    #
    #   This client is not thread-safe
    #
    #   Either a region or an endpoint must be specified.  If an endpoint is specified, it will be used instead of the
    #     region. A region may be specified in the config or via or the region parameter. If specified in both, then the
    #     region parameter will be used.
    # @param [Config] config A Config object.
    # @param [String] region A region used to determine the service endpoint. This will usually
    #   correspond to a value in {OCI::Regions::REGION_ENUM}, but may be an arbitrary string.
    # @param [String] endpoint The fully qualified endpoint URL
    # @param [OCI::BaseSigner] signer A signer implementation which can be used by this client. If this is not provided then
    #   a signer will be constructed via the provided config. One use case of this parameter is instance principals authentication,
    #   so that the instance principals signer can be provided to the client
    # @param [OCI::ApiClientProxySettings] proxy_settings If your environment requires you to use a proxy server for outgoing HTTP requests
    #   the details for the proxy can be provided in this parameter
    # @param [OCI::Retry::RetryConfig] retry_config The retry configuration for this service client. This represents the default retry configuration to
    #   apply across all operations. This can be overridden on a per-operation basis. The default retry configuration value is `nil`, which means that an operation
    #   will not perform any retries
    def initialize(config: nil, region: nil, endpoint: nil, signer: nil, proxy_settings: nil, retry_config: nil)
      # If the signer is an InstancePrincipalsSecurityTokenSigner or SecurityTokenSigner and no config was supplied (they are self-sufficient signers)
      # then create a dummy config to pass to the ApiClient constructor. If customers wish to create a client which uses instance principals
      # and has config (either populated programmatically or loaded from a file), they must construct that config themselves and then
      # pass it to this constructor.
      #
      # If there is no signer (or the signer is not an instance principals signer) and no config was supplied, this is not valid
      # so try and load the config from the default file.
      config = OCI::Config.validate_and_build_config_with_signer(config, signer)

      signer = OCI::Signer.config_file_auth_builder(config) if signer.nil?

      @api_client = OCI::ApiClient.new(config, signer, proxy_settings: proxy_settings)
      @retry_config = retry_config

      if endpoint
        @endpoint = endpoint + '/20200129'
      else
        region ||= config.region
        region ||= signer.region if signer.respond_to?(:region)
        self.region = region
      end
      logger.info "DataFlowClient endpoint set to '#{@endpoint}'." if logger
    end
    # rubocop:enable Metrics/AbcSize, Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity

    # Set the region that will be used to determine the service endpoint.
    # This will usually correspond to a value in {OCI::Regions::REGION_ENUM},
    # but may be an arbitrary string.
    def region=(new_region)
      @region = new_region

      raise 'A region must be specified.' unless @region

      @endpoint = OCI::Regions.get_service_endpoint_for_template(@region, 'https://dataflow.{region}.oci.{secondLevelDomain}') + '/20200129'
      logger.info "DataFlowClient endpoint set to '#{@endpoint} from region #{@region}'." if logger
    end

    # @return [Logger] The logger for this client. May be nil.
    def logger
      @api_client.config.logger
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves an application into a different compartment. When provided, If-Match is checked against ETag values of the resource.
    # Associated resources, like runs, will not be automatically moved.
    #
    # @param [String] application_id The unique ID for an application.
    #
    # @param [OCI::DataFlow::Models::ChangeApplicationCompartmentDetails] change_application_compartment_details Details for changing an application's compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/change_application_compartment.rb.html) to see an example of how to use change_application_compartment API.
    def change_application_compartment(application_id, change_application_compartment_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#change_application_compartment.' if logger

      raise "Missing the required parameter 'application_id' when calling change_application_compartment." if application_id.nil?
      raise "Missing the required parameter 'change_application_compartment_details' when calling change_application_compartment." if change_application_compartment_details.nil?
      raise "Parameter value for 'application_id' must not be blank" if OCI::Internal::Util.blank_string?(application_id)

      path = '/applications/{applicationId}/actions/changeCompartment'.sub('{applicationId}', application_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_application_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#change_application_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a pool into a different compartment. When provided, If-Match is checked against ETag
    # values of the resource. Associated resources, like historical metrics, will not be
    # automatically moved. The pool must be in a terminal state (STOPPED, FAILED) in
    # order for it to be moved to a different compartment
    #
    # @param [String] pool_id The unique ID for a pool.
    #
    # @param [OCI::DataFlow::Models::ChangePoolCompartmentDetails] change_pool_compartment_details Details for changing a pool's compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/change_pool_compartment.rb.html) to see an example of how to use change_pool_compartment API.
    def change_pool_compartment(pool_id, change_pool_compartment_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#change_pool_compartment.' if logger

      raise "Missing the required parameter 'pool_id' when calling change_pool_compartment." if pool_id.nil?
      raise "Missing the required parameter 'change_pool_compartment_details' when calling change_pool_compartment." if change_pool_compartment_details.nil?
      raise "Parameter value for 'pool_id' must not be blank" if OCI::Internal::Util.blank_string?(pool_id)

      path = '/pools/{poolId}/actions/changeCompartment'.sub('{poolId}', pool_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_pool_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#change_pool_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a private endpoint into a different compartment. When provided, If-Match is checked against ETag values of the resource.
    #
    # @param [String] private_endpoint_id The unique ID for a private endpoint.
    #
    # @param [OCI::DataFlow::Models::ChangePrivateEndpointCompartmentDetails] change_private_endpoint_compartment_details Details for changing a private endpoint's compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/change_private_endpoint_compartment.rb.html) to see an example of how to use change_private_endpoint_compartment API.
    def change_private_endpoint_compartment(private_endpoint_id, change_private_endpoint_compartment_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#change_private_endpoint_compartment.' if logger

      raise "Missing the required parameter 'private_endpoint_id' when calling change_private_endpoint_compartment." if private_endpoint_id.nil?
      raise "Missing the required parameter 'change_private_endpoint_compartment_details' when calling change_private_endpoint_compartment." if change_private_endpoint_compartment_details.nil?
      raise "Parameter value for 'private_endpoint_id' must not be blank" if OCI::Internal::Util.blank_string?(private_endpoint_id)

      path = '/privateEndpoints/{privateEndpointId}/actions/changeCompartment'.sub('{privateEndpointId}', private_endpoint_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(change_private_endpoint_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#change_private_endpoint_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves a run into a different compartment. When provided, If-Match is checked against ETag
    # values of the resource. Associated resources, like historical metrics, will not be
    # automatically moved. The run must be in a terminal state (CANCELED, FAILED, SUCCEEDED) in
    # order for it to be moved to a different compartment
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [OCI::DataFlow::Models::ChangeRunCompartmentDetails] change_run_compartment_details Details for changing a run's compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/change_run_compartment.rb.html) to see an example of how to use change_run_compartment API.
    def change_run_compartment(run_id, change_run_compartment_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#change_run_compartment.' if logger

      raise "Missing the required parameter 'run_id' when calling change_run_compartment." if run_id.nil?
      raise "Missing the required parameter 'change_run_compartment_details' when calling change_run_compartment." if change_run_compartment_details.nil?
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)

      path = '/runs/{runId}/actions/changeCompartment'.sub('{runId}', run_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_run_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#change_run_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Moves an Sql Endpoint from one compartment to another. When provided, If-Match is checked against ETag values of the Sql Endpoint.
    # @param [String] sql_endpoint_id The unique id of the SQL Endpoint.
    # @param [OCI::DataFlow::Models::ChangeSqlEndpointCompartmentDetails] change_sql_endpoint_compartment_details The details to change the compartment of the Sql Endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/change_sql_endpoint_compartment.rb.html) to see an example of how to use change_sql_endpoint_compartment API.
    def change_sql_endpoint_compartment(sql_endpoint_id, change_sql_endpoint_compartment_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#change_sql_endpoint_compartment.' if logger

      raise "Missing the required parameter 'sql_endpoint_id' when calling change_sql_endpoint_compartment." if sql_endpoint_id.nil?
      raise "Missing the required parameter 'change_sql_endpoint_compartment_details' when calling change_sql_endpoint_compartment." if change_sql_endpoint_compartment_details.nil?
      raise "Parameter value for 'sql_endpoint_id' must not be blank" if OCI::Internal::Util.blank_string?(sql_endpoint_id)

      path = '/sqlEndpoints/{sqlEndpointId}/actions/changeCompartment'.sub('{sqlEndpointId}', sql_endpoint_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(change_sql_endpoint_compartment_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#change_sql_endpoint_compartment') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates an application.
    #
    # @param [OCI::DataFlow::Models::CreateApplicationDetails] create_application_details Details to create an application.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Application Application}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/create_application.rb.html) to see an example of how to use create_application API.
    def create_application(create_application_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#create_application.' if logger

      raise "Missing the required parameter 'create_application_details' when calling create_application." if create_application_details.nil?

      path = '/applications'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_application_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#create_application') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Application'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a pool to be used by dataflow runs or applications.
    #
    # @param [OCI::DataFlow::Models::CreatePoolDetails] create_pool_details The parameter required to create a pool.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Pool Pool}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/create_pool.rb.html) to see an example of how to use create_pool API.
    def create_pool(create_pool_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#create_pool.' if logger

      raise "Missing the required parameter 'create_pool_details' when calling create_pool." if create_pool_details.nil?

      path = '/pools'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_pool_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#create_pool') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Pool'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a private endpoint to be used by applications.
    #
    # @param [OCI::DataFlow::Models::CreatePrivateEndpointDetails] create_private_endpoint_details The parameters required to create a private endpoint.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::PrivateEndpoint PrivateEndpoint}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/create_private_endpoint.rb.html) to see an example of how to use create_private_endpoint API.
    def create_private_endpoint(create_private_endpoint_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#create_private_endpoint.' if logger

      raise "Missing the required parameter 'create_private_endpoint_details' when calling create_private_endpoint." if create_private_endpoint_details.nil?

      path = '/privateEndpoints'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_private_endpoint_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#create_private_endpoint') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::PrivateEndpoint'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Creates a run for an application.
    #
    # @param [OCI::DataFlow::Models::CreateRunDetails] create_run_details Details for creating a run of an application.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :opc_parent_rpt_url (Optional header param, required for Resource Principal version 3.0+)
    #   Parent resource control plane endpoint used to exchange for upper level resource principal token.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Run Run}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/create_run.rb.html) to see an example of how to use create_run API.
    def create_run(create_run_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#create_run.' if logger

      raise "Missing the required parameter 'create_run_details' when calling create_run." if create_run_details.nil?

      path = '/runs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'opc-parent-rpt-url'] = opts[:opc_parent_rpt_url] if opts[:opc_parent_rpt_url]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_run_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#create_run') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Run'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Create a new Sql Endpoint.
    # @param [OCI::DataFlow::Models::CreateSqlEndpointDetails] create_sql_endpoint_details Details of the new Sql Endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::SqlEndpoint SqlEndpoint}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/create_sql_endpoint.rb.html) to see an example of how to use create_sql_endpoint API.
    def create_sql_endpoint(create_sql_endpoint_details, opts = {})
      logger.debug 'Calling operation DataFlowClient#create_sql_endpoint.' if logger

      raise "Missing the required parameter 'create_sql_endpoint_details' when calling create_sql_endpoint." if create_sql_endpoint_details.nil?

      path = '/sqlEndpoints'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = @api_client.object_to_http_body(create_sql_endpoint_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#create_sql_endpoint') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::SqlEndpoint'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Executes a statement for a Session run.
    #
    # @param [OCI::DataFlow::Models::CreateStatementDetails] create_statement_details Details for creating a statement.
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Statement Statement}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/create_statement.rb.html) to see an example of how to use create_statement API.
    def create_statement(create_statement_details, run_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#create_statement.' if logger

      raise "Missing the required parameter 'create_statement_details' when calling create_statement." if create_statement_details.nil?
      raise "Missing the required parameter 'run_id' when calling create_statement." if run_id.nil?
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)

      path = '/runs/{runId}/statements'.sub('{runId}', run_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(create_statement_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#create_statement') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Statement'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes an application using an `applicationId`.
    #
    # @param [String] application_id The unique ID for an application.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/delete_application.rb.html) to see an example of how to use delete_application API.
    def delete_application(application_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#delete_application.' if logger

      raise "Missing the required parameter 'application_id' when calling delete_application." if application_id.nil?
      raise "Parameter value for 'application_id' must not be blank" if OCI::Internal::Util.blank_string?(application_id)

      path = '/applications/{applicationId}'.sub('{applicationId}', application_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#delete_application') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a pool using a `poolId`.
    #
    # @param [String] pool_id The unique ID for a pool.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/delete_pool.rb.html) to see an example of how to use delete_pool API.
    def delete_pool(pool_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#delete_pool.' if logger

      raise "Missing the required parameter 'pool_id' when calling delete_pool." if pool_id.nil?
      raise "Parameter value for 'pool_id' must not be blank" if OCI::Internal::Util.blank_string?(pool_id)

      path = '/pools/{poolId}'.sub('{poolId}', pool_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#delete_pool') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Deletes a private endpoint using a `privateEndpointId`.
    #
    # @param [String] private_endpoint_id The unique ID for a private endpoint.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/delete_private_endpoint.rb.html) to see an example of how to use delete_private_endpoint API.
    def delete_private_endpoint(private_endpoint_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#delete_private_endpoint.' if logger

      raise "Missing the required parameter 'private_endpoint_id' when calling delete_private_endpoint." if private_endpoint_id.nil?
      raise "Parameter value for 'private_endpoint_id' must not be blank" if OCI::Internal::Util.blank_string?(private_endpoint_id)

      path = '/privateEndpoints/{privateEndpointId}'.sub('{privateEndpointId}', private_endpoint_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#delete_private_endpoint') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Cancels the specified run if it has not already completed or was previously cancelled.
    # If a run is in progress, the executing job will be killed.
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/delete_run.rb.html) to see an example of how to use delete_run API.
    def delete_run(run_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#delete_run.' if logger

      raise "Missing the required parameter 'run_id' when calling delete_run." if run_id.nil?
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)

      path = '/runs/{runId}'.sub('{runId}', run_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#delete_run') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Delete a Sql Endpoint resource, identified by the SqlEndpoint id.
    # @param [String] sql_endpoint_id The unique id of the SQL Endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/delete_sql_endpoint.rb.html) to see an example of how to use delete_sql_endpoint API.
    def delete_sql_endpoint(sql_endpoint_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#delete_sql_endpoint.' if logger

      raise "Missing the required parameter 'sql_endpoint_id' when calling delete_sql_endpoint." if sql_endpoint_id.nil?
      raise "Parameter value for 'sql_endpoint_id' must not be blank" if OCI::Internal::Util.blank_string?(sql_endpoint_id)

      path = '/sqlEndpoints/{sqlEndpointId}'.sub('{sqlEndpointId}', sql_endpoint_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#delete_sql_endpoint') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Cancels the specified statement for a Session run.
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [String] statement_id The unique ID for the statement.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/delete_statement.rb.html) to see an example of how to use delete_statement API.
    def delete_statement(run_id, statement_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#delete_statement.' if logger

      raise "Missing the required parameter 'run_id' when calling delete_statement." if run_id.nil?
      raise "Missing the required parameter 'statement_id' when calling delete_statement." if statement_id.nil?
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)
      raise "Parameter value for 'statement_id' must not be blank" if OCI::Internal::Util.blank_string?(statement_id)

      path = '/runs/{runId}/statements/{statementId}'.sub('{runId}', run_id.to_s).sub('{statementId}', statement_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#delete_statement') do
        @api_client.call_api(
          :DELETE,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves an application using an `applicationId`.
    #
    # @param [String] application_id The unique ID for an application.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Application Application}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/get_application.rb.html) to see an example of how to use get_application API.
    def get_application(application_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#get_application.' if logger

      raise "Missing the required parameter 'application_id' when calling get_application." if application_id.nil?
      raise "Parameter value for 'application_id' must not be blank" if OCI::Internal::Util.blank_string?(application_id)

      path = '/applications/{applicationId}'.sub('{applicationId}', application_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#get_application') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Application'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves a pool using a `poolId`.
    #
    # @param [String] pool_id The unique ID for a pool.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Pool Pool}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/get_pool.rb.html) to see an example of how to use get_pool API.
    def get_pool(pool_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#get_pool.' if logger

      raise "Missing the required parameter 'pool_id' when calling get_pool." if pool_id.nil?
      raise "Parameter value for 'pool_id' must not be blank" if OCI::Internal::Util.blank_string?(pool_id)

      path = '/pools/{poolId}'.sub('{poolId}', pool_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#get_pool') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Pool'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves an private endpoint using a `privateEndpointId`.
    #
    # @param [String] private_endpoint_id The unique ID for a private endpoint.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::PrivateEndpoint PrivateEndpoint}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/get_private_endpoint.rb.html) to see an example of how to use get_private_endpoint API.
    def get_private_endpoint(private_endpoint_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#get_private_endpoint.' if logger

      raise "Missing the required parameter 'private_endpoint_id' when calling get_private_endpoint." if private_endpoint_id.nil?
      raise "Parameter value for 'private_endpoint_id' must not be blank" if OCI::Internal::Util.blank_string?(private_endpoint_id)

      path = '/privateEndpoints/{privateEndpointId}'.sub('{privateEndpointId}', private_endpoint_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#get_private_endpoint') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::PrivateEndpoint'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves the run for the specified `runId`.
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Run Run}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/get_run.rb.html) to see an example of how to use get_run API.
    def get_run(run_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#get_run.' if logger

      raise "Missing the required parameter 'run_id' when calling get_run." if run_id.nil?
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)

      path = '/runs/{runId}'.sub('{runId}', run_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#get_run') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Run'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves the content of an run log.
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [String] name The name of the log. Avoid entering confidential information.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String, IO] :response_target Streaming http body into a file (specified by file name or File object) or IO object if the block is not given
    # @option [Block] &block Streaming http body to the block
    # @return [Response] A Response object with data of type String if response_target and block are not given, otherwise with nil data
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/get_run_log.rb.html) to see an example of how to use get_run_log API.
    def get_run_log(run_id, name, opts = {}, &block)
      logger.debug 'Calling operation DataFlowClient#get_run_log.' if logger

      raise "Missing the required parameter 'run_id' when calling get_run_log." if run_id.nil?
      raise "Missing the required parameter 'name' when calling get_run_log." if name.nil?
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)
      raise "Parameter value for 'name' must not be blank" if OCI::Internal::Util.blank_string?(name)

      path = '/runs/{runId}/logs/{name}'.sub('{runId}', run_id.to_s).sub('{name}', name.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = opts[:accept] if opts[:accept]
      header_params[:accept] ||= 'application/octet-stream'
      header_params[:'accept-encoding'] = opts[:accept_encoding] if opts[:accept_encoding]
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#get_run_log') do
        if !block.nil?
          @api_client.call_api(
            :GET,
            path,
            endpoint,
            header_params: header_params,
            query_params: query_params,
            operation_signing_strategy: operation_signing_strategy,
            body: post_body,
            return_type: 'Stream',
            &block
          )
        elsif opts[:response_target]
          if opts[:response_target].respond_to? :write
            @api_client.call_api(
              :GET,
              path,
              endpoint,
              header_params: header_params,
              query_params: query_params,
              operation_signing_strategy: operation_signing_strategy,
              body: post_body,
              return_type: 'Stream',
              &proc { |chunk, _response| opts[:response_target].write(chunk) }
            )
          elsif opts[:response_target].is_a?(String)
            File.open(opts[:response_target], 'wb') do |output|
              return @api_client.call_api(
                :GET,
                path,
                endpoint,
                header_params: header_params,
                query_params: query_params,
                operation_signing_strategy: operation_signing_strategy,
                body: post_body,
                return_type: 'Stream',
                &proc { |chunk, _response| output.write(chunk) }
              )
            end
          end
        else
          @api_client.call_api(
            :GET,
            path,
            endpoint,
            header_params: header_params,
            query_params: query_params,
            operation_signing_strategy: operation_signing_strategy,
            body: post_body,
            return_type: 'String'
          )
        end
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves a SQL Endpoint using a sqlEndpointId.
    # @param [String] sql_endpoint_id The unique id of the SQL Endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::SqlEndpoint SqlEndpoint}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/get_sql_endpoint.rb.html) to see an example of how to use get_sql_endpoint API.
    def get_sql_endpoint(sql_endpoint_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#get_sql_endpoint.' if logger

      raise "Missing the required parameter 'sql_endpoint_id' when calling get_sql_endpoint." if sql_endpoint_id.nil?
      raise "Parameter value for 'sql_endpoint_id' must not be blank" if OCI::Internal::Util.blank_string?(sql_endpoint_id)

      path = '/sqlEndpoints/{sqlEndpointId}'.sub('{sqlEndpointId}', sql_endpoint_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#get_sql_endpoint') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::SqlEndpoint'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves the statement corresponding to the `statementId` for a Session run specified by `runId`.
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [String] statement_id The unique ID for the statement.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Statement Statement}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/get_statement.rb.html) to see an example of how to use get_statement API.
    def get_statement(run_id, statement_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#get_statement.' if logger

      raise "Missing the required parameter 'run_id' when calling get_statement." if run_id.nil?
      raise "Missing the required parameter 'statement_id' when calling get_statement." if statement_id.nil?
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)
      raise "Parameter value for 'statement_id' must not be blank" if OCI::Internal::Util.blank_string?(statement_id)

      path = '/runs/{runId}/statements/{statementId}'.sub('{runId}', run_id.to_s).sub('{statementId}', statement_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#get_statement') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Statement'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Gets the status of the work request with the given OCID.
    #
    # @param [String] work_request_id The unique ID for a work request.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::WorkRequest WorkRequest}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/get_work_request.rb.html) to see an example of how to use get_work_request API.
    def get_work_request(work_request_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#get_work_request.' if logger

      raise "Missing the required parameter 'work_request_id' when calling get_work_request." if work_request_id.nil?
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#get_work_request') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::WorkRequest'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all applications in the specified compartment. Only one parameter other than compartmentId may also be included in a query. The query must include compartmentId. If the query does not include compartmentId, or includes compartmentId but two or more other parameters an error is returned.
    #
    # @param [String] compartment_id The OCID of the compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [Integer] :limit The maximum number of results to return in a paginated `List` call.
    #    (default to 100)
    # @option opts [String] :page The value of the `opc-next-page` or `opc-prev-page` response header from the last `List` call
    #   to sent back to server for getting the next page of results.
    #
    # @option opts [String] :sort_by The field used to sort the results. Multiple fields are not supported.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName, language
    # @option opts [String] :sort_order The ordering of results in ascending or descending order.
    #
    #   Allowed values are: ASC, DESC
    # @option opts [String] :display_name The query parameter for the Spark application name.
    #
    # @option opts [String] :owner_principal_id The OCID of the user who created the resource.
    #
    # @option opts [String] :display_name_starts_with The displayName prefix.
    #
    # @option opts [String] :spark_version The Spark version utilized to run the application.
    #
    # @return [Response] A Response object with data of type Array<{OCI::DataFlow::Models::ApplicationSummary ApplicationSummary}>
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_applications.rb.html) to see an example of how to use list_applications API.
    def list_applications(compartment_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#list_applications.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_applications." if compartment_id.nil?

      if opts[:sort_by] && !%w[timeCreated displayName language].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName, language.'
      end

      if opts[:sort_order] && !%w[ASC DESC].include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of ASC, DESC.'
      end

      path = '/applications'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:ownerPrincipalId] = opts[:owner_principal_id] if opts[:owner_principal_id]
      query_params[:displayNameStartsWith] = opts[:display_name_starts_with] if opts[:display_name_starts_with]
      query_params[:sparkVersion] = opts[:spark_version] if opts[:spark_version]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_applications') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'Array<OCI::DataFlow::Models::ApplicationSummary>'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all pools in the specified compartment. The query must include compartmentId. The query may also include one other parameter. If the query does not include compartmentId, or includes compartmentId, but with two or more other parameters, an error is returned.
    #
    # @param [String] compartment_id The OCID of the compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [Integer] :limit The maximum number of results to return in a paginated `List` call.
    #    (default to 100)
    # @option opts [String] :page The value of the `opc-next-page` or `opc-prev-page` response header from the last `List` call
    #   to sent back to server for getting the next page of results.
    #
    # @option opts [String] :lifecycle_state The LifecycleState of the pool.
    #
    # @option opts [String] :sort_by The field used to sort the results. Multiple fields are not supported.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated
    # @option opts [String] :sort_order The ordering of results in ascending or descending order.
    #
    #   Allowed values are: ASC, DESC
    # @option opts [String] :display_name The query parameter for the Spark application name.
    #
    # @option opts [String] :owner_principal_id The OCID of the user who created the resource.
    #
    # @option opts [String] :display_name_starts_with The displayName prefix.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::PoolCollection PoolCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_pools.rb.html) to see an example of how to use list_pools API.
    def list_pools(compartment_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#list_pools.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_pools." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::DataFlow::Models::POOL_LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DataFlow::Models::POOL_LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated.'
      end

      if opts[:sort_order] && !%w[ASC DESC].include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of ASC, DESC.'
      end

      path = '/pools'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:ownerPrincipalId] = opts[:owner_principal_id] if opts[:owner_principal_id]
      query_params[:displayNameStartsWith] = opts[:display_name_starts_with] if opts[:display_name_starts_with]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_pools') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::PoolCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all private endpoints in the specified compartment. The query must include compartmentId. The query may also include one other parameter. If the query does not include compartmentId, or includes compartmentId, but with two or more other parameters, an error is returned.
    #
    # @param [String] compartment_id The OCID of the compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [Integer] :limit The maximum number of results to return in a paginated `List` call.
    #    (default to 100)
    # @option opts [String] :page The value of the `opc-next-page` or `opc-prev-page` response header from the last `List` call
    #   to sent back to server for getting the next page of results.
    #
    # @option opts [String] :lifecycle_state The LifecycleState of the private endpoint.
    #
    # @option opts [String] :sort_by The field used to sort the results. Multiple fields are not supported.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated
    # @option opts [String] :sort_order The ordering of results in ascending or descending order.
    #
    #   Allowed values are: ASC, DESC
    # @option opts [String] :display_name The query parameter for the Spark application name.
    #
    # @option opts [String] :owner_principal_id The OCID of the user who created the resource.
    #
    # @option opts [String] :display_name_starts_with The displayName prefix.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::PrivateEndpointCollection PrivateEndpointCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_private_endpoints.rb.html) to see an example of how to use list_private_endpoints API.
    def list_private_endpoints(compartment_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#list_private_endpoints.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_private_endpoints." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::DataFlow::Models::PRIVATE_ENDPOINT_LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DataFlow::Models::PRIVATE_ENDPOINT_LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated.'
      end

      if opts[:sort_order] && !%w[ASC DESC].include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of ASC, DESC.'
      end

      path = '/privateEndpoints'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:ownerPrincipalId] = opts[:owner_principal_id] if opts[:owner_principal_id]
      query_params[:displayNameStartsWith] = opts[:display_name_starts_with] if opts[:display_name_starts_with]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_private_endpoints') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::PrivateEndpointCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Retrieves summaries of the run's logs.
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [Integer] :limit The maximum number of results to return in a paginated \"List\" call.
    #    (default to 10)
    # @option opts [String] :page The value of the `opc-next-page` or `opc-prev-page` response header from the last `List` call
    #   to sent back to server for getting the next page of results.
    #
    # @return [Response] A Response object with data of type Array<{OCI::DataFlow::Models::RunLogSummary RunLogSummary}>
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_run_logs.rb.html) to see an example of how to use list_run_logs API.
    def list_run_logs(run_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#list_run_logs.' if logger

      raise "Missing the required parameter 'run_id' when calling list_run_logs." if run_id.nil?
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)

      path = '/runs/{runId}/logs'.sub('{runId}', run_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_run_logs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'Array<OCI::DataFlow::Models::RunLogSummary>'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all runs of an application in the specified compartment.  Only one parameter other than compartmentId may also be included in a query. The query must include compartmentId. If the query does not include compartmentId, or includes compartmentId but two or more other parameters an error is returned.
    #
    # @param [String] compartment_id The OCID of the compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :application_id The ID of the application.
    #
    # @option opts [String] :pool_id The ID of the pool.
    #
    # @option opts [String] :owner_principal_id The OCID of the user who created the resource.
    #
    # @option opts [String] :display_name_starts_with The displayName prefix.
    #
    # @option opts [String] :lifecycle_state The LifecycleState of the run.
    #
    # @option opts [DateTime] :time_created_greater_than The epoch time that the resource was created.
    #
    # @option opts [Integer] :limit The maximum number of results to return in a paginated `List` call.
    #    (default to 100)
    # @option opts [String] :page The value of the `opc-next-page` or `opc-prev-page` response header from the last `List` call
    #   to sent back to server for getting the next page of results.
    #
    # @option opts [String] :sort_by The field used to sort the results. Multiple fields are not supported.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated, displayName, language, runDurationInMilliseconds, lifecycleState, totalOCpu, dataReadInBytes, dataWrittenInBytes
    # @option opts [String] :sort_order The ordering of results in ascending or descending order.
    #
    #   Allowed values are: ASC, DESC
    # @option opts [String] :display_name The query parameter for the Spark application name.
    #
    # @return [Response] A Response object with data of type Array<{OCI::DataFlow::Models::RunSummary RunSummary}>
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_runs.rb.html) to see an example of how to use list_runs API.
    def list_runs(compartment_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#list_runs.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_runs." if compartment_id.nil?

      if opts[:lifecycle_state] && !OCI::DataFlow::Models::RUN_LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DataFlow::Models::RUN_LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated displayName language runDurationInMilliseconds lifecycleState totalOCpu dataReadInBytes dataWrittenInBytes].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated, displayName, language, runDurationInMilliseconds, lifecycleState, totalOCpu, dataReadInBytes, dataWrittenInBytes.'
      end

      if opts[:sort_order] && !%w[ASC DESC].include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of ASC, DESC.'
      end

      path = '/runs'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:applicationId] = opts[:application_id] if opts[:application_id]
      query_params[:poolId] = opts[:pool_id] if opts[:pool_id]
      query_params[:ownerPrincipalId] = opts[:owner_principal_id] if opts[:owner_principal_id]
      query_params[:displayNameStartsWith] = opts[:display_name_starts_with] if opts[:display_name_starts_with]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:timeCreatedGreaterThan] = opts[:time_created_greater_than] if opts[:time_created_greater_than]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_runs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'Array<OCI::DataFlow::Models::RunSummary>'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all Sql Endpoints in the specified compartment.
    # The query must include compartmentId or sqlEndpointId.
    # If the query does not include either compartmentId or sqlEndpointId, an error is returned.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :compartment_id The OCID of the compartment in which to query resources.
    # @option opts [String] :sql_endpoint_id The unique id of the SQL Endpoint.
    # @option opts [String] :lifecycle_state A filter to return only those resources whose sqlEndpointLifecycleState matches the given sqlEndpointLifecycleState.
    # @option opts [String] :display_name The query parameter for the Spark application name.
    #
    # @option opts [Integer] :limit The maximum number of items that can be returned. (default to 10)
    # @option opts [String] :page The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
    # @option opts [String] :sort_order The ordering of results in ascending or descending order.
    #
    #   Allowed values are: ASC, DESC
    # @option opts [String] :sort_by The field to sort by. Only one sort order may be provided. The default order for timeCreated is descending. The default order for displayName is ascending. If no value is specified timeCreated is used by default.
    #    (default to timeCreated)
    #   Allowed values are: id, timeCreated, displayName
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::SqlEndpointCollection SqlEndpointCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_sql_endpoints.rb.html) to see an example of how to use list_sql_endpoints API.
    def list_sql_endpoints(opts = {})
      logger.debug 'Calling operation DataFlowClient#list_sql_endpoints.' if logger


      if opts[:lifecycle_state] && !OCI::DataFlow::Models::SQL_ENDPOINT_LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DataFlow::Models::SQL_ENDPOINT_LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_order] && !%w[ASC DESC].include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of ASC, DESC.'
      end

      if opts[:sort_by] && !%w[id timeCreated displayName].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of id, timeCreated, displayName.'
      end

      path = '/sqlEndpoints'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = opts[:compartment_id] if opts[:compartment_id]
      query_params[:sqlEndpointId] = opts[:sql_endpoint_id] if opts[:sql_endpoint_id]
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:displayName] = opts[:display_name] if opts[:display_name]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_sql_endpoints') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::SqlEndpointCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists all statements for a Session run.
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :lifecycle_state The LifecycleState of the statement.
    #
    # @option opts [String] :sort_by The field used to sort the results. Multiple fields are not supported.
    #    (default to timeCreated)
    #   Allowed values are: timeCreated
    # @option opts [String] :sort_order The ordering of results in ascending or descending order.
    #
    #   Allowed values are: ASC, DESC
    # @option opts [Integer] :limit The maximum number of results to return in a paginated `List` call.
    #    (default to 100)
    # @option opts [String] :page The value of the `opc-next-page` or `opc-prev-page` response header from the last `List` call
    #   to sent back to server for getting the next page of results.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::StatementCollection StatementCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_statements.rb.html) to see an example of how to use list_statements API.
    def list_statements(run_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#list_statements.' if logger

      raise "Missing the required parameter 'run_id' when calling list_statements." if run_id.nil?

      if opts[:lifecycle_state] && !OCI::DataFlow::Models::STATEMENT_LIFECYCLE_STATE_ENUM.include?(opts[:lifecycle_state])
        raise 'Invalid value for "lifecycle_state", must be one of the values in OCI::DataFlow::Models::STATEMENT_LIFECYCLE_STATE_ENUM.'
      end

      if opts[:sort_by] && !%w[timeCreated].include?(opts[:sort_by])
        raise 'Invalid value for "sort_by", must be one of timeCreated.'
      end

      if opts[:sort_order] && !%w[ASC DESC].include?(opts[:sort_order])
        raise 'Invalid value for "sort_order", must be one of ASC, DESC.'
      end
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)

      path = '/runs/{runId}/statements'.sub('{runId}', run_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:lifecycleState] = opts[:lifecycle_state] if opts[:lifecycle_state]
      query_params[:sortBy] = opts[:sort_by] if opts[:sort_by]
      query_params[:sortOrder] = opts[:sort_order] if opts[:sort_order]
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_statements') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::StatementCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Return a (paginated) list of errors for a given work request.
    #
    # @param [String] work_request_id The unique ID for a work request.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of results to return in a paginated `List` call.
    #    (default to 100)
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :page The value of the `opc-next-page` or `opc-prev-page` response header from the last `List` call
    #   to sent back to server for getting the next page of results.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::WorkRequestErrorCollection WorkRequestErrorCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_work_request_errors.rb.html) to see an example of how to use list_work_request_errors API.
    def list_work_request_errors(work_request_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#list_work_request_errors.' if logger

      raise "Missing the required parameter 'work_request_id' when calling list_work_request_errors." if work_request_id.nil?
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}/errors'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_work_request_errors') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::WorkRequestErrorCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Return a paginated list of logs for a given work request.
    #
    # @param [String] work_request_id The unique ID for a work request.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of results to return in a paginated `List` call.
    #    (default to 100)
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :page The value of the `opc-next-page` or `opc-prev-page` response header from the last `List` call
    #   to sent back to server for getting the next page of results.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::WorkRequestLogCollection WorkRequestLogCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_work_request_logs.rb.html) to see an example of how to use list_work_request_logs API.
    def list_work_request_logs(work_request_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#list_work_request_logs.' if logger

      raise "Missing the required parameter 'work_request_id' when calling list_work_request_logs." if work_request_id.nil?
      raise "Parameter value for 'work_request_id' must not be blank" if OCI::Internal::Util.blank_string?(work_request_id)

      path = '/workRequests/{workRequestId}/logs'.sub('{workRequestId}', work_request_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_work_request_logs') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::WorkRequestLogCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Lists the work requests in a compartment.
    #
    # @param [String] compartment_id The OCID of the compartment.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [Integer] :limit The maximum number of results to return in a paginated `List` call.
    #    (default to 100)
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :page The value of the `opc-next-page` or `opc-prev-page` response header from the last `List` call
    #   to sent back to server for getting the next page of results.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::WorkRequestCollection WorkRequestCollection}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/list_work_requests.rb.html) to see an example of how to use list_work_requests API.
    def list_work_requests(compartment_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#list_work_requests.' if logger

      raise "Missing the required parameter 'compartment_id' when calling list_work_requests." if compartment_id.nil?

      path = '/workRequests'
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}
      query_params[:compartmentId] = compartment_id
      query_params[:limit] = opts[:limit] if opts[:limit]
      query_params[:page] = opts[:page] if opts[:page]

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#list_work_requests') do
        @api_client.call_api(
          :GET,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::WorkRequestCollection'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Starts the dataflow pool for a given `poolId`. When provided, If-Match is checked against ETag values of the resource.
    #
    # @param [String] pool_id The unique ID for a pool.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/start_pool.rb.html) to see an example of how to use start_pool API.
    def start_pool(pool_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#start_pool.' if logger

      raise "Missing the required parameter 'pool_id' when calling start_pool." if pool_id.nil?
      raise "Parameter value for 'pool_id' must not be blank" if OCI::Internal::Util.blank_string?(pool_id)

      path = '/pools/{poolId}/actions/start'.sub('{poolId}', pool_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#start_pool') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Stops the dataflow pool for a given `poolId`. When provided, If-Match is checked against ETag values of the resource.
    #
    # @param [String] pool_id The unique ID for a pool.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_retry_token A token that uniquely identifies a request so it can be retried in case of a timeout or server error
    #   without risk of executing that same action again. Retry tokens expire after 24 hours,
    #   but can be invalidated before then due to conflicting operations.
    #   For example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/stop_pool.rb.html) to see an example of how to use stop_pool API.
    def stop_pool(pool_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#stop_pool.' if logger

      raise "Missing the required parameter 'pool_id' when calling stop_pool." if pool_id.nil?
      raise "Parameter value for 'pool_id' must not be blank" if OCI::Internal::Util.blank_string?(pool_id)

      path = '/pools/{poolId}/actions/stop'.sub('{poolId}', pool_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-retry-token'] = opts[:opc_retry_token] if opts[:opc_retry_token]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf
      header_params[:'opc-retry-token'] ||= OCI::Retry.generate_opc_retry_token

      post_body = nil

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#stop_pool') do
        @api_client.call_api(
          :POST,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates an application using an `applicationId`.
    #
    # @param [OCI::DataFlow::Models::UpdateApplicationDetails] update_application_details Details for updating an application.
    #
    # @param [String] application_id The unique ID for an application.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Application Application}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/update_application.rb.html) to see an example of how to use update_application API.
    def update_application(update_application_details, application_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#update_application.' if logger

      raise "Missing the required parameter 'update_application_details' when calling update_application." if update_application_details.nil?
      raise "Missing the required parameter 'application_id' when calling update_application." if application_id.nil?
      raise "Parameter value for 'application_id' must not be blank" if OCI::Internal::Util.blank_string?(application_id)

      path = '/applications/{applicationId}'.sub('{applicationId}', application_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_application_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#update_application') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Application'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates a pool using a `poolId`.If changes to a pool doesn't match
    # a previously defined pool,then a 409 status code will be returned.This indicates
    # that a conflict has been detected.
    #
    # @param [OCI::DataFlow::Models::UpdatePoolDetails] update_pool_details Details for updating a pool.
    #
    # @param [String] pool_id The unique ID for a pool.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/update_pool.rb.html) to see an example of how to use update_pool API.
    def update_pool(update_pool_details, pool_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#update_pool.' if logger

      raise "Missing the required parameter 'update_pool_details' when calling update_pool." if update_pool_details.nil?
      raise "Missing the required parameter 'pool_id' when calling update_pool." if pool_id.nil?
      raise "Parameter value for 'pool_id' must not be blank" if OCI::Internal::Util.blank_string?(pool_id)

      path = '/pools/{poolId}'.sub('{poolId}', pool_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_pool_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#update_pool') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates a private endpoint using a `privateEndpointId`.  If changes to a private endpoint match
    # a previously defined private endpoint, then a 409 status code will be returned.  This indicates
    # that a conflict has been detected.
    #
    # @param [OCI::DataFlow::Models::UpdatePrivateEndpointDetails] update_private_endpoint_details Details for updating a private endpoint.
    #
    # @param [String] private_endpoint_id The unique ID for a private endpoint.
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/update_private_endpoint.rb.html) to see an example of how to use update_private_endpoint API.
    def update_private_endpoint(update_private_endpoint_details, private_endpoint_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#update_private_endpoint.' if logger

      raise "Missing the required parameter 'update_private_endpoint_details' when calling update_private_endpoint." if update_private_endpoint_details.nil?
      raise "Missing the required parameter 'private_endpoint_id' when calling update_private_endpoint." if private_endpoint_id.nil?
      raise "Parameter value for 'private_endpoint_id' must not be blank" if OCI::Internal::Util.blank_string?(private_endpoint_id)

      path = '/privateEndpoints/{privateEndpointId}'.sub('{privateEndpointId}', private_endpoint_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_private_endpoint_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#update_private_endpoint') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Updates a run using a `runId`.
    #
    # @param [OCI::DataFlow::Models::UpdateRunDetails] update_run_details Details for updating a run.
    #
    # @param [String] run_id The unique ID for the run
    #
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @return [Response] A Response object with data of type {OCI::DataFlow::Models::Run Run}
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/update_run.rb.html) to see an example of how to use update_run API.
    def update_run(update_run_details, run_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#update_run.' if logger

      raise "Missing the required parameter 'update_run_details' when calling update_run." if update_run_details.nil?
      raise "Missing the required parameter 'run_id' when calling update_run." if run_id.nil?
      raise "Parameter value for 'run_id' must not be blank" if OCI::Internal::Util.blank_string?(run_id)

      path = '/runs/{runId}'.sub('{runId}', run_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_run_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#update_run') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body,
          return_type: 'OCI::DataFlow::Models::Run'
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines


    # Update a Sql Endpoint resource, identified by the SqlEndpoint id.
    # @param [OCI::DataFlow::Models::UpdateSqlEndpointDetails] update_sql_endpoint_details Details of the Sql Endpoint to be updated.
    # @param [String] sql_endpoint_id The unique id of the SQL Endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [OCI::Retry::RetryConfig] :retry_config The retry configuration to apply to this operation. If no key is provided then the service-level
    #   retry configuration defined by {#retry_config} will be used. If an explicit `nil` value is provided then the operation will not retry
    # @option opts [String] :if_match For optimistic concurrency control. In the PUT or DELETE call for a resource,
    #   set the `if-match` parameter to the value of the etag from a previous GET or POST response for that resource.
    #   The resource will be updated or deleted only if the etag you provide matches the resource's current etag value.
    #
    # @option opts [String] :opc_request_id Unique identifier for the request. If provided, the returned request ID will include this value.
    #   Otherwise, a random request ID will be generated by the service.
    #
    # @return [Response] A Response object with data of type nil
    # @note Click [here](https://docs.cloud.oracle.com/en-us/iaas/tools/ruby-sdk-examples/latest/dataflow/update_sql_endpoint.rb.html) to see an example of how to use update_sql_endpoint API.
    def update_sql_endpoint(update_sql_endpoint_details, sql_endpoint_id, opts = {})
      logger.debug 'Calling operation DataFlowClient#update_sql_endpoint.' if logger

      raise "Missing the required parameter 'update_sql_endpoint_details' when calling update_sql_endpoint." if update_sql_endpoint_details.nil?
      raise "Missing the required parameter 'sql_endpoint_id' when calling update_sql_endpoint." if sql_endpoint_id.nil?
      raise "Parameter value for 'sql_endpoint_id' must not be blank" if OCI::Internal::Util.blank_string?(sql_endpoint_id)

      path = '/sqlEndpoints/{sqlEndpointId}'.sub('{sqlEndpointId}', sql_endpoint_id.to_s)
      operation_signing_strategy = :standard

      # rubocop:disable Style/NegatedIf
      # Query Params
      query_params = {}

      # Header Params
      header_params = {}
      header_params[:accept] = 'application/json'
      header_params[:'content-type'] = 'application/json'
      header_params[:'if-match'] = opts[:if_match] if opts[:if_match]
      header_params[:'opc-request-id'] = opts[:opc_request_id] if opts[:opc_request_id]
      # rubocop:enable Style/NegatedIf

      post_body = @api_client.object_to_http_body(update_sql_endpoint_details)

      # rubocop:disable Metrics/BlockLength
      OCI::Retry.make_retrying_call(applicable_retry_config(opts), call_name: 'DataFlowClient#update_sql_endpoint') do
        @api_client.call_api(
          :PUT,
          path,
          endpoint,
          header_params: header_params,
          query_params: query_params,
          operation_signing_strategy: operation_signing_strategy,
          body: post_body
        )
      end
      # rubocop:enable Metrics/BlockLength
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Style/IfUnlessModifier, Metrics/ParameterLists
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines

    private

    def applicable_retry_config(opts = {})
      return @retry_config unless opts.key?(:retry_config)

      opts[:retry_config]
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
