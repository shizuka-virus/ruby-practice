# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200129
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A run object.
  #
  class DataFlow::Models::Run
    LANGUAGE_ENUM = [
      LANGUAGE_SCALA = 'SCALA'.freeze,
      LANGUAGE_JAVA = 'JAVA'.freeze,
      LANGUAGE_PYTHON = 'PYTHON'.freeze,
      LANGUAGE_SQL = 'SQL'.freeze,
      LANGUAGE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACCEPTED = 'ACCEPTED'.freeze,
      LIFECYCLE_STATE_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      LIFECYCLE_STATE_CANCELING = 'CANCELING'.freeze,
      LIFECYCLE_STATE_CANCELED = 'CANCELED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_SUCCEEDED = 'SUCCEEDED'.freeze,
      LIFECYCLE_STATE_STOPPING = 'STOPPING'.freeze,
      LIFECYCLE_STATE_STOPPED = 'STOPPED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    TYPE_ENUM = [
      TYPE_BATCH = 'BATCH'.freeze,
      TYPE_STREAMING = 'STREAMING'.freeze,
      TYPE_SESSION = 'SESSION'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # A comma separated list of one or more archive files as Oracle Cloud Infrastructure URIs. For example, ``oci://path/to/a.zip,oci://path/to/b.zip``. An Oracle Cloud Infrastructure URI of an archive.zip file containing custom dependencies that may be used to support the execution of a Python, Java, or Scala application.
    # See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
    #
    # @return [String]
    attr_accessor :archive_uri

    # The arguments passed to the running application as command line arguments.  An argument is
    # either a plain text or a placeholder. Placeholders are replaced using values from the parameters
    # map.  Each placeholder specified must be represented in the parameters map else the request
    # (POST or PUT) will fail with a HTTP 400 status code.  Placeholders are specified as
    # `Service Api Spec`, where `name` is the name of the parameter.
    # Example:  `[ \"--input\", \"${input_file}\", \"--name\", \"John Doe\" ]`
    # If \"input_file\" has a value of \"mydata.xml\", then the value above will be translated to
    # `--input mydata.xml --name \"John Doe\"`
    #
    # @return [Array<String>]
    attr_accessor :arguments

    # **[Required]** The application ID.
    #
    # @return [String]
    attr_accessor :application_id

    # @return [OCI::DataFlow::Models::ApplicationLogConfig]
    attr_accessor :application_log_config

    # The class for the application.
    #
    # @return [String]
    attr_accessor :class_name

    # **[Required]** The OCID of a compartment.
    #
    # @return [String]
    attr_accessor :compartment_id

    # The Spark configuration passed to the running process.
    # See https://spark.apache.org/docs/latest/configuration.html#available-properties.
    # Example: { \"spark.app.name\" : \"My App Name\", \"spark.shuffle.io.maxRetries\" : \"4\" }
    # Note: Not all Spark properties are permitted to be set.  Attempting to set a property that is
    # not allowed to be overwritten will cause a 400 status to be returned.
    #
    # @return [Hash<String, String>]
    attr_accessor :configuration

    # The data read by the run in bytes.
    #
    # @return [Integer]
    attr_accessor :data_read_in_bytes

    # The data written by the run in bytes.
    #
    # @return [Integer]
    attr_accessor :data_written_in_bytes

    # Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # A user-friendly name. This name is not necessarily unique.
    #
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The VM shape for the driver. Sets the driver cores and memory.
    #
    # @return [String]
    attr_accessor :driver_shape

    # @return [OCI::DataFlow::Models::ShapeConfig]
    attr_accessor :driver_shape_config

    # The input used for spark-submit command. For more details see https://spark.apache.org/docs/latest/submitting-applications.html#launching-applications-with-spark-submit.
    # Supported options include ``--class``, ``--file``, ``--jars``, ``--conf``, ``--py-files``, and main application file with arguments.
    # Example: ``--jars oci://path/to/a.jar,oci://path/to/b.jar --files oci://path/to/a.json,oci://path/to/b.csv --py-files oci://path/to/a.py,oci://path/to/b.py --conf spark.sql.crossJoin.enabled=true --class org.apache.spark.examples.SparkPi oci://path/to/main.jar 10``
    # Note: If execute is specified together with applicationId, className, configuration, fileUri, language, arguments, parameters during application create/update, or run create/submit,
    # Data Flow service will use derived information from execute input only.
    #
    # @return [String]
    attr_accessor :execute

    # **[Required]** The VM shape for the executors. Sets the executor cores and memory.
    #
    # @return [String]
    attr_accessor :executor_shape

    # @return [OCI::DataFlow::Models::ShapeConfig]
    attr_accessor :executor_shape_config

    # **[Required]** An Oracle Cloud Infrastructure URI of the file containing the application to execute.
    # See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
    #
    # @return [String]
    attr_accessor :file_uri

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** The ID of a run.
    #
    # @return [String]
    attr_accessor :id

    # **[Required]** The Spark language.
    #
    # @return [String]
    attr_reader :language

    # The detailed messages about the lifecycle state.
    #
    # @return [String]
    attr_accessor :lifecycle_details

    # **[Required]** The current state of this run.
    #
    # @return [String]
    attr_reader :lifecycle_state

    # An Oracle Cloud Infrastructure URI of the bucket where the Spark job logs are to be uploaded.
    # See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
    #
    # @return [String]
    attr_accessor :logs_bucket_uri

    # The OCID of OCI Hive Metastore.
    #
    # @return [String]
    attr_accessor :metastore_id

    # **[Required]** The number of executor VMs requested.
    #
    # @return [Integer]
    attr_accessor :num_executors

    # Unique Oracle assigned identifier for the request.
    # If you need to contact Oracle about a particular request, please provide the request ID.
    #
    # @return [String]
    attr_accessor :opc_request_id

    # The OCID of the user who created the resource.
    #
    # @return [String]
    attr_accessor :owner_principal_id

    # The username of the user who created the resource.  If the username of the owner does not exist,
    # `null` will be returned and the caller should refer to the ownerPrincipalId value instead.
    #
    # @return [String]
    attr_accessor :owner_user_name

    # An array of name/value pairs used to fill placeholders found in properties like
    # `Application.arguments`.  The name must be a string of one or more word characters
    # (a-z, A-Z, 0-9, _).  The value can be a string of 0 or more characters of any kind.
    # Example:  [ { name: \"iterations\", value: \"10\"}, { name: \"input_file\", value: \"mydata.xml\" }, { name: \"variable_x\", value: \"${x}\"} ]
    #
    # @return [Array<OCI::DataFlow::Models::ApplicationParameter>]
    attr_accessor :parameters

    # The OCID of a pool. Unique Id to indentify a dataflow pool resource.
    #
    # @return [String]
    attr_accessor :pool_id

    # An array of DNS zone names.
    # Example: `[ \"app.examplecorp.com\", \"app.examplecorp2.com\" ]`
    #
    # @return [Array<String>]
    attr_accessor :private_endpoint_dns_zones

    # The maximum number of hosts to be accessed through the private endpoint. This value is used
    # to calculate the relevant CIDR block and should be a multiple of 256.  If the value is not a
    # multiple of 256, it is rounded up to the next multiple of 256. For example, 300 is rounded up
    # to 512.
    #
    # @return [Integer]
    attr_accessor :private_endpoint_max_host_count

    # An array of network security group OCIDs.
    #
    # @return [Array<String>]
    attr_accessor :private_endpoint_nsg_ids

    # The OCID of a private endpoint.
    #
    # @return [String]
    attr_accessor :private_endpoint_id

    # The OCID of a subnet.
    #
    # @return [String]
    attr_accessor :private_endpoint_subnet_id

    # The duration of the run in milliseconds.
    #
    # @return [Integer]
    attr_accessor :run_duration_in_milliseconds

    # **[Required]** The Spark version utilized to run the application.
    #
    # @return [String]
    attr_accessor :spark_version

    # **[Required]** The date and time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
    # Example: `2018-04-03T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The date and time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.
    # Example: `2018-04-03T21:10:29.600Z`
    #
    # @return [DateTime]
    attr_accessor :time_updated

    # The total number of oCPU requested by the run.
    #
    # @return [Integer]
    attr_accessor :total_o_cpu

    # The Spark application processing type.
    #
    # @return [String]
    attr_reader :type

    # An Oracle Cloud Infrastructure URI of the bucket to be used as default warehouse directory
    # for BATCH SQL runs.
    # See https://docs.cloud.oracle.com/iaas/Content/API/SDKDocs/hdfsconnector.htm#uriformat.
    #
    # @return [String]
    attr_accessor :warehouse_bucket_uri

    # The maximum duration in minutes for which an Application should run. Data Flow Run would be terminated
    # once it reaches this duration from the time it transitions to `IN_PROGRESS` state.
    #
    # @return [Integer]
    attr_accessor :max_duration_in_minutes

    # The timeout value in minutes used to manage Runs. A Run would be stopped after inactivity for this amount of time period.
    # Note: This parameter is currently only applicable for Runs of type `SESSION`. Default value is 2880 minutes (2 days)
    #
    # @return [Integer]
    attr_accessor :idle_timeout_in_minutes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'archive_uri': :'archiveUri',
        'arguments': :'arguments',
        'application_id': :'applicationId',
        'application_log_config': :'applicationLogConfig',
        'class_name': :'className',
        'compartment_id': :'compartmentId',
        'configuration': :'configuration',
        'data_read_in_bytes': :'dataReadInBytes',
        'data_written_in_bytes': :'dataWrittenInBytes',
        'defined_tags': :'definedTags',
        'display_name': :'displayName',
        'driver_shape': :'driverShape',
        'driver_shape_config': :'driverShapeConfig',
        'execute': :'execute',
        'executor_shape': :'executorShape',
        'executor_shape_config': :'executorShapeConfig',
        'file_uri': :'fileUri',
        'freeform_tags': :'freeformTags',
        'id': :'id',
        'language': :'language',
        'lifecycle_details': :'lifecycleDetails',
        'lifecycle_state': :'lifecycleState',
        'logs_bucket_uri': :'logsBucketUri',
        'metastore_id': :'metastoreId',
        'num_executors': :'numExecutors',
        'opc_request_id': :'opcRequestId',
        'owner_principal_id': :'ownerPrincipalId',
        'owner_user_name': :'ownerUserName',
        'parameters': :'parameters',
        'pool_id': :'poolId',
        'private_endpoint_dns_zones': :'privateEndpointDnsZones',
        'private_endpoint_max_host_count': :'privateEndpointMaxHostCount',
        'private_endpoint_nsg_ids': :'privateEndpointNsgIds',
        'private_endpoint_id': :'privateEndpointId',
        'private_endpoint_subnet_id': :'privateEndpointSubnetId',
        'run_duration_in_milliseconds': :'runDurationInMilliseconds',
        'spark_version': :'sparkVersion',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'total_o_cpu': :'totalOCpu',
        'type': :'type',
        'warehouse_bucket_uri': :'warehouseBucketUri',
        'max_duration_in_minutes': :'maxDurationInMinutes',
        'idle_timeout_in_minutes': :'idleTimeoutInMinutes'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'archive_uri': :'String',
        'arguments': :'Array<String>',
        'application_id': :'String',
        'application_log_config': :'OCI::DataFlow::Models::ApplicationLogConfig',
        'class_name': :'String',
        'compartment_id': :'String',
        'configuration': :'Hash<String, String>',
        'data_read_in_bytes': :'Integer',
        'data_written_in_bytes': :'Integer',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'display_name': :'String',
        'driver_shape': :'String',
        'driver_shape_config': :'OCI::DataFlow::Models::ShapeConfig',
        'execute': :'String',
        'executor_shape': :'String',
        'executor_shape_config': :'OCI::DataFlow::Models::ShapeConfig',
        'file_uri': :'String',
        'freeform_tags': :'Hash<String, String>',
        'id': :'String',
        'language': :'String',
        'lifecycle_details': :'String',
        'lifecycle_state': :'String',
        'logs_bucket_uri': :'String',
        'metastore_id': :'String',
        'num_executors': :'Integer',
        'opc_request_id': :'String',
        'owner_principal_id': :'String',
        'owner_user_name': :'String',
        'parameters': :'Array<OCI::DataFlow::Models::ApplicationParameter>',
        'pool_id': :'String',
        'private_endpoint_dns_zones': :'Array<String>',
        'private_endpoint_max_host_count': :'Integer',
        'private_endpoint_nsg_ids': :'Array<String>',
        'private_endpoint_id': :'String',
        'private_endpoint_subnet_id': :'String',
        'run_duration_in_milliseconds': :'Integer',
        'spark_version': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'total_o_cpu': :'Integer',
        'type': :'String',
        'warehouse_bucket_uri': :'String',
        'max_duration_in_minutes': :'Integer',
        'idle_timeout_in_minutes': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :archive_uri The value to assign to the {#archive_uri} property
    # @option attributes [Array<String>] :arguments The value to assign to the {#arguments} property
    # @option attributes [String] :application_id The value to assign to the {#application_id} property
    # @option attributes [OCI::DataFlow::Models::ApplicationLogConfig] :application_log_config The value to assign to the {#application_log_config} property
    # @option attributes [String] :class_name The value to assign to the {#class_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [Hash<String, String>] :configuration The value to assign to the {#configuration} property
    # @option attributes [Integer] :data_read_in_bytes The value to assign to the {#data_read_in_bytes} property
    # @option attributes [Integer] :data_written_in_bytes The value to assign to the {#data_written_in_bytes} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :driver_shape The value to assign to the {#driver_shape} property
    # @option attributes [OCI::DataFlow::Models::ShapeConfig] :driver_shape_config The value to assign to the {#driver_shape_config} property
    # @option attributes [String] :execute The value to assign to the {#execute} property
    # @option attributes [String] :executor_shape The value to assign to the {#executor_shape} property
    # @option attributes [OCI::DataFlow::Models::ShapeConfig] :executor_shape_config The value to assign to the {#executor_shape_config} property
    # @option attributes [String] :file_uri The value to assign to the {#file_uri} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :language The value to assign to the {#language} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :logs_bucket_uri The value to assign to the {#logs_bucket_uri} property
    # @option attributes [String] :metastore_id The value to assign to the {#metastore_id} property
    # @option attributes [Integer] :num_executors The value to assign to the {#num_executors} property
    # @option attributes [String] :opc_request_id The value to assign to the {#opc_request_id} property
    # @option attributes [String] :owner_principal_id The value to assign to the {#owner_principal_id} property
    # @option attributes [String] :owner_user_name The value to assign to the {#owner_user_name} property
    # @option attributes [Array<OCI::DataFlow::Models::ApplicationParameter>] :parameters The value to assign to the {#parameters} property
    # @option attributes [String] :pool_id The value to assign to the {#pool_id} property
    # @option attributes [Array<String>] :private_endpoint_dns_zones The value to assign to the {#private_endpoint_dns_zones} property
    # @option attributes [Integer] :private_endpoint_max_host_count The value to assign to the {#private_endpoint_max_host_count} property
    # @option attributes [Array<String>] :private_endpoint_nsg_ids The value to assign to the {#private_endpoint_nsg_ids} property
    # @option attributes [String] :private_endpoint_id The value to assign to the {#private_endpoint_id} property
    # @option attributes [String] :private_endpoint_subnet_id The value to assign to the {#private_endpoint_subnet_id} property
    # @option attributes [Integer] :run_duration_in_milliseconds The value to assign to the {#run_duration_in_milliseconds} property
    # @option attributes [String] :spark_version The value to assign to the {#spark_version} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [Integer] :total_o_cpu The value to assign to the {#total_o_cpu} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :warehouse_bucket_uri The value to assign to the {#warehouse_bucket_uri} property
    # @option attributes [Integer] :max_duration_in_minutes The value to assign to the {#max_duration_in_minutes} property
    # @option attributes [Integer] :idle_timeout_in_minutes The value to assign to the {#idle_timeout_in_minutes} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.archive_uri = attributes[:'archiveUri'] if attributes[:'archiveUri']

      raise 'You cannot provide both :archiveUri and :archive_uri' if attributes.key?(:'archiveUri') && attributes.key?(:'archive_uri')

      self.archive_uri = attributes[:'archive_uri'] if attributes[:'archive_uri']

      self.arguments = attributes[:'arguments'] if attributes[:'arguments']

      self.application_id = attributes[:'applicationId'] if attributes[:'applicationId']

      raise 'You cannot provide both :applicationId and :application_id' if attributes.key?(:'applicationId') && attributes.key?(:'application_id')

      self.application_id = attributes[:'application_id'] if attributes[:'application_id']

      self.application_log_config = attributes[:'applicationLogConfig'] if attributes[:'applicationLogConfig']

      raise 'You cannot provide both :applicationLogConfig and :application_log_config' if attributes.key?(:'applicationLogConfig') && attributes.key?(:'application_log_config')

      self.application_log_config = attributes[:'application_log_config'] if attributes[:'application_log_config']

      self.class_name = attributes[:'className'] if attributes[:'className']

      raise 'You cannot provide both :className and :class_name' if attributes.key?(:'className') && attributes.key?(:'class_name')

      self.class_name = attributes[:'class_name'] if attributes[:'class_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.configuration = attributes[:'configuration'] if attributes[:'configuration']

      self.data_read_in_bytes = attributes[:'dataReadInBytes'] if attributes[:'dataReadInBytes']

      raise 'You cannot provide both :dataReadInBytes and :data_read_in_bytes' if attributes.key?(:'dataReadInBytes') && attributes.key?(:'data_read_in_bytes')

      self.data_read_in_bytes = attributes[:'data_read_in_bytes'] if attributes[:'data_read_in_bytes']

      self.data_written_in_bytes = attributes[:'dataWrittenInBytes'] if attributes[:'dataWrittenInBytes']

      raise 'You cannot provide both :dataWrittenInBytes and :data_written_in_bytes' if attributes.key?(:'dataWrittenInBytes') && attributes.key?(:'data_written_in_bytes')

      self.data_written_in_bytes = attributes[:'data_written_in_bytes'] if attributes[:'data_written_in_bytes']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.driver_shape = attributes[:'driverShape'] if attributes[:'driverShape']

      raise 'You cannot provide both :driverShape and :driver_shape' if attributes.key?(:'driverShape') && attributes.key?(:'driver_shape')

      self.driver_shape = attributes[:'driver_shape'] if attributes[:'driver_shape']

      self.driver_shape_config = attributes[:'driverShapeConfig'] if attributes[:'driverShapeConfig']

      raise 'You cannot provide both :driverShapeConfig and :driver_shape_config' if attributes.key?(:'driverShapeConfig') && attributes.key?(:'driver_shape_config')

      self.driver_shape_config = attributes[:'driver_shape_config'] if attributes[:'driver_shape_config']

      self.execute = attributes[:'execute'] if attributes[:'execute']

      self.executor_shape = attributes[:'executorShape'] if attributes[:'executorShape']

      raise 'You cannot provide both :executorShape and :executor_shape' if attributes.key?(:'executorShape') && attributes.key?(:'executor_shape')

      self.executor_shape = attributes[:'executor_shape'] if attributes[:'executor_shape']

      self.executor_shape_config = attributes[:'executorShapeConfig'] if attributes[:'executorShapeConfig']

      raise 'You cannot provide both :executorShapeConfig and :executor_shape_config' if attributes.key?(:'executorShapeConfig') && attributes.key?(:'executor_shape_config')

      self.executor_shape_config = attributes[:'executor_shape_config'] if attributes[:'executor_shape_config']

      self.file_uri = attributes[:'fileUri'] if attributes[:'fileUri']

      raise 'You cannot provide both :fileUri and :file_uri' if attributes.key?(:'fileUri') && attributes.key?(:'file_uri')

      self.file_uri = attributes[:'file_uri'] if attributes[:'file_uri']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.id = attributes[:'id'] if attributes[:'id']

      self.language = attributes[:'language'] if attributes[:'language']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.logs_bucket_uri = attributes[:'logsBucketUri'] if attributes[:'logsBucketUri']

      raise 'You cannot provide both :logsBucketUri and :logs_bucket_uri' if attributes.key?(:'logsBucketUri') && attributes.key?(:'logs_bucket_uri')

      self.logs_bucket_uri = attributes[:'logs_bucket_uri'] if attributes[:'logs_bucket_uri']

      self.metastore_id = attributes[:'metastoreId'] if attributes[:'metastoreId']

      raise 'You cannot provide both :metastoreId and :metastore_id' if attributes.key?(:'metastoreId') && attributes.key?(:'metastore_id')

      self.metastore_id = attributes[:'metastore_id'] if attributes[:'metastore_id']

      self.num_executors = attributes[:'numExecutors'] if attributes[:'numExecutors']

      raise 'You cannot provide both :numExecutors and :num_executors' if attributes.key?(:'numExecutors') && attributes.key?(:'num_executors')

      self.num_executors = attributes[:'num_executors'] if attributes[:'num_executors']

      self.opc_request_id = attributes[:'opcRequestId'] if attributes[:'opcRequestId']

      raise 'You cannot provide both :opcRequestId and :opc_request_id' if attributes.key?(:'opcRequestId') && attributes.key?(:'opc_request_id')

      self.opc_request_id = attributes[:'opc_request_id'] if attributes[:'opc_request_id']

      self.owner_principal_id = attributes[:'ownerPrincipalId'] if attributes[:'ownerPrincipalId']

      raise 'You cannot provide both :ownerPrincipalId and :owner_principal_id' if attributes.key?(:'ownerPrincipalId') && attributes.key?(:'owner_principal_id')

      self.owner_principal_id = attributes[:'owner_principal_id'] if attributes[:'owner_principal_id']

      self.owner_user_name = attributes[:'ownerUserName'] if attributes[:'ownerUserName']

      raise 'You cannot provide both :ownerUserName and :owner_user_name' if attributes.key?(:'ownerUserName') && attributes.key?(:'owner_user_name')

      self.owner_user_name = attributes[:'owner_user_name'] if attributes[:'owner_user_name']

      self.parameters = attributes[:'parameters'] if attributes[:'parameters']

      self.pool_id = attributes[:'poolId'] if attributes[:'poolId']

      raise 'You cannot provide both :poolId and :pool_id' if attributes.key?(:'poolId') && attributes.key?(:'pool_id')

      self.pool_id = attributes[:'pool_id'] if attributes[:'pool_id']

      self.private_endpoint_dns_zones = attributes[:'privateEndpointDnsZones'] if attributes[:'privateEndpointDnsZones']

      raise 'You cannot provide both :privateEndpointDnsZones and :private_endpoint_dns_zones' if attributes.key?(:'privateEndpointDnsZones') && attributes.key?(:'private_endpoint_dns_zones')

      self.private_endpoint_dns_zones = attributes[:'private_endpoint_dns_zones'] if attributes[:'private_endpoint_dns_zones']

      self.private_endpoint_max_host_count = attributes[:'privateEndpointMaxHostCount'] if attributes[:'privateEndpointMaxHostCount']

      raise 'You cannot provide both :privateEndpointMaxHostCount and :private_endpoint_max_host_count' if attributes.key?(:'privateEndpointMaxHostCount') && attributes.key?(:'private_endpoint_max_host_count')

      self.private_endpoint_max_host_count = attributes[:'private_endpoint_max_host_count'] if attributes[:'private_endpoint_max_host_count']

      self.private_endpoint_nsg_ids = attributes[:'privateEndpointNsgIds'] if attributes[:'privateEndpointNsgIds']

      raise 'You cannot provide both :privateEndpointNsgIds and :private_endpoint_nsg_ids' if attributes.key?(:'privateEndpointNsgIds') && attributes.key?(:'private_endpoint_nsg_ids')

      self.private_endpoint_nsg_ids = attributes[:'private_endpoint_nsg_ids'] if attributes[:'private_endpoint_nsg_ids']

      self.private_endpoint_id = attributes[:'privateEndpointId'] if attributes[:'privateEndpointId']

      raise 'You cannot provide both :privateEndpointId and :private_endpoint_id' if attributes.key?(:'privateEndpointId') && attributes.key?(:'private_endpoint_id')

      self.private_endpoint_id = attributes[:'private_endpoint_id'] if attributes[:'private_endpoint_id']

      self.private_endpoint_subnet_id = attributes[:'privateEndpointSubnetId'] if attributes[:'privateEndpointSubnetId']

      raise 'You cannot provide both :privateEndpointSubnetId and :private_endpoint_subnet_id' if attributes.key?(:'privateEndpointSubnetId') && attributes.key?(:'private_endpoint_subnet_id')

      self.private_endpoint_subnet_id = attributes[:'private_endpoint_subnet_id'] if attributes[:'private_endpoint_subnet_id']

      self.run_duration_in_milliseconds = attributes[:'runDurationInMilliseconds'] if attributes[:'runDurationInMilliseconds']

      raise 'You cannot provide both :runDurationInMilliseconds and :run_duration_in_milliseconds' if attributes.key?(:'runDurationInMilliseconds') && attributes.key?(:'run_duration_in_milliseconds')

      self.run_duration_in_milliseconds = attributes[:'run_duration_in_milliseconds'] if attributes[:'run_duration_in_milliseconds']

      self.spark_version = attributes[:'sparkVersion'] if attributes[:'sparkVersion']

      raise 'You cannot provide both :sparkVersion and :spark_version' if attributes.key?(:'sparkVersion') && attributes.key?(:'spark_version')

      self.spark_version = attributes[:'spark_version'] if attributes[:'spark_version']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.total_o_cpu = attributes[:'totalOCpu'] if attributes[:'totalOCpu']

      raise 'You cannot provide both :totalOCpu and :total_o_cpu' if attributes.key?(:'totalOCpu') && attributes.key?(:'total_o_cpu')

      self.total_o_cpu = attributes[:'total_o_cpu'] if attributes[:'total_o_cpu']

      self.type = attributes[:'type'] if attributes[:'type']
      self.type = "BATCH" if type.nil? && !attributes.key?(:'type') # rubocop:disable Style/StringLiterals

      self.warehouse_bucket_uri = attributes[:'warehouseBucketUri'] if attributes[:'warehouseBucketUri']

      raise 'You cannot provide both :warehouseBucketUri and :warehouse_bucket_uri' if attributes.key?(:'warehouseBucketUri') && attributes.key?(:'warehouse_bucket_uri')

      self.warehouse_bucket_uri = attributes[:'warehouse_bucket_uri'] if attributes[:'warehouse_bucket_uri']

      self.max_duration_in_minutes = attributes[:'maxDurationInMinutes'] if attributes[:'maxDurationInMinutes']

      raise 'You cannot provide both :maxDurationInMinutes and :max_duration_in_minutes' if attributes.key?(:'maxDurationInMinutes') && attributes.key?(:'max_duration_in_minutes')

      self.max_duration_in_minutes = attributes[:'max_duration_in_minutes'] if attributes[:'max_duration_in_minutes']

      self.idle_timeout_in_minutes = attributes[:'idleTimeoutInMinutes'] if attributes[:'idleTimeoutInMinutes']
      self.idle_timeout_in_minutes = 2880 if idle_timeout_in_minutes.nil? && !attributes.key?(:'idleTimeoutInMinutes') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :idleTimeoutInMinutes and :idle_timeout_in_minutes' if attributes.key?(:'idleTimeoutInMinutes') && attributes.key?(:'idle_timeout_in_minutes')

      self.idle_timeout_in_minutes = attributes[:'idle_timeout_in_minutes'] if attributes[:'idle_timeout_in_minutes']
      self.idle_timeout_in_minutes = 2880 if idle_timeout_in_minutes.nil? && !attributes.key?(:'idleTimeoutInMinutes') && !attributes.key?(:'idle_timeout_in_minutes') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] language Object to be assigned
    def language=(language)
      # rubocop:disable Style/ConditionalAssignment
      if language && !LANGUAGE_ENUM.include?(language)
        OCI.logger.debug("Unknown value for 'language' [" + language + "]. Mapping to 'LANGUAGE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @language = LANGUAGE_UNKNOWN_ENUM_VALUE
      else
        @language = language
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        archive_uri == other.archive_uri &&
        arguments == other.arguments &&
        application_id == other.application_id &&
        application_log_config == other.application_log_config &&
        class_name == other.class_name &&
        compartment_id == other.compartment_id &&
        configuration == other.configuration &&
        data_read_in_bytes == other.data_read_in_bytes &&
        data_written_in_bytes == other.data_written_in_bytes &&
        defined_tags == other.defined_tags &&
        display_name == other.display_name &&
        driver_shape == other.driver_shape &&
        driver_shape_config == other.driver_shape_config &&
        execute == other.execute &&
        executor_shape == other.executor_shape &&
        executor_shape_config == other.executor_shape_config &&
        file_uri == other.file_uri &&
        freeform_tags == other.freeform_tags &&
        id == other.id &&
        language == other.language &&
        lifecycle_details == other.lifecycle_details &&
        lifecycle_state == other.lifecycle_state &&
        logs_bucket_uri == other.logs_bucket_uri &&
        metastore_id == other.metastore_id &&
        num_executors == other.num_executors &&
        opc_request_id == other.opc_request_id &&
        owner_principal_id == other.owner_principal_id &&
        owner_user_name == other.owner_user_name &&
        parameters == other.parameters &&
        pool_id == other.pool_id &&
        private_endpoint_dns_zones == other.private_endpoint_dns_zones &&
        private_endpoint_max_host_count == other.private_endpoint_max_host_count &&
        private_endpoint_nsg_ids == other.private_endpoint_nsg_ids &&
        private_endpoint_id == other.private_endpoint_id &&
        private_endpoint_subnet_id == other.private_endpoint_subnet_id &&
        run_duration_in_milliseconds == other.run_duration_in_milliseconds &&
        spark_version == other.spark_version &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        total_o_cpu == other.total_o_cpu &&
        type == other.type &&
        warehouse_bucket_uri == other.warehouse_bucket_uri &&
        max_duration_in_minutes == other.max_duration_in_minutes &&
        idle_timeout_in_minutes == other.idle_timeout_in_minutes
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [archive_uri, arguments, application_id, application_log_config, class_name, compartment_id, configuration, data_read_in_bytes, data_written_in_bytes, defined_tags, display_name, driver_shape, driver_shape_config, execute, executor_shape, executor_shape_config, file_uri, freeform_tags, id, language, lifecycle_details, lifecycle_state, logs_bucket_uri, metastore_id, num_executors, opc_request_id, owner_principal_id, owner_user_name, parameters, pool_id, private_endpoint_dns_zones, private_endpoint_max_host_count, private_endpoint_nsg_ids, private_endpoint_id, private_endpoint_subnet_id, run_duration_in_milliseconds, spark_version, time_created, time_updated, total_o_cpu, type, warehouse_bucket_uri, max_duration_in_minutes, idle_timeout_in_minutes].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
