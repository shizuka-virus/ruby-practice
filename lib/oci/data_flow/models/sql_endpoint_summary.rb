# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20200129
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A summary of the Sql Endpoint.
  class DataFlow::Models::SqlEndpointSummary
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The provision identifier that is immutable on creation.
    # @return [String]
    attr_accessor :id

    # **[Required]** The SQL Endpoint name, which can be changed.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The OCID of a compartment.
    #
    # @return [String]
    attr_accessor :compartment_id

    # The JDBC URL field. For example, jdbc:spark://{serviceFQDN}:443/default;SparkServerType=DFI
    # @return [String]
    attr_accessor :jdbc_endpoint_url

    # The time the Sql Endpoint was created. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # The time the Sql Endpoint was updated. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # The current state of the Sql Endpoint.
    # @return [String]
    attr_reader :lifecycle_state

    # A message describing the reason why the resource is in it's current state. Helps bubble up errors in state changes. For example, it can be used to provide actionable information for a resource in the Failed state.
    # @return [String]
    attr_accessor :state_message

    # **[Required]** The version of SQL Endpoint.
    # @return [String]
    attr_accessor :sql_endpoint_version

    # **[Required]** The shape of the SQL Endpoint driver instance.
    # @return [String]
    attr_accessor :driver_shape

    # @return [OCI::DataFlow::Models::ShapeConfig]
    attr_accessor :driver_shape_config

    # **[Required]** The shape of the SQL Endpoint executor instance.
    # @return [String]
    attr_accessor :executor_shape

    # @return [OCI::DataFlow::Models::ShapeConfig]
    attr_accessor :executor_shape_config

    # **[Required]** The minimum number of executors.
    # @return [Integer]
    attr_accessor :min_executor_count

    # **[Required]** The maximum number of executors.
    # @return [Integer]
    attr_accessor :max_executor_count

    # The OCID of the user who created the resource.
    #
    # @return [String]
    attr_accessor :owner_principal_id

    # **[Required]** The OCID of OCI Hive Metastore.
    #
    # @return [String]
    attr_accessor :metastore_id

    # **[Required]** The OCID of OCI Lake.
    # @return [String]
    attr_accessor :lake_id

    # **[Required]** The warehouse bucket URI. It is a Oracle Cloud Infrastructure Object Storage bucket URI as defined here https://docs.oracle.com/en/cloud/paas/atp-cloud/atpud/object-storage-uris.html
    # @return [String]
    attr_accessor :warehouse_bucket_uri

    # **[Required]** The description of the SQL Endpoint.
    # @return [String]
    attr_accessor :description

    # This token is used by Splat, and indicates that the service accepts the request, and that the request is currently being processed.
    # @return [String]
    attr_accessor :last_accepted_request_token

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # The system tags associated with this resource, if any. The system tags are set by Oracle cloud infrastructure services. Each key is predefined and scoped to namespaces.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
    # Example: `{orcl-cloud: {free-tier-retain: true}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # The Spark configuration passed to the running process.
    # See https://spark.apache.org/docs/latest/configuration.html#available-properties.
    # Example: { \"spark.app.name\" : \"My App Name\", \"spark.shuffle.io.maxRetries\" : \"4\" }
    # Note: Not all Spark properties are permitted to be set.  Attempting to set a property that is
    # not allowed to be overwritten will cause a 400 status to be returned.
    #
    # @return [Hash<String, String>]
    attr_accessor :spark_advanced_configurations

    # @return [OCI::DataFlow::Models::SqlEndpointNetworkConfiguration]
    attr_accessor :network_configuration

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'compartment_id': :'compartmentId',
        'jdbc_endpoint_url': :'jdbcEndpointUrl',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState',
        'state_message': :'stateMessage',
        'sql_endpoint_version': :'sqlEndpointVersion',
        'driver_shape': :'driverShape',
        'driver_shape_config': :'driverShapeConfig',
        'executor_shape': :'executorShape',
        'executor_shape_config': :'executorShapeConfig',
        'min_executor_count': :'minExecutorCount',
        'max_executor_count': :'maxExecutorCount',
        'owner_principal_id': :'ownerPrincipalId',
        'metastore_id': :'metastoreId',
        'lake_id': :'lakeId',
        'warehouse_bucket_uri': :'warehouseBucketUri',
        'description': :'description',
        'last_accepted_request_token': :'lastAcceptedRequestToken',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags',
        'spark_advanced_configurations': :'sparkAdvancedConfigurations',
        'network_configuration': :'networkConfiguration'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'compartment_id': :'String',
        'jdbc_endpoint_url': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String',
        'state_message': :'String',
        'sql_endpoint_version': :'String',
        'driver_shape': :'String',
        'driver_shape_config': :'OCI::DataFlow::Models::ShapeConfig',
        'executor_shape': :'String',
        'executor_shape_config': :'OCI::DataFlow::Models::ShapeConfig',
        'min_executor_count': :'Integer',
        'max_executor_count': :'Integer',
        'owner_principal_id': :'String',
        'metastore_id': :'String',
        'lake_id': :'String',
        'warehouse_bucket_uri': :'String',
        'description': :'String',
        'last_accepted_request_token': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>',
        'spark_advanced_configurations': :'Hash<String, String>',
        'network_configuration': :'OCI::DataFlow::Models::SqlEndpointNetworkConfiguration'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :jdbc_endpoint_url The value to assign to the {#jdbc_endpoint_url} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :state_message The value to assign to the {#state_message} property
    # @option attributes [String] :sql_endpoint_version The value to assign to the {#sql_endpoint_version} property
    # @option attributes [String] :driver_shape The value to assign to the {#driver_shape} property
    # @option attributes [OCI::DataFlow::Models::ShapeConfig] :driver_shape_config The value to assign to the {#driver_shape_config} property
    # @option attributes [String] :executor_shape The value to assign to the {#executor_shape} property
    # @option attributes [OCI::DataFlow::Models::ShapeConfig] :executor_shape_config The value to assign to the {#executor_shape_config} property
    # @option attributes [Integer] :min_executor_count The value to assign to the {#min_executor_count} property
    # @option attributes [Integer] :max_executor_count The value to assign to the {#max_executor_count} property
    # @option attributes [String] :owner_principal_id The value to assign to the {#owner_principal_id} property
    # @option attributes [String] :metastore_id The value to assign to the {#metastore_id} property
    # @option attributes [String] :lake_id The value to assign to the {#lake_id} property
    # @option attributes [String] :warehouse_bucket_uri The value to assign to the {#warehouse_bucket_uri} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :last_accepted_request_token The value to assign to the {#last_accepted_request_token} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    # @option attributes [Hash<String, String>] :spark_advanced_configurations The value to assign to the {#spark_advanced_configurations} property
    # @option attributes [OCI::DataFlow::Models::SqlEndpointNetworkConfiguration] :network_configuration The value to assign to the {#network_configuration} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.jdbc_endpoint_url = attributes[:'jdbcEndpointUrl'] if attributes[:'jdbcEndpointUrl']

      raise 'You cannot provide both :jdbcEndpointUrl and :jdbc_endpoint_url' if attributes.key?(:'jdbcEndpointUrl') && attributes.key?(:'jdbc_endpoint_url')

      self.jdbc_endpoint_url = attributes[:'jdbc_endpoint_url'] if attributes[:'jdbc_endpoint_url']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.state_message = attributes[:'stateMessage'] if attributes[:'stateMessage']

      raise 'You cannot provide both :stateMessage and :state_message' if attributes.key?(:'stateMessage') && attributes.key?(:'state_message')

      self.state_message = attributes[:'state_message'] if attributes[:'state_message']

      self.sql_endpoint_version = attributes[:'sqlEndpointVersion'] if attributes[:'sqlEndpointVersion']

      raise 'You cannot provide both :sqlEndpointVersion and :sql_endpoint_version' if attributes.key?(:'sqlEndpointVersion') && attributes.key?(:'sql_endpoint_version')

      self.sql_endpoint_version = attributes[:'sql_endpoint_version'] if attributes[:'sql_endpoint_version']

      self.driver_shape = attributes[:'driverShape'] if attributes[:'driverShape']

      raise 'You cannot provide both :driverShape and :driver_shape' if attributes.key?(:'driverShape') && attributes.key?(:'driver_shape')

      self.driver_shape = attributes[:'driver_shape'] if attributes[:'driver_shape']

      self.driver_shape_config = attributes[:'driverShapeConfig'] if attributes[:'driverShapeConfig']

      raise 'You cannot provide both :driverShapeConfig and :driver_shape_config' if attributes.key?(:'driverShapeConfig') && attributes.key?(:'driver_shape_config')

      self.driver_shape_config = attributes[:'driver_shape_config'] if attributes[:'driver_shape_config']

      self.executor_shape = attributes[:'executorShape'] if attributes[:'executorShape']

      raise 'You cannot provide both :executorShape and :executor_shape' if attributes.key?(:'executorShape') && attributes.key?(:'executor_shape')

      self.executor_shape = attributes[:'executor_shape'] if attributes[:'executor_shape']

      self.executor_shape_config = attributes[:'executorShapeConfig'] if attributes[:'executorShapeConfig']

      raise 'You cannot provide both :executorShapeConfig and :executor_shape_config' if attributes.key?(:'executorShapeConfig') && attributes.key?(:'executor_shape_config')

      self.executor_shape_config = attributes[:'executor_shape_config'] if attributes[:'executor_shape_config']

      self.min_executor_count = attributes[:'minExecutorCount'] if attributes[:'minExecutorCount']

      raise 'You cannot provide both :minExecutorCount and :min_executor_count' if attributes.key?(:'minExecutorCount') && attributes.key?(:'min_executor_count')

      self.min_executor_count = attributes[:'min_executor_count'] if attributes[:'min_executor_count']

      self.max_executor_count = attributes[:'maxExecutorCount'] if attributes[:'maxExecutorCount']

      raise 'You cannot provide both :maxExecutorCount and :max_executor_count' if attributes.key?(:'maxExecutorCount') && attributes.key?(:'max_executor_count')

      self.max_executor_count = attributes[:'max_executor_count'] if attributes[:'max_executor_count']

      self.owner_principal_id = attributes[:'ownerPrincipalId'] if attributes[:'ownerPrincipalId']

      raise 'You cannot provide both :ownerPrincipalId and :owner_principal_id' if attributes.key?(:'ownerPrincipalId') && attributes.key?(:'owner_principal_id')

      self.owner_principal_id = attributes[:'owner_principal_id'] if attributes[:'owner_principal_id']

      self.metastore_id = attributes[:'metastoreId'] if attributes[:'metastoreId']

      raise 'You cannot provide both :metastoreId and :metastore_id' if attributes.key?(:'metastoreId') && attributes.key?(:'metastore_id')

      self.metastore_id = attributes[:'metastore_id'] if attributes[:'metastore_id']

      self.lake_id = attributes[:'lakeId'] if attributes[:'lakeId']

      raise 'You cannot provide both :lakeId and :lake_id' if attributes.key?(:'lakeId') && attributes.key?(:'lake_id')

      self.lake_id = attributes[:'lake_id'] if attributes[:'lake_id']

      self.warehouse_bucket_uri = attributes[:'warehouseBucketUri'] if attributes[:'warehouseBucketUri']

      raise 'You cannot provide both :warehouseBucketUri and :warehouse_bucket_uri' if attributes.key?(:'warehouseBucketUri') && attributes.key?(:'warehouse_bucket_uri')

      self.warehouse_bucket_uri = attributes[:'warehouse_bucket_uri'] if attributes[:'warehouse_bucket_uri']

      self.description = attributes[:'description'] if attributes[:'description']

      self.last_accepted_request_token = attributes[:'lastAcceptedRequestToken'] if attributes[:'lastAcceptedRequestToken']

      raise 'You cannot provide both :lastAcceptedRequestToken and :last_accepted_request_token' if attributes.key?(:'lastAcceptedRequestToken') && attributes.key?(:'last_accepted_request_token')

      self.last_accepted_request_token = attributes[:'last_accepted_request_token'] if attributes[:'last_accepted_request_token']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']

      self.spark_advanced_configurations = attributes[:'sparkAdvancedConfigurations'] if attributes[:'sparkAdvancedConfigurations']

      raise 'You cannot provide both :sparkAdvancedConfigurations and :spark_advanced_configurations' if attributes.key?(:'sparkAdvancedConfigurations') && attributes.key?(:'spark_advanced_configurations')

      self.spark_advanced_configurations = attributes[:'spark_advanced_configurations'] if attributes[:'spark_advanced_configurations']

      self.network_configuration = attributes[:'networkConfiguration'] if attributes[:'networkConfiguration']

      raise 'You cannot provide both :networkConfiguration and :network_configuration' if attributes.key?(:'networkConfiguration') && attributes.key?(:'network_configuration')

      self.network_configuration = attributes[:'network_configuration'] if attributes[:'network_configuration']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        compartment_id == other.compartment_id &&
        jdbc_endpoint_url == other.jdbc_endpoint_url &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state &&
        state_message == other.state_message &&
        sql_endpoint_version == other.sql_endpoint_version &&
        driver_shape == other.driver_shape &&
        driver_shape_config == other.driver_shape_config &&
        executor_shape == other.executor_shape &&
        executor_shape_config == other.executor_shape_config &&
        min_executor_count == other.min_executor_count &&
        max_executor_count == other.max_executor_count &&
        owner_principal_id == other.owner_principal_id &&
        metastore_id == other.metastore_id &&
        lake_id == other.lake_id &&
        warehouse_bucket_uri == other.warehouse_bucket_uri &&
        description == other.description &&
        last_accepted_request_token == other.last_accepted_request_token &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags &&
        spark_advanced_configurations == other.spark_advanced_configurations &&
        network_configuration == other.network_configuration
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, compartment_id, jdbc_endpoint_url, time_created, time_updated, lifecycle_state, state_message, sql_endpoint_version, driver_shape, driver_shape_config, executor_shape, executor_shape_config, min_executor_count, max_executor_count, owner_principal_id, metastore_id, lake_id, warehouse_bucket_uri, description, last_accepted_request_token, freeform_tags, defined_tags, system_tags, spark_advanced_configurations, network_configuration].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
