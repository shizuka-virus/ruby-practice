# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The scheduling details for the quarterly maintenance window. Patching and system updates take place during the maintenance window.
  #
  class Database::Models::MaintenanceWindow
    PREFERENCE_ENUM = [
      PREFERENCE_NO_PREFERENCE = 'NO_PREFERENCE'.freeze,
      PREFERENCE_CUSTOM_PREFERENCE = 'CUSTOM_PREFERENCE'.freeze,
      PREFERENCE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    PATCHING_MODE_ENUM = [
      PATCHING_MODE_ROLLING = 'ROLLING'.freeze,
      PATCHING_MODE_NONROLLING = 'NONROLLING'.freeze,
      PATCHING_MODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The maintenance window scheduling preference.
    # @return [String]
    attr_reader :preference

    # Cloud Exadata infrastructure node patching method, either \"ROLLING\" or \"NONROLLING\". Default value is ROLLING.
    #
    # *IMPORTANT*: Non-rolling infrastructure patching involves system down time. See [Oracle-Managed Infrastructure Maintenance Updates](https://docs.cloud.oracle.com/iaas/Content/Database/Concepts/examaintenance.htm#Oracle) for more information.
    #
    # @return [String]
    attr_reader :patching_mode

    # If true, enables the configuration of a custom action timeout (waiting period) between database server patching operations.
    # @return [BOOLEAN]
    attr_accessor :is_custom_action_timeout_enabled

    # Determines the amount of time the system will wait before the start of each database server patching operation.
    # Custom action timeout is in minutes and valid value is between 15 to 120 (inclusive).
    #
    # @return [Integer]
    attr_accessor :custom_action_timeout_in_mins

    # If true, enables the monthly patching option.
    # @return [BOOLEAN]
    attr_accessor :is_monthly_patching_enabled

    # Months during the year when maintenance should be performed.
    # @return [Array<OCI::Database::Models::Month>]
    attr_accessor :months

    # Weeks during the month when maintenance should be performed. Weeks start on the 1st, 8th, 15th, and 22nd days of the month, and have a duration of 7 days. Weeks start and end based on calendar dates, not days of the week.
    # For example, to allow maintenance during the 2nd week of the month (from the 8th day to the 14th day of the month), use the value 2. Maintenance cannot be scheduled for the fifth week of months that contain more than 28 days.
    # Note that this parameter works in conjunction with the  daysOfWeek and hoursOfDay parameters to allow you to specify specific days of the week and hours that maintenance will be performed.
    #
    # @return [Array<Integer>]
    attr_accessor :weeks_of_month

    # Days during the week when maintenance should be performed.
    # @return [Array<OCI::Database::Models::DayOfWeek>]
    attr_accessor :days_of_week

    # The window of hours during the day when maintenance should be performed. The window is a 4 hour slot. Valid values are
    # - 0 - represents time slot 0:00 - 3:59 UTC - 4 - represents time slot 4:00 - 7:59 UTC - 8 - represents time slot 8:00 - 11:59 UTC - 12 - represents time slot 12:00 - 15:59 UTC - 16 - represents time slot 16:00 - 19:59 UTC - 20 - represents time slot 20:00 - 23:59 UTC
    # @return [Array<Integer>]
    attr_accessor :hours_of_day

    # Lead time window allows user to set a lead time to prepare for a down time. The lead time is in weeks and valid value is between 1 to 4.
    #
    # @return [Integer]
    attr_accessor :lead_time_in_weeks

    # If true, skips the release update (RU) for the quarter. You cannot skip two consecutive quarters. An RU skip request will only be honoured if the current version of the Autonomous Container Database is supported for current quarter.
    #
    # @return [Array<BOOLEAN>]
    attr_accessor :skip_ru

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'preference': :'preference',
        'patching_mode': :'patchingMode',
        'is_custom_action_timeout_enabled': :'isCustomActionTimeoutEnabled',
        'custom_action_timeout_in_mins': :'customActionTimeoutInMins',
        'is_monthly_patching_enabled': :'isMonthlyPatchingEnabled',
        'months': :'months',
        'weeks_of_month': :'weeksOfMonth',
        'days_of_week': :'daysOfWeek',
        'hours_of_day': :'hoursOfDay',
        'lead_time_in_weeks': :'leadTimeInWeeks',
        'skip_ru': :'skipRu'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'preference': :'String',
        'patching_mode': :'String',
        'is_custom_action_timeout_enabled': :'BOOLEAN',
        'custom_action_timeout_in_mins': :'Integer',
        'is_monthly_patching_enabled': :'BOOLEAN',
        'months': :'Array<OCI::Database::Models::Month>',
        'weeks_of_month': :'Array<Integer>',
        'days_of_week': :'Array<OCI::Database::Models::DayOfWeek>',
        'hours_of_day': :'Array<Integer>',
        'lead_time_in_weeks': :'Integer',
        'skip_ru': :'Array<BOOLEAN>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :preference The value to assign to the {#preference} property
    # @option attributes [String] :patching_mode The value to assign to the {#patching_mode} property
    # @option attributes [BOOLEAN] :is_custom_action_timeout_enabled The value to assign to the {#is_custom_action_timeout_enabled} property
    # @option attributes [Integer] :custom_action_timeout_in_mins The value to assign to the {#custom_action_timeout_in_mins} property
    # @option attributes [BOOLEAN] :is_monthly_patching_enabled The value to assign to the {#is_monthly_patching_enabled} property
    # @option attributes [Array<OCI::Database::Models::Month>] :months The value to assign to the {#months} property
    # @option attributes [Array<Integer>] :weeks_of_month The value to assign to the {#weeks_of_month} property
    # @option attributes [Array<OCI::Database::Models::DayOfWeek>] :days_of_week The value to assign to the {#days_of_week} property
    # @option attributes [Array<Integer>] :hours_of_day The value to assign to the {#hours_of_day} property
    # @option attributes [Integer] :lead_time_in_weeks The value to assign to the {#lead_time_in_weeks} property
    # @option attributes [Array<BOOLEAN>] :skip_ru The value to assign to the {#skip_ru} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.preference = attributes[:'preference'] if attributes[:'preference']
      self.preference = "NO_PREFERENCE" if preference.nil? && !attributes.key?(:'preference') # rubocop:disable Style/StringLiterals

      self.patching_mode = attributes[:'patchingMode'] if attributes[:'patchingMode']

      raise 'You cannot provide both :patchingMode and :patching_mode' if attributes.key?(:'patchingMode') && attributes.key?(:'patching_mode')

      self.patching_mode = attributes[:'patching_mode'] if attributes[:'patching_mode']

      self.is_custom_action_timeout_enabled = attributes[:'isCustomActionTimeoutEnabled'] unless attributes[:'isCustomActionTimeoutEnabled'].nil?

      raise 'You cannot provide both :isCustomActionTimeoutEnabled and :is_custom_action_timeout_enabled' if attributes.key?(:'isCustomActionTimeoutEnabled') && attributes.key?(:'is_custom_action_timeout_enabled')

      self.is_custom_action_timeout_enabled = attributes[:'is_custom_action_timeout_enabled'] unless attributes[:'is_custom_action_timeout_enabled'].nil?

      self.custom_action_timeout_in_mins = attributes[:'customActionTimeoutInMins'] if attributes[:'customActionTimeoutInMins']

      raise 'You cannot provide both :customActionTimeoutInMins and :custom_action_timeout_in_mins' if attributes.key?(:'customActionTimeoutInMins') && attributes.key?(:'custom_action_timeout_in_mins')

      self.custom_action_timeout_in_mins = attributes[:'custom_action_timeout_in_mins'] if attributes[:'custom_action_timeout_in_mins']

      self.is_monthly_patching_enabled = attributes[:'isMonthlyPatchingEnabled'] unless attributes[:'isMonthlyPatchingEnabled'].nil?

      raise 'You cannot provide both :isMonthlyPatchingEnabled and :is_monthly_patching_enabled' if attributes.key?(:'isMonthlyPatchingEnabled') && attributes.key?(:'is_monthly_patching_enabled')

      self.is_monthly_patching_enabled = attributes[:'is_monthly_patching_enabled'] unless attributes[:'is_monthly_patching_enabled'].nil?

      self.months = attributes[:'months'] if attributes[:'months']

      self.weeks_of_month = attributes[:'weeksOfMonth'] if attributes[:'weeksOfMonth']

      raise 'You cannot provide both :weeksOfMonth and :weeks_of_month' if attributes.key?(:'weeksOfMonth') && attributes.key?(:'weeks_of_month')

      self.weeks_of_month = attributes[:'weeks_of_month'] if attributes[:'weeks_of_month']

      self.days_of_week = attributes[:'daysOfWeek'] if attributes[:'daysOfWeek']

      raise 'You cannot provide both :daysOfWeek and :days_of_week' if attributes.key?(:'daysOfWeek') && attributes.key?(:'days_of_week')

      self.days_of_week = attributes[:'days_of_week'] if attributes[:'days_of_week']

      self.hours_of_day = attributes[:'hoursOfDay'] if attributes[:'hoursOfDay']

      raise 'You cannot provide both :hoursOfDay and :hours_of_day' if attributes.key?(:'hoursOfDay') && attributes.key?(:'hours_of_day')

      self.hours_of_day = attributes[:'hours_of_day'] if attributes[:'hours_of_day']

      self.lead_time_in_weeks = attributes[:'leadTimeInWeeks'] if attributes[:'leadTimeInWeeks']

      raise 'You cannot provide both :leadTimeInWeeks and :lead_time_in_weeks' if attributes.key?(:'leadTimeInWeeks') && attributes.key?(:'lead_time_in_weeks')

      self.lead_time_in_weeks = attributes[:'lead_time_in_weeks'] if attributes[:'lead_time_in_weeks']

      self.skip_ru = attributes[:'skipRu'] if attributes[:'skipRu']

      raise 'You cannot provide both :skipRu and :skip_ru' if attributes.key?(:'skipRu') && attributes.key?(:'skip_ru')

      self.skip_ru = attributes[:'skip_ru'] if attributes[:'skip_ru']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] preference Object to be assigned
    def preference=(preference)
      # rubocop:disable Style/ConditionalAssignment
      if preference && !PREFERENCE_ENUM.include?(preference)
        OCI.logger.debug("Unknown value for 'preference' [" + preference + "]. Mapping to 'PREFERENCE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @preference = PREFERENCE_UNKNOWN_ENUM_VALUE
      else
        @preference = preference
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] patching_mode Object to be assigned
    def patching_mode=(patching_mode)
      # rubocop:disable Style/ConditionalAssignment
      if patching_mode && !PATCHING_MODE_ENUM.include?(patching_mode)
        OCI.logger.debug("Unknown value for 'patching_mode' [" + patching_mode + "]. Mapping to 'PATCHING_MODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @patching_mode = PATCHING_MODE_UNKNOWN_ENUM_VALUE
      else
        @patching_mode = patching_mode
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        preference == other.preference &&
        patching_mode == other.patching_mode &&
        is_custom_action_timeout_enabled == other.is_custom_action_timeout_enabled &&
        custom_action_timeout_in_mins == other.custom_action_timeout_in_mins &&
        is_monthly_patching_enabled == other.is_monthly_patching_enabled &&
        months == other.months &&
        weeks_of_month == other.weeks_of_month &&
        days_of_week == other.days_of_week &&
        hours_of_day == other.hours_of_day &&
        lead_time_in_weeks == other.lead_time_in_weeks &&
        skip_ru == other.skip_ru
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [preference, patching_mode, is_custom_action_timeout_enabled, custom_action_timeout_in_mins, is_monthly_patching_enabled, months, weeks_of_month, days_of_week, hours_of_day, lead_time_in_weeks, skip_ru].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
