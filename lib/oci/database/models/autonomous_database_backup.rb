# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # An Autonomous Database backup.
  #
  class Database::Models::AutonomousDatabaseBackup
    TYPE_ENUM = [
      TYPE_INCREMENTAL = 'INCREMENTAL'.freeze,
      TYPE_FULL = 'FULL'.freeze,
      TYPE_LONGTERM = 'LONGTERM'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Autonomous Database backup.
    # @return [String]
    attr_accessor :id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Autonomous Database.
    # @return [String]
    attr_accessor :autonomous_database_id

    # **[Required]** The user-friendly name for the backup. The name does not have to be unique.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The type of backup.
    # @return [String]
    attr_reader :type

    # **[Required]** Indicates whether the backup is user-initiated or automatic.
    # @return [BOOLEAN]
    attr_accessor :is_automatic

    # The date and time the backup started.
    # @return [DateTime]
    attr_accessor :time_started

    # The date and time the backup completed.
    # @return [DateTime]
    attr_accessor :time_ended

    # Additional information about the current lifecycle state.
    # @return [String]
    attr_accessor :lifecycle_details

    # The size of the database in terabytes at the time the backup was taken.
    #
    # @return [Float]
    attr_accessor :database_size_in_tbs

    # **[Required]** The current state of the backup.
    # @return [String]
    attr_reader :lifecycle_state

    # Indicates whether the backup can be used to restore the associated Autonomous Database.
    # @return [BOOLEAN]
    attr_accessor :is_restorable

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the key store of Oracle Vault.
    # @return [String]
    attr_accessor :key_store_id

    # The wallet name for Oracle Key Vault.
    # @return [String]
    attr_accessor :key_store_wallet_name

    # The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
    # @return [String]
    attr_accessor :kms_key_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Oracle Cloud Infrastructure [vault](https://docs.cloud.oracle.com/Content/KeyManagement/Concepts/keyoverview.htm#concepts). This parameter and `secretId` are required for Customer Managed Keys.
    # @return [String]
    attr_accessor :vault_id

    # The OCID of the key container version that is used in database transparent data encryption (TDE) operations KMS Key can have multiple key versions. If none is specified, the current key version (latest) of the Key Id is used for the operation. Autonomous Database Serverless does not use key versions, hence is not applicable for Autonomous Database Serverless instances.
    #
    # @return [String]
    attr_accessor :kms_key_version_id

    # Retention period, in days, for long-term backups
    # @return [Integer]
    attr_accessor :retention_period_in_days

    # Timestamp until when the backup will be available
    # @return [DateTime]
    attr_accessor :time_available_till

    # A valid Oracle Database version for Autonomous Database.
    # @return [String]
    attr_accessor :db_version

    # The backup size in terrabytes (TB).
    # @return [Float]
    attr_accessor :size_in_tbs

    # @return [OCI::Database::Models::BackupDestinationDetails]
    attr_accessor :backup_destination_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'compartment_id': :'compartmentId',
        'autonomous_database_id': :'autonomousDatabaseId',
        'display_name': :'displayName',
        'type': :'type',
        'is_automatic': :'isAutomatic',
        'time_started': :'timeStarted',
        'time_ended': :'timeEnded',
        'lifecycle_details': :'lifecycleDetails',
        'database_size_in_tbs': :'databaseSizeInTBs',
        'lifecycle_state': :'lifecycleState',
        'is_restorable': :'isRestorable',
        'key_store_id': :'keyStoreId',
        'key_store_wallet_name': :'keyStoreWalletName',
        'kms_key_id': :'kmsKeyId',
        'vault_id': :'vaultId',
        'kms_key_version_id': :'kmsKeyVersionId',
        'retention_period_in_days': :'retentionPeriodInDays',
        'time_available_till': :'timeAvailableTill',
        'db_version': :'dbVersion',
        'size_in_tbs': :'sizeInTBs',
        'backup_destination_details': :'backupDestinationDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'compartment_id': :'String',
        'autonomous_database_id': :'String',
        'display_name': :'String',
        'type': :'String',
        'is_automatic': :'BOOLEAN',
        'time_started': :'DateTime',
        'time_ended': :'DateTime',
        'lifecycle_details': :'String',
        'database_size_in_tbs': :'Float',
        'lifecycle_state': :'String',
        'is_restorable': :'BOOLEAN',
        'key_store_id': :'String',
        'key_store_wallet_name': :'String',
        'kms_key_id': :'String',
        'vault_id': :'String',
        'kms_key_version_id': :'String',
        'retention_period_in_days': :'Integer',
        'time_available_till': :'DateTime',
        'db_version': :'String',
        'size_in_tbs': :'Float',
        'backup_destination_details': :'OCI::Database::Models::BackupDestinationDetails'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :autonomous_database_id The value to assign to the {#autonomous_database_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [BOOLEAN] :is_automatic The value to assign to the {#is_automatic} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_ended The value to assign to the {#time_ended} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [Float] :database_size_in_tbs The value to assign to the {#database_size_in_tbs} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [BOOLEAN] :is_restorable The value to assign to the {#is_restorable} property
    # @option attributes [String] :key_store_id The value to assign to the {#key_store_id} property
    # @option attributes [String] :key_store_wallet_name The value to assign to the {#key_store_wallet_name} property
    # @option attributes [String] :kms_key_id The value to assign to the {#kms_key_id} property
    # @option attributes [String] :vault_id The value to assign to the {#vault_id} property
    # @option attributes [String] :kms_key_version_id The value to assign to the {#kms_key_version_id} property
    # @option attributes [Integer] :retention_period_in_days The value to assign to the {#retention_period_in_days} property
    # @option attributes [DateTime] :time_available_till The value to assign to the {#time_available_till} property
    # @option attributes [String] :db_version The value to assign to the {#db_version} property
    # @option attributes [Float] :size_in_tbs The value to assign to the {#size_in_tbs} property
    # @option attributes [OCI::Database::Models::BackupDestinationDetails] :backup_destination_details The value to assign to the {#backup_destination_details} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      self.id = attributes[:'id'] if attributes[:'id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.autonomous_database_id = attributes[:'autonomousDatabaseId'] if attributes[:'autonomousDatabaseId']

      raise 'You cannot provide both :autonomousDatabaseId and :autonomous_database_id' if attributes.key?(:'autonomousDatabaseId') && attributes.key?(:'autonomous_database_id')

      self.autonomous_database_id = attributes[:'autonomous_database_id'] if attributes[:'autonomous_database_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.type = attributes[:'type'] if attributes[:'type']

      self.is_automatic = attributes[:'isAutomatic'] unless attributes[:'isAutomatic'].nil?

      raise 'You cannot provide both :isAutomatic and :is_automatic' if attributes.key?(:'isAutomatic') && attributes.key?(:'is_automatic')

      self.is_automatic = attributes[:'is_automatic'] unless attributes[:'is_automatic'].nil?

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_ended = attributes[:'timeEnded'] if attributes[:'timeEnded']

      raise 'You cannot provide both :timeEnded and :time_ended' if attributes.key?(:'timeEnded') && attributes.key?(:'time_ended')

      self.time_ended = attributes[:'time_ended'] if attributes[:'time_ended']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.database_size_in_tbs = attributes[:'databaseSizeInTBs'] if attributes[:'databaseSizeInTBs']

      raise 'You cannot provide both :databaseSizeInTBs and :database_size_in_tbs' if attributes.key?(:'databaseSizeInTBs') && attributes.key?(:'database_size_in_tbs')

      self.database_size_in_tbs = attributes[:'database_size_in_tbs'] if attributes[:'database_size_in_tbs']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.is_restorable = attributes[:'isRestorable'] unless attributes[:'isRestorable'].nil?
      self.is_restorable = true if is_restorable.nil? && !attributes.key?(:'isRestorable') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isRestorable and :is_restorable' if attributes.key?(:'isRestorable') && attributes.key?(:'is_restorable')

      self.is_restorable = attributes[:'is_restorable'] unless attributes[:'is_restorable'].nil?
      self.is_restorable = true if is_restorable.nil? && !attributes.key?(:'isRestorable') && !attributes.key?(:'is_restorable') # rubocop:disable Style/StringLiterals

      self.key_store_id = attributes[:'keyStoreId'] if attributes[:'keyStoreId']

      raise 'You cannot provide both :keyStoreId and :key_store_id' if attributes.key?(:'keyStoreId') && attributes.key?(:'key_store_id')

      self.key_store_id = attributes[:'key_store_id'] if attributes[:'key_store_id']

      self.key_store_wallet_name = attributes[:'keyStoreWalletName'] if attributes[:'keyStoreWalletName']

      raise 'You cannot provide both :keyStoreWalletName and :key_store_wallet_name' if attributes.key?(:'keyStoreWalletName') && attributes.key?(:'key_store_wallet_name')

      self.key_store_wallet_name = attributes[:'key_store_wallet_name'] if attributes[:'key_store_wallet_name']

      self.kms_key_id = attributes[:'kmsKeyId'] if attributes[:'kmsKeyId']

      raise 'You cannot provide both :kmsKeyId and :kms_key_id' if attributes.key?(:'kmsKeyId') && attributes.key?(:'kms_key_id')

      self.kms_key_id = attributes[:'kms_key_id'] if attributes[:'kms_key_id']

      self.vault_id = attributes[:'vaultId'] if attributes[:'vaultId']

      raise 'You cannot provide both :vaultId and :vault_id' if attributes.key?(:'vaultId') && attributes.key?(:'vault_id')

      self.vault_id = attributes[:'vault_id'] if attributes[:'vault_id']

      self.kms_key_version_id = attributes[:'kmsKeyVersionId'] if attributes[:'kmsKeyVersionId']

      raise 'You cannot provide both :kmsKeyVersionId and :kms_key_version_id' if attributes.key?(:'kmsKeyVersionId') && attributes.key?(:'kms_key_version_id')

      self.kms_key_version_id = attributes[:'kms_key_version_id'] if attributes[:'kms_key_version_id']

      self.retention_period_in_days = attributes[:'retentionPeriodInDays'] if attributes[:'retentionPeriodInDays']

      raise 'You cannot provide both :retentionPeriodInDays and :retention_period_in_days' if attributes.key?(:'retentionPeriodInDays') && attributes.key?(:'retention_period_in_days')

      self.retention_period_in_days = attributes[:'retention_period_in_days'] if attributes[:'retention_period_in_days']

      self.time_available_till = attributes[:'timeAvailableTill'] if attributes[:'timeAvailableTill']

      raise 'You cannot provide both :timeAvailableTill and :time_available_till' if attributes.key?(:'timeAvailableTill') && attributes.key?(:'time_available_till')

      self.time_available_till = attributes[:'time_available_till'] if attributes[:'time_available_till']

      self.db_version = attributes[:'dbVersion'] if attributes[:'dbVersion']

      raise 'You cannot provide both :dbVersion and :db_version' if attributes.key?(:'dbVersion') && attributes.key?(:'db_version')

      self.db_version = attributes[:'db_version'] if attributes[:'db_version']

      self.size_in_tbs = attributes[:'sizeInTBs'] if attributes[:'sizeInTBs']

      raise 'You cannot provide both :sizeInTBs and :size_in_tbs' if attributes.key?(:'sizeInTBs') && attributes.key?(:'size_in_tbs')

      self.size_in_tbs = attributes[:'size_in_tbs'] if attributes[:'size_in_tbs']

      self.backup_destination_details = attributes[:'backupDestinationDetails'] if attributes[:'backupDestinationDetails']

      raise 'You cannot provide both :backupDestinationDetails and :backup_destination_details' if attributes.key?(:'backupDestinationDetails') && attributes.key?(:'backup_destination_details')

      self.backup_destination_details = attributes[:'backup_destination_details'] if attributes[:'backup_destination_details']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        compartment_id == other.compartment_id &&
        autonomous_database_id == other.autonomous_database_id &&
        display_name == other.display_name &&
        type == other.type &&
        is_automatic == other.is_automatic &&
        time_started == other.time_started &&
        time_ended == other.time_ended &&
        lifecycle_details == other.lifecycle_details &&
        database_size_in_tbs == other.database_size_in_tbs &&
        lifecycle_state == other.lifecycle_state &&
        is_restorable == other.is_restorable &&
        key_store_id == other.key_store_id &&
        key_store_wallet_name == other.key_store_wallet_name &&
        kms_key_id == other.kms_key_id &&
        vault_id == other.vault_id &&
        kms_key_version_id == other.kms_key_version_id &&
        retention_period_in_days == other.retention_period_in_days &&
        time_available_till == other.time_available_till &&
        db_version == other.db_version &&
        size_in_tbs == other.size_in_tbs &&
        backup_destination_details == other.backup_destination_details
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, compartment_id, autonomous_database_id, display_name, type, is_automatic, time_started, time_ended, lifecycle_details, database_size_in_tbs, lifecycle_state, is_restorable, key_store_id, key_store_wallet_name, kms_key_id, vault_id, kms_key_version_id, retention_period_in_days, time_available_till, db_version, size_in_tbs, backup_destination_details].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
