# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require_relative 'create_data_guard_association_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The configuration details for creating a Data Guard association for a bare metal or Exadata DB system database. For these types of DB system databases, the `creationType` should be `ExistingDbSystem`. A standby database will be created in the DB system you specify.
  #
  # To create a Data Guard association for a database in a virtual machine DB system, use the {#create_data_guard_association_with_new_db_system_details create_data_guard_association_with_new_db_system_details} subtype instead.
  #
  class Database::Models::CreateDataGuardAssociationToExistingDbSystemDetails < Database::Models::CreateDataGuardAssociationDetails
    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the DB system in which to create the standby database.
    # You must supply this value if creationType is `ExistingDbSystem`.
    #
    # @return [String]
    attr_accessor :peer_db_system_id

    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the DB home in which to create the standby database.
    # You must supply this value to create standby database with an existing DB home
    #
    # @return [String]
    attr_accessor :peer_db_home_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'database_software_image_id': :'databaseSoftwareImageId',
        'database_admin_password': :'databaseAdminPassword',
        'protection_mode': :'protectionMode',
        'transport_type': :'transportType',
        'creation_type': :'creationType',
        'is_active_data_guard_enabled': :'isActiveDataGuardEnabled',
        'peer_db_unique_name': :'peerDbUniqueName',
        'peer_sid_prefix': :'peerSidPrefix',
        'peer_db_system_id': :'peerDbSystemId',
        'peer_db_home_id': :'peerDbHomeId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'database_software_image_id': :'String',
        'database_admin_password': :'String',
        'protection_mode': :'String',
        'transport_type': :'String',
        'creation_type': :'String',
        'is_active_data_guard_enabled': :'BOOLEAN',
        'peer_db_unique_name': :'String',
        'peer_sid_prefix': :'String',
        'peer_db_system_id': :'String',
        'peer_db_home_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :database_software_image_id The value to assign to the {OCI::Database::Models::CreateDataGuardAssociationDetails#database_software_image_id #database_software_image_id} proprety
    # @option attributes [String] :database_admin_password The value to assign to the {OCI::Database::Models::CreateDataGuardAssociationDetails#database_admin_password #database_admin_password} proprety
    # @option attributes [String] :protection_mode The value to assign to the {OCI::Database::Models::CreateDataGuardAssociationDetails#protection_mode #protection_mode} proprety
    # @option attributes [String] :transport_type The value to assign to the {OCI::Database::Models::CreateDataGuardAssociationDetails#transport_type #transport_type} proprety
    # @option attributes [BOOLEAN] :is_active_data_guard_enabled The value to assign to the {OCI::Database::Models::CreateDataGuardAssociationDetails#is_active_data_guard_enabled #is_active_data_guard_enabled} proprety
    # @option attributes [String] :peer_db_unique_name The value to assign to the {OCI::Database::Models::CreateDataGuardAssociationDetails#peer_db_unique_name #peer_db_unique_name} proprety
    # @option attributes [String] :peer_sid_prefix The value to assign to the {OCI::Database::Models::CreateDataGuardAssociationDetails#peer_sid_prefix #peer_sid_prefix} proprety
    # @option attributes [String] :peer_db_system_id The value to assign to the {#peer_db_system_id} property
    # @option attributes [String] :peer_db_home_id The value to assign to the {#peer_db_home_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['creationType'] = 'ExistingDbSystem'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.peer_db_system_id = attributes[:'peerDbSystemId'] if attributes[:'peerDbSystemId']

      raise 'You cannot provide both :peerDbSystemId and :peer_db_system_id' if attributes.key?(:'peerDbSystemId') && attributes.key?(:'peer_db_system_id')

      self.peer_db_system_id = attributes[:'peer_db_system_id'] if attributes[:'peer_db_system_id']

      self.peer_db_home_id = attributes[:'peerDbHomeId'] if attributes[:'peerDbHomeId']

      raise 'You cannot provide both :peerDbHomeId and :peer_db_home_id' if attributes.key?(:'peerDbHomeId') && attributes.key?(:'peer_db_home_id')

      self.peer_db_home_id = attributes[:'peer_db_home_id'] if attributes[:'peer_db_home_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        database_software_image_id == other.database_software_image_id &&
        database_admin_password == other.database_admin_password &&
        protection_mode == other.protection_mode &&
        transport_type == other.transport_type &&
        creation_type == other.creation_type &&
        is_active_data_guard_enabled == other.is_active_data_guard_enabled &&
        peer_db_unique_name == other.peer_db_unique_name &&
        peer_sid_prefix == other.peer_sid_prefix &&
        peer_db_system_id == other.peer_db_system_id &&
        peer_db_home_id == other.peer_db_home_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [database_software_image_id, database_admin_password, protection_mode, transport_type, creation_type, is_active_data_guard_enabled, peer_db_unique_name, peer_sid_prefix, peer_db_system_id, peer_db_home_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
