# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The version details specific to an app.
  #
  class Database::Models::AppVersionSummary
    # **[Required]** The Autonomous Container Database version release date.
    # @return [String]
    attr_accessor :release_date

    # **[Required]** The Autonomous Container Database version end of support date.
    # @return [String]
    attr_accessor :end_of_support

    # **[Required]** The name of the supported application.
    # @return [String]
    attr_accessor :supported_app_name

    # **[Required]** Indicates if the image is certified.
    # @return [BOOLEAN]
    attr_accessor :is_certified

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'release_date': :'releaseDate',
        'end_of_support': :'endOfSupport',
        'supported_app_name': :'supportedAppName',
        'is_certified': :'isCertified'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'release_date': :'String',
        'end_of_support': :'String',
        'supported_app_name': :'String',
        'is_certified': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :release_date The value to assign to the {#release_date} property
    # @option attributes [String] :end_of_support The value to assign to the {#end_of_support} property
    # @option attributes [String] :supported_app_name The value to assign to the {#supported_app_name} property
    # @option attributes [BOOLEAN] :is_certified The value to assign to the {#is_certified} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.release_date = attributes[:'releaseDate'] if attributes[:'releaseDate']

      raise 'You cannot provide both :releaseDate and :release_date' if attributes.key?(:'releaseDate') && attributes.key?(:'release_date')

      self.release_date = attributes[:'release_date'] if attributes[:'release_date']

      self.end_of_support = attributes[:'endOfSupport'] if attributes[:'endOfSupport']

      raise 'You cannot provide both :endOfSupport and :end_of_support' if attributes.key?(:'endOfSupport') && attributes.key?(:'end_of_support')

      self.end_of_support = attributes[:'end_of_support'] if attributes[:'end_of_support']

      self.supported_app_name = attributes[:'supportedAppName'] if attributes[:'supportedAppName']

      raise 'You cannot provide both :supportedAppName and :supported_app_name' if attributes.key?(:'supportedAppName') && attributes.key?(:'supported_app_name')

      self.supported_app_name = attributes[:'supported_app_name'] if attributes[:'supported_app_name']

      self.is_certified = attributes[:'isCertified'] unless attributes[:'isCertified'].nil?

      raise 'You cannot provide both :isCertified and :is_certified' if attributes.key?(:'isCertified') && attributes.key?(:'is_certified')

      self.is_certified = attributes[:'is_certified'] unless attributes[:'is_certified'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        release_date == other.release_date &&
        end_of_support == other.end_of_support &&
        supported_app_name == other.supported_app_name &&
        is_certified == other.is_certified
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [release_date, end_of_support, supported_app_name, is_certified].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
