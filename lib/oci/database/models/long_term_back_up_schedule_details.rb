# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for the long-term backup schedule.
  class Database::Models::LongTermBackUpScheduleDetails
    REPEAT_CADENCE_ENUM = [
      REPEAT_CADENCE_ONE_TIME = 'ONE_TIME'.freeze,
      REPEAT_CADENCE_WEEKLY = 'WEEKLY'.freeze,
      REPEAT_CADENCE_MONTHLY = 'MONTHLY'.freeze,
      REPEAT_CADENCE_YEARLY = 'YEARLY'.freeze,
      REPEAT_CADENCE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # The frequency of the long-term backup schedule
    # @return [String]
    attr_reader :repeat_cadence

    # The timestamp for the long-term backup schedule. For a MONTHLY cadence, months having fewer days than the provided date will have the backup taken on the last day of that month.
    # @return [DateTime]
    attr_accessor :time_of_backup

    # Retention period, in days, for long-term backups
    # @return [Integer]
    attr_accessor :retention_period_in_days

    # Indicates if the long-term backup schedule should be deleted. The default value is `FALSE`.
    #
    # @return [BOOLEAN]
    attr_accessor :is_disabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'repeat_cadence': :'repeatCadence',
        'time_of_backup': :'timeOfBackup',
        'retention_period_in_days': :'retentionPeriodInDays',
        'is_disabled': :'isDisabled'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'repeat_cadence': :'String',
        'time_of_backup': :'DateTime',
        'retention_period_in_days': :'Integer',
        'is_disabled': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :repeat_cadence The value to assign to the {#repeat_cadence} property
    # @option attributes [DateTime] :time_of_backup The value to assign to the {#time_of_backup} property
    # @option attributes [Integer] :retention_period_in_days The value to assign to the {#retention_period_in_days} property
    # @option attributes [BOOLEAN] :is_disabled The value to assign to the {#is_disabled} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.repeat_cadence = attributes[:'repeatCadence'] if attributes[:'repeatCadence']

      raise 'You cannot provide both :repeatCadence and :repeat_cadence' if attributes.key?(:'repeatCadence') && attributes.key?(:'repeat_cadence')

      self.repeat_cadence = attributes[:'repeat_cadence'] if attributes[:'repeat_cadence']

      self.time_of_backup = attributes[:'timeOfBackup'] if attributes[:'timeOfBackup']

      raise 'You cannot provide both :timeOfBackup and :time_of_backup' if attributes.key?(:'timeOfBackup') && attributes.key?(:'time_of_backup')

      self.time_of_backup = attributes[:'time_of_backup'] if attributes[:'time_of_backup']

      self.retention_period_in_days = attributes[:'retentionPeriodInDays'] if attributes[:'retentionPeriodInDays']

      raise 'You cannot provide both :retentionPeriodInDays and :retention_period_in_days' if attributes.key?(:'retentionPeriodInDays') && attributes.key?(:'retention_period_in_days')

      self.retention_period_in_days = attributes[:'retention_period_in_days'] if attributes[:'retention_period_in_days']

      self.is_disabled = attributes[:'isDisabled'] unless attributes[:'isDisabled'].nil?
      self.is_disabled = false if is_disabled.nil? && !attributes.key?(:'isDisabled') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isDisabled and :is_disabled' if attributes.key?(:'isDisabled') && attributes.key?(:'is_disabled')

      self.is_disabled = attributes[:'is_disabled'] unless attributes[:'is_disabled'].nil?
      self.is_disabled = false if is_disabled.nil? && !attributes.key?(:'isDisabled') && !attributes.key?(:'is_disabled') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] repeat_cadence Object to be assigned
    def repeat_cadence=(repeat_cadence)
      # rubocop:disable Style/ConditionalAssignment
      if repeat_cadence && !REPEAT_CADENCE_ENUM.include?(repeat_cadence)
        OCI.logger.debug("Unknown value for 'repeat_cadence' [" + repeat_cadence + "]. Mapping to 'REPEAT_CADENCE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @repeat_cadence = REPEAT_CADENCE_UNKNOWN_ENUM_VALUE
      else
        @repeat_cadence = repeat_cadence
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        repeat_cadence == other.repeat_cadence &&
        time_of_backup == other.time_of_backup &&
        retention_period_in_days == other.retention_period_in_days &&
        is_disabled == other.is_disabled
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [repeat_cadence, time_of_backup, retention_period_in_days, is_disabled].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
