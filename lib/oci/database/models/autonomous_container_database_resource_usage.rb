# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Associated autonomous container databases usages.
  class Database::Models::AutonomousContainerDatabaseResourceUsage
    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Autonomous Container Database.
    # @return [String]
    attr_accessor :id

    # **[Required]** The user-friendly name for the Autonomous Container Database. The name does not need to be unique.
    # @return [String]
    attr_accessor :display_name

    # Number of CPUs that are reclaimable or released to the AVMC on Autonomous Container Database restart.
    # @return [Float]
    attr_accessor :reclaimable_cpus

    # CPUs available for provisioning or scaling an Autonomous Database in the Autonomous Container Database.
    # @return [Float]
    attr_accessor :available_cpus

    # Largest provisionable ADB in the Autonomous Container Database.
    # @return [Float]
    attr_accessor :largest_provisionable_autonomous_database_in_cpus

    # CPUs / cores assigned to ADBs in the Autonomous Container Database.
    # @return [Float]
    attr_accessor :provisioned_cpus

    # CPUs / cores reserved for scalability, resilliency and other overheads.
    # This includes failover, autoscaling and idle instance overhead.
    #
    # @return [Float]
    attr_accessor :reserved_cpus

    # CPUs / cores assigned to the Autonomous Container Database. Sum of provisioned,
    # reserved and reclaimable CPUs/ cores.
    #
    # @return [Float]
    attr_accessor :used_cpus

    # Valid list of provisionable CPUs for Autonomous Database.
    # @return [Array<Float>]
    attr_accessor :provisionable_cpus

    # List of autonomous container database resource usage per autonomous virtual machine.
    # @return [Array<OCI::Database::Models::AcdAvmResourceStats>]
    attr_accessor :autonomous_container_database_vm_usage

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'reclaimable_cpus': :'reclaimableCpus',
        'available_cpus': :'availableCpus',
        'largest_provisionable_autonomous_database_in_cpus': :'largestProvisionableAutonomousDatabaseInCpus',
        'provisioned_cpus': :'provisionedCpus',
        'reserved_cpus': :'reservedCpus',
        'used_cpus': :'usedCpus',
        'provisionable_cpus': :'provisionableCpus',
        'autonomous_container_database_vm_usage': :'autonomousContainerDatabaseVmUsage',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'reclaimable_cpus': :'Float',
        'available_cpus': :'Float',
        'largest_provisionable_autonomous_database_in_cpus': :'Float',
        'provisioned_cpus': :'Float',
        'reserved_cpus': :'Float',
        'used_cpus': :'Float',
        'provisionable_cpus': :'Array<Float>',
        'autonomous_container_database_vm_usage': :'Array<OCI::Database::Models::AcdAvmResourceStats>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Float] :reclaimable_cpus The value to assign to the {#reclaimable_cpus} property
    # @option attributes [Float] :available_cpus The value to assign to the {#available_cpus} property
    # @option attributes [Float] :largest_provisionable_autonomous_database_in_cpus The value to assign to the {#largest_provisionable_autonomous_database_in_cpus} property
    # @option attributes [Float] :provisioned_cpus The value to assign to the {#provisioned_cpus} property
    # @option attributes [Float] :reserved_cpus The value to assign to the {#reserved_cpus} property
    # @option attributes [Float] :used_cpus The value to assign to the {#used_cpus} property
    # @option attributes [Array<Float>] :provisionable_cpus The value to assign to the {#provisionable_cpus} property
    # @option attributes [Array<OCI::Database::Models::AcdAvmResourceStats>] :autonomous_container_database_vm_usage The value to assign to the {#autonomous_container_database_vm_usage} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.reclaimable_cpus = attributes[:'reclaimableCpus'] if attributes[:'reclaimableCpus']

      raise 'You cannot provide both :reclaimableCpus and :reclaimable_cpus' if attributes.key?(:'reclaimableCpus') && attributes.key?(:'reclaimable_cpus')

      self.reclaimable_cpus = attributes[:'reclaimable_cpus'] if attributes[:'reclaimable_cpus']

      self.available_cpus = attributes[:'availableCpus'] if attributes[:'availableCpus']

      raise 'You cannot provide both :availableCpus and :available_cpus' if attributes.key?(:'availableCpus') && attributes.key?(:'available_cpus')

      self.available_cpus = attributes[:'available_cpus'] if attributes[:'available_cpus']

      self.largest_provisionable_autonomous_database_in_cpus = attributes[:'largestProvisionableAutonomousDatabaseInCpus'] if attributes[:'largestProvisionableAutonomousDatabaseInCpus']

      raise 'You cannot provide both :largestProvisionableAutonomousDatabaseInCpus and :largest_provisionable_autonomous_database_in_cpus' if attributes.key?(:'largestProvisionableAutonomousDatabaseInCpus') && attributes.key?(:'largest_provisionable_autonomous_database_in_cpus')

      self.largest_provisionable_autonomous_database_in_cpus = attributes[:'largest_provisionable_autonomous_database_in_cpus'] if attributes[:'largest_provisionable_autonomous_database_in_cpus']

      self.provisioned_cpus = attributes[:'provisionedCpus'] if attributes[:'provisionedCpus']

      raise 'You cannot provide both :provisionedCpus and :provisioned_cpus' if attributes.key?(:'provisionedCpus') && attributes.key?(:'provisioned_cpus')

      self.provisioned_cpus = attributes[:'provisioned_cpus'] if attributes[:'provisioned_cpus']

      self.reserved_cpus = attributes[:'reservedCpus'] if attributes[:'reservedCpus']

      raise 'You cannot provide both :reservedCpus and :reserved_cpus' if attributes.key?(:'reservedCpus') && attributes.key?(:'reserved_cpus')

      self.reserved_cpus = attributes[:'reserved_cpus'] if attributes[:'reserved_cpus']

      self.used_cpus = attributes[:'usedCpus'] if attributes[:'usedCpus']

      raise 'You cannot provide both :usedCpus and :used_cpus' if attributes.key?(:'usedCpus') && attributes.key?(:'used_cpus')

      self.used_cpus = attributes[:'used_cpus'] if attributes[:'used_cpus']

      self.provisionable_cpus = attributes[:'provisionableCpus'] if attributes[:'provisionableCpus']

      raise 'You cannot provide both :provisionableCpus and :provisionable_cpus' if attributes.key?(:'provisionableCpus') && attributes.key?(:'provisionable_cpus')

      self.provisionable_cpus = attributes[:'provisionable_cpus'] if attributes[:'provisionable_cpus']

      self.autonomous_container_database_vm_usage = attributes[:'autonomousContainerDatabaseVmUsage'] if attributes[:'autonomousContainerDatabaseVmUsage']

      raise 'You cannot provide both :autonomousContainerDatabaseVmUsage and :autonomous_container_database_vm_usage' if attributes.key?(:'autonomousContainerDatabaseVmUsage') && attributes.key?(:'autonomous_container_database_vm_usage')

      self.autonomous_container_database_vm_usage = attributes[:'autonomous_container_database_vm_usage'] if attributes[:'autonomous_container_database_vm_usage']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        reclaimable_cpus == other.reclaimable_cpus &&
        available_cpus == other.available_cpus &&
        largest_provisionable_autonomous_database_in_cpus == other.largest_provisionable_autonomous_database_in_cpus &&
        provisioned_cpus == other.provisioned_cpus &&
        reserved_cpus == other.reserved_cpus &&
        used_cpus == other.used_cpus &&
        provisionable_cpus == other.provisionable_cpus &&
        autonomous_container_database_vm_usage == other.autonomous_container_database_vm_usage &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, reclaimable_cpus, available_cpus, largest_provisionable_autonomous_database_in_cpus, provisioned_cpus, reserved_cpus, used_cpus, provisionable_cpus, autonomous_container_database_vm_usage, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
