# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Autonomous VM usage statistics.
  class Database::Models::AutonomousVmResourceUsage
    # The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the Autonomous VM Cluster.
    # @return [String]
    attr_accessor :id

    # **[Required]** The user-friendly name for the Autonomous VM cluster. The name does not need to be unique.
    # @return [String]
    attr_accessor :display_name

    # The number of CPU cores alloted to the Autonomous Container Databases in an Cloud Autonomous VM cluster.
    #
    # @return [Float]
    attr_accessor :used_cpus

    # The number of CPU cores available.
    # @return [Float]
    attr_accessor :available_cpus

    # CPU cores that continue to be included in the count of OCPUs available to the
    # Autonomous Container Database even after one of its Autonomous Database is
    # terminated or scaled down. You can release them to the available OCPUs at its
    # parent AVMC level by restarting the Autonomous Container Database.
    #
    # @return [Float]
    attr_accessor :reclaimable_cpus

    # The number of CPUs provisioned in an Autonomous VM Cluster.
    # @return [Float]
    attr_accessor :provisioned_cpus

    # The number of CPUs reserved in an Autonomous VM Cluster.
    # @return [Float]
    attr_accessor :reserved_cpus

    # Associated Autonomous Container Database Usages.
    # @return [Array<OCI::Database::Models::AvmAcdResourceStats>]
    attr_accessor :autonomous_container_database_usage

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'used_cpus': :'usedCpus',
        'available_cpus': :'availableCpus',
        'reclaimable_cpus': :'reclaimableCpus',
        'provisioned_cpus': :'provisionedCpus',
        'reserved_cpus': :'reservedCpus',
        'autonomous_container_database_usage': :'autonomousContainerDatabaseUsage'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'used_cpus': :'Float',
        'available_cpus': :'Float',
        'reclaimable_cpus': :'Float',
        'provisioned_cpus': :'Float',
        'reserved_cpus': :'Float',
        'autonomous_container_database_usage': :'Array<OCI::Database::Models::AvmAcdResourceStats>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Float] :used_cpus The value to assign to the {#used_cpus} property
    # @option attributes [Float] :available_cpus The value to assign to the {#available_cpus} property
    # @option attributes [Float] :reclaimable_cpus The value to assign to the {#reclaimable_cpus} property
    # @option attributes [Float] :provisioned_cpus The value to assign to the {#provisioned_cpus} property
    # @option attributes [Float] :reserved_cpus The value to assign to the {#reserved_cpus} property
    # @option attributes [Array<OCI::Database::Models::AvmAcdResourceStats>] :autonomous_container_database_usage The value to assign to the {#autonomous_container_database_usage} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.used_cpus = attributes[:'usedCpus'] if attributes[:'usedCpus']

      raise 'You cannot provide both :usedCpus and :used_cpus' if attributes.key?(:'usedCpus') && attributes.key?(:'used_cpus')

      self.used_cpus = attributes[:'used_cpus'] if attributes[:'used_cpus']

      self.available_cpus = attributes[:'availableCpus'] if attributes[:'availableCpus']

      raise 'You cannot provide both :availableCpus and :available_cpus' if attributes.key?(:'availableCpus') && attributes.key?(:'available_cpus')

      self.available_cpus = attributes[:'available_cpus'] if attributes[:'available_cpus']

      self.reclaimable_cpus = attributes[:'reclaimableCpus'] if attributes[:'reclaimableCpus']

      raise 'You cannot provide both :reclaimableCpus and :reclaimable_cpus' if attributes.key?(:'reclaimableCpus') && attributes.key?(:'reclaimable_cpus')

      self.reclaimable_cpus = attributes[:'reclaimable_cpus'] if attributes[:'reclaimable_cpus']

      self.provisioned_cpus = attributes[:'provisionedCpus'] if attributes[:'provisionedCpus']

      raise 'You cannot provide both :provisionedCpus and :provisioned_cpus' if attributes.key?(:'provisionedCpus') && attributes.key?(:'provisioned_cpus')

      self.provisioned_cpus = attributes[:'provisioned_cpus'] if attributes[:'provisioned_cpus']

      self.reserved_cpus = attributes[:'reservedCpus'] if attributes[:'reservedCpus']

      raise 'You cannot provide both :reservedCpus and :reserved_cpus' if attributes.key?(:'reservedCpus') && attributes.key?(:'reserved_cpus')

      self.reserved_cpus = attributes[:'reserved_cpus'] if attributes[:'reserved_cpus']

      self.autonomous_container_database_usage = attributes[:'autonomousContainerDatabaseUsage'] if attributes[:'autonomousContainerDatabaseUsage']

      raise 'You cannot provide both :autonomousContainerDatabaseUsage and :autonomous_container_database_usage' if attributes.key?(:'autonomousContainerDatabaseUsage') && attributes.key?(:'autonomous_container_database_usage')

      self.autonomous_container_database_usage = attributes[:'autonomous_container_database_usage'] if attributes[:'autonomous_container_database_usage']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        used_cpus == other.used_cpus &&
        available_cpus == other.available_cpus &&
        reclaimable_cpus == other.reclaimable_cpus &&
        provisioned_cpus == other.provisioned_cpus &&
        reserved_cpus == other.reserved_cpus &&
        autonomous_container_database_usage == other.autonomous_container_database_usage
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, used_cpus, available_cpus, reclaimable_cpus, provisioned_cpus, reserved_cpus, autonomous_container_database_usage].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
