# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for the create cloud Autonomous VM cluster operation.
  #
  class Database::Models::CreateCloudAutonomousVmClusterDetails
    COMPUTE_MODEL_ENUM = [
      COMPUTE_MODEL_ECPU = 'ECPU'.freeze,
      COMPUTE_MODEL_OCPU = 'OCPU'.freeze
    ].freeze

    LICENSE_MODEL_ENUM = [
      LICENSE_MODEL_LICENSE_INCLUDED = 'LICENSE_INCLUDED'.freeze,
      LICENSE_MODEL_BRING_YOUR_OWN_LICENSE = 'BRING_YOUR_OWN_LICENSE'.freeze
    ].freeze

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # User defined description of the cloud Autonomous VM cluster.
    # @return [String]
    attr_accessor :description

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the subnet the cloud Autonomous VM Cluster is associated with.
    #
    # @return [String]
    attr_accessor :subnet_id

    # **[Required]** The user-friendly name for the cloud Autonomous VM cluster. The name does not need to be unique.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the cloud Exadata infrastructure.
    # @return [String]
    attr_accessor :cloud_exadata_infrastructure_id

    # The total number of Autonomous Container Databases that can be created.
    # @return [Integer]
    attr_accessor :total_container_databases

    # The number of CPU cores to be enabled per VM cluster node.
    # @return [Integer]
    attr_accessor :cpu_core_count_per_node

    # The amount of memory (in GBs) to be enabled per OCPU or ECPU.
    #
    # @return [Integer]
    attr_accessor :memory_per_oracle_compute_unit_in_gbs

    # The data disk group size to be allocated for Autonomous Databases, in TBs.
    # @return [Float]
    attr_accessor :autonomous_data_storage_size_in_tbs

    # The time zone to use for the Cloud Autonomous VM cluster. For details, see [DB System Time Zones](https://docs.cloud.oracle.com/Content/Database/References/timezones.htm).
    # @return [String]
    attr_accessor :cluster_time_zone

    # The compute model of the Cloud Autonomous VM Cluster. ECPU compute model is the recommended model and OCPU compute model is legacy.
    #
    # @return [String]
    attr_reader :compute_model

    # Enable mutual TLS(mTLS) authentication for database at time of provisioning a VMCluster. This is applicable to database TLS Certificates only. Default is TLS
    # @return [BOOLEAN]
    attr_accessor :is_mtls_enabled_vm_cluster

    # The list of database servers.
    # @return [Array<String>]
    attr_accessor :db_servers

    # @return [OCI::Database::Models::MaintenanceWindow]
    attr_accessor :maintenance_window_details

    # The SCAN Listener TLS port. Default is 2484.
    # @return [Integer]
    attr_accessor :scan_listener_port_tls

    # The SCAN Listener Non TLS port. Default is 1521.
    # @return [Integer]
    attr_accessor :scan_listener_port_non_tls

    # The Oracle license model that applies to the Oracle Autonomous Database. Bring your own license (BYOL) allows you to apply your current on-premises Oracle software licenses to equivalent, highly automated Oracle services in the cloud.
    # License Included allows you to subscribe to new Oracle Database software licenses and the Oracle Database service.
    # Note that when provisioning an [Autonomous Database on dedicated Exadata infrastructure](https://docs.oracle.com/en/cloud/paas/autonomous-database/index.html), this attribute must be null. It is already set at the
    # Autonomous Exadata Infrastructure level. When provisioning an [Autonomous Database Serverless] (https://docs.oracle.com/en/cloud/paas/autonomous-database/index.html) database, if a value is not specified, the system defaults the value to `BRING_YOUR_OWN_LICENSE`. Bring your own license (BYOL) also allows you to select the DB edition using the optional parameter.
    #
    # This cannot be updated in parallel with any of the following: cpuCoreCount, computeCount, dataStorageSizeInTBs, adminPassword, isMTLSConnectionRequired, dbWorkload, privateEndpointLabel, nsgIds, dbVersion, dbName, scheduledOperations, dbToolsDetails, or isFreeTier.
    #
    # @return [String]
    attr_reader :license_model

    # The list of [OCIDs](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) for the network security groups (NSGs) to which this resource belongs. Setting this to an empty list removes all resources from all NSGs. For more information about NSGs, see [Security Rules](https://docs.cloud.oracle.com/Content/Network/Concepts/securityrules.htm).
    # **NsgIds restrictions:**
    # - A network security group (NSG) is optional for Autonomous Databases with private access. The nsgIds list can be empty.
    #
    # @return [Array<String>]
    attr_accessor :nsg_ids

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'compartmentId',
        'description': :'description',
        'subnet_id': :'subnetId',
        'display_name': :'displayName',
        'cloud_exadata_infrastructure_id': :'cloudExadataInfrastructureId',
        'total_container_databases': :'totalContainerDatabases',
        'cpu_core_count_per_node': :'cpuCoreCountPerNode',
        'memory_per_oracle_compute_unit_in_gbs': :'memoryPerOracleComputeUnitInGBs',
        'autonomous_data_storage_size_in_tbs': :'autonomousDataStorageSizeInTBs',
        'cluster_time_zone': :'clusterTimeZone',
        'compute_model': :'computeModel',
        'is_mtls_enabled_vm_cluster': :'isMtlsEnabledVmCluster',
        'db_servers': :'dbServers',
        'maintenance_window_details': :'maintenanceWindowDetails',
        'scan_listener_port_tls': :'scanListenerPortTls',
        'scan_listener_port_non_tls': :'scanListenerPortNonTls',
        'license_model': :'licenseModel',
        'nsg_ids': :'nsgIds',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'String',
        'description': :'String',
        'subnet_id': :'String',
        'display_name': :'String',
        'cloud_exadata_infrastructure_id': :'String',
        'total_container_databases': :'Integer',
        'cpu_core_count_per_node': :'Integer',
        'memory_per_oracle_compute_unit_in_gbs': :'Integer',
        'autonomous_data_storage_size_in_tbs': :'Float',
        'cluster_time_zone': :'String',
        'compute_model': :'String',
        'is_mtls_enabled_vm_cluster': :'BOOLEAN',
        'db_servers': :'Array<String>',
        'maintenance_window_details': :'OCI::Database::Models::MaintenanceWindow',
        'scan_listener_port_tls': :'Integer',
        'scan_listener_port_non_tls': :'Integer',
        'license_model': :'String',
        'nsg_ids': :'Array<String>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :description The value to assign to the {#description} property
    # @option attributes [String] :subnet_id The value to assign to the {#subnet_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :cloud_exadata_infrastructure_id The value to assign to the {#cloud_exadata_infrastructure_id} property
    # @option attributes [Integer] :total_container_databases The value to assign to the {#total_container_databases} property
    # @option attributes [Integer] :cpu_core_count_per_node The value to assign to the {#cpu_core_count_per_node} property
    # @option attributes [Integer] :memory_per_oracle_compute_unit_in_gbs The value to assign to the {#memory_per_oracle_compute_unit_in_gbs} property
    # @option attributes [Float] :autonomous_data_storage_size_in_tbs The value to assign to the {#autonomous_data_storage_size_in_tbs} property
    # @option attributes [String] :cluster_time_zone The value to assign to the {#cluster_time_zone} property
    # @option attributes [String] :compute_model The value to assign to the {#compute_model} property
    # @option attributes [BOOLEAN] :is_mtls_enabled_vm_cluster The value to assign to the {#is_mtls_enabled_vm_cluster} property
    # @option attributes [Array<String>] :db_servers The value to assign to the {#db_servers} property
    # @option attributes [OCI::Database::Models::MaintenanceWindow] :maintenance_window_details The value to assign to the {#maintenance_window_details} property
    # @option attributes [Integer] :scan_listener_port_tls The value to assign to the {#scan_listener_port_tls} property
    # @option attributes [Integer] :scan_listener_port_non_tls The value to assign to the {#scan_listener_port_non_tls} property
    # @option attributes [String] :license_model The value to assign to the {#license_model} property
    # @option attributes [Array<String>] :nsg_ids The value to assign to the {#nsg_ids} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.description = attributes[:'description'] if attributes[:'description']

      self.subnet_id = attributes[:'subnetId'] if attributes[:'subnetId']

      raise 'You cannot provide both :subnetId and :subnet_id' if attributes.key?(:'subnetId') && attributes.key?(:'subnet_id')

      self.subnet_id = attributes[:'subnet_id'] if attributes[:'subnet_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.cloud_exadata_infrastructure_id = attributes[:'cloudExadataInfrastructureId'] if attributes[:'cloudExadataInfrastructureId']

      raise 'You cannot provide both :cloudExadataInfrastructureId and :cloud_exadata_infrastructure_id' if attributes.key?(:'cloudExadataInfrastructureId') && attributes.key?(:'cloud_exadata_infrastructure_id')

      self.cloud_exadata_infrastructure_id = attributes[:'cloud_exadata_infrastructure_id'] if attributes[:'cloud_exadata_infrastructure_id']

      self.total_container_databases = attributes[:'totalContainerDatabases'] if attributes[:'totalContainerDatabases']

      raise 'You cannot provide both :totalContainerDatabases and :total_container_databases' if attributes.key?(:'totalContainerDatabases') && attributes.key?(:'total_container_databases')

      self.total_container_databases = attributes[:'total_container_databases'] if attributes[:'total_container_databases']

      self.cpu_core_count_per_node = attributes[:'cpuCoreCountPerNode'] if attributes[:'cpuCoreCountPerNode']

      raise 'You cannot provide both :cpuCoreCountPerNode and :cpu_core_count_per_node' if attributes.key?(:'cpuCoreCountPerNode') && attributes.key?(:'cpu_core_count_per_node')

      self.cpu_core_count_per_node = attributes[:'cpu_core_count_per_node'] if attributes[:'cpu_core_count_per_node']

      self.memory_per_oracle_compute_unit_in_gbs = attributes[:'memoryPerOracleComputeUnitInGBs'] if attributes[:'memoryPerOracleComputeUnitInGBs']

      raise 'You cannot provide both :memoryPerOracleComputeUnitInGBs and :memory_per_oracle_compute_unit_in_gbs' if attributes.key?(:'memoryPerOracleComputeUnitInGBs') && attributes.key?(:'memory_per_oracle_compute_unit_in_gbs')

      self.memory_per_oracle_compute_unit_in_gbs = attributes[:'memory_per_oracle_compute_unit_in_gbs'] if attributes[:'memory_per_oracle_compute_unit_in_gbs']

      self.autonomous_data_storage_size_in_tbs = attributes[:'autonomousDataStorageSizeInTBs'] if attributes[:'autonomousDataStorageSizeInTBs']

      raise 'You cannot provide both :autonomousDataStorageSizeInTBs and :autonomous_data_storage_size_in_tbs' if attributes.key?(:'autonomousDataStorageSizeInTBs') && attributes.key?(:'autonomous_data_storage_size_in_tbs')

      self.autonomous_data_storage_size_in_tbs = attributes[:'autonomous_data_storage_size_in_tbs'] if attributes[:'autonomous_data_storage_size_in_tbs']

      self.cluster_time_zone = attributes[:'clusterTimeZone'] if attributes[:'clusterTimeZone']
      self.cluster_time_zone = "Etc/UTC" if cluster_time_zone.nil? && !attributes.key?(:'clusterTimeZone') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :clusterTimeZone and :cluster_time_zone' if attributes.key?(:'clusterTimeZone') && attributes.key?(:'cluster_time_zone')

      self.cluster_time_zone = attributes[:'cluster_time_zone'] if attributes[:'cluster_time_zone']
      self.cluster_time_zone = "Etc/UTC" if cluster_time_zone.nil? && !attributes.key?(:'clusterTimeZone') && !attributes.key?(:'cluster_time_zone') # rubocop:disable Style/StringLiterals

      self.compute_model = attributes[:'computeModel'] if attributes[:'computeModel']
      self.compute_model = "ECPU" if compute_model.nil? && !attributes.key?(:'computeModel') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :computeModel and :compute_model' if attributes.key?(:'computeModel') && attributes.key?(:'compute_model')

      self.compute_model = attributes[:'compute_model'] if attributes[:'compute_model']
      self.compute_model = "ECPU" if compute_model.nil? && !attributes.key?(:'computeModel') && !attributes.key?(:'compute_model') # rubocop:disable Style/StringLiterals

      self.is_mtls_enabled_vm_cluster = attributes[:'isMtlsEnabledVmCluster'] unless attributes[:'isMtlsEnabledVmCluster'].nil?
      self.is_mtls_enabled_vm_cluster = false if is_mtls_enabled_vm_cluster.nil? && !attributes.key?(:'isMtlsEnabledVmCluster') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isMtlsEnabledVmCluster and :is_mtls_enabled_vm_cluster' if attributes.key?(:'isMtlsEnabledVmCluster') && attributes.key?(:'is_mtls_enabled_vm_cluster')

      self.is_mtls_enabled_vm_cluster = attributes[:'is_mtls_enabled_vm_cluster'] unless attributes[:'is_mtls_enabled_vm_cluster'].nil?
      self.is_mtls_enabled_vm_cluster = false if is_mtls_enabled_vm_cluster.nil? && !attributes.key?(:'isMtlsEnabledVmCluster') && !attributes.key?(:'is_mtls_enabled_vm_cluster') # rubocop:disable Style/StringLiterals

      self.db_servers = attributes[:'dbServers'] if attributes[:'dbServers']

      raise 'You cannot provide both :dbServers and :db_servers' if attributes.key?(:'dbServers') && attributes.key?(:'db_servers')

      self.db_servers = attributes[:'db_servers'] if attributes[:'db_servers']

      self.maintenance_window_details = attributes[:'maintenanceWindowDetails'] if attributes[:'maintenanceWindowDetails']

      raise 'You cannot provide both :maintenanceWindowDetails and :maintenance_window_details' if attributes.key?(:'maintenanceWindowDetails') && attributes.key?(:'maintenance_window_details')

      self.maintenance_window_details = attributes[:'maintenance_window_details'] if attributes[:'maintenance_window_details']

      self.scan_listener_port_tls = attributes[:'scanListenerPortTls'] if attributes[:'scanListenerPortTls']

      raise 'You cannot provide both :scanListenerPortTls and :scan_listener_port_tls' if attributes.key?(:'scanListenerPortTls') && attributes.key?(:'scan_listener_port_tls')

      self.scan_listener_port_tls = attributes[:'scan_listener_port_tls'] if attributes[:'scan_listener_port_tls']

      self.scan_listener_port_non_tls = attributes[:'scanListenerPortNonTls'] if attributes[:'scanListenerPortNonTls']

      raise 'You cannot provide both :scanListenerPortNonTls and :scan_listener_port_non_tls' if attributes.key?(:'scanListenerPortNonTls') && attributes.key?(:'scan_listener_port_non_tls')

      self.scan_listener_port_non_tls = attributes[:'scan_listener_port_non_tls'] if attributes[:'scan_listener_port_non_tls']

      self.license_model = attributes[:'licenseModel'] if attributes[:'licenseModel']

      raise 'You cannot provide both :licenseModel and :license_model' if attributes.key?(:'licenseModel') && attributes.key?(:'license_model')

      self.license_model = attributes[:'license_model'] if attributes[:'license_model']

      self.nsg_ids = attributes[:'nsgIds'] if attributes[:'nsgIds']

      raise 'You cannot provide both :nsgIds and :nsg_ids' if attributes.key?(:'nsgIds') && attributes.key?(:'nsg_ids')

      self.nsg_ids = attributes[:'nsg_ids'] if attributes[:'nsg_ids']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] compute_model Object to be assigned
    def compute_model=(compute_model)
      raise "Invalid value for 'compute_model': this must be one of the values in COMPUTE_MODEL_ENUM." if compute_model && !COMPUTE_MODEL_ENUM.include?(compute_model)

      @compute_model = compute_model
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license_model Object to be assigned
    def license_model=(license_model)
      raise "Invalid value for 'license_model': this must be one of the values in LICENSE_MODEL_ENUM." if license_model && !LICENSE_MODEL_ENUM.include?(license_model)

      @license_model = license_model
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compartment_id == other.compartment_id &&
        description == other.description &&
        subnet_id == other.subnet_id &&
        display_name == other.display_name &&
        cloud_exadata_infrastructure_id == other.cloud_exadata_infrastructure_id &&
        total_container_databases == other.total_container_databases &&
        cpu_core_count_per_node == other.cpu_core_count_per_node &&
        memory_per_oracle_compute_unit_in_gbs == other.memory_per_oracle_compute_unit_in_gbs &&
        autonomous_data_storage_size_in_tbs == other.autonomous_data_storage_size_in_tbs &&
        cluster_time_zone == other.cluster_time_zone &&
        compute_model == other.compute_model &&
        is_mtls_enabled_vm_cluster == other.is_mtls_enabled_vm_cluster &&
        db_servers == other.db_servers &&
        maintenance_window_details == other.maintenance_window_details &&
        scan_listener_port_tls == other.scan_listener_port_tls &&
        scan_listener_port_non_tls == other.scan_listener_port_non_tls &&
        license_model == other.license_model &&
        nsg_ids == other.nsg_ids &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compartment_id, description, subnet_id, display_name, cloud_exadata_infrastructure_id, total_container_databases, cpu_core_count_per_node, memory_per_oracle_compute_unit_in_gbs, autonomous_data_storage_size_in_tbs, cluster_time_zone, compute_model, is_mtls_enabled_vm_cluster, db_servers, maintenance_window_details, scan_listener_port_tls, scan_listener_port_non_tls, license_model, nsg_ids, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
