# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Backup Options
  # To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized, talk to an administrator. If you're an administrator who needs to write policies to give users access, see [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
  #
  class Database::Models::DbBackupConfig
    AUTO_BACKUP_WINDOW_ENUM = [
      AUTO_BACKUP_WINDOW_SLOT_ONE = 'SLOT_ONE'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_TWO = 'SLOT_TWO'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_THREE = 'SLOT_THREE'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_FOUR = 'SLOT_FOUR'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_FIVE = 'SLOT_FIVE'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_SIX = 'SLOT_SIX'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_SEVEN = 'SLOT_SEVEN'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_EIGHT = 'SLOT_EIGHT'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_NINE = 'SLOT_NINE'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_TEN = 'SLOT_TEN'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_ELEVEN = 'SLOT_ELEVEN'.freeze,
      AUTO_BACKUP_WINDOW_SLOT_TWELVE = 'SLOT_TWELVE'.freeze,
      AUTO_BACKUP_WINDOW_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUTO_FULL_BACKUP_WINDOW_ENUM = [
      AUTO_FULL_BACKUP_WINDOW_SLOT_ONE = 'SLOT_ONE'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_TWO = 'SLOT_TWO'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_THREE = 'SLOT_THREE'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_FOUR = 'SLOT_FOUR'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_FIVE = 'SLOT_FIVE'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_SIX = 'SLOT_SIX'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_SEVEN = 'SLOT_SEVEN'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_EIGHT = 'SLOT_EIGHT'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_NINE = 'SLOT_NINE'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_TEN = 'SLOT_TEN'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_ELEVEN = 'SLOT_ELEVEN'.freeze,
      AUTO_FULL_BACKUP_WINDOW_SLOT_TWELVE = 'SLOT_TWELVE'.freeze,
      AUTO_FULL_BACKUP_WINDOW_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    AUTO_FULL_BACKUP_DAY_ENUM = [
      AUTO_FULL_BACKUP_DAY_SUNDAY = 'SUNDAY'.freeze,
      AUTO_FULL_BACKUP_DAY_MONDAY = 'MONDAY'.freeze,
      AUTO_FULL_BACKUP_DAY_TUESDAY = 'TUESDAY'.freeze,
      AUTO_FULL_BACKUP_DAY_WEDNESDAY = 'WEDNESDAY'.freeze,
      AUTO_FULL_BACKUP_DAY_THURSDAY = 'THURSDAY'.freeze,
      AUTO_FULL_BACKUP_DAY_FRIDAY = 'FRIDAY'.freeze,
      AUTO_FULL_BACKUP_DAY_SATURDAY = 'SATURDAY'.freeze,
      AUTO_FULL_BACKUP_DAY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    BACKUP_DELETION_POLICY_ENUM = [
      BACKUP_DELETION_POLICY_DELETE_IMMEDIATELY = 'DELETE_IMMEDIATELY'.freeze,
      BACKUP_DELETION_POLICY_DELETE_AFTER_RETENTION_PERIOD = 'DELETE_AFTER_RETENTION_PERIOD'.freeze,
      BACKUP_DELETION_POLICY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # If set to true, configures automatic backups. If you previously used RMAN or dbcli to configure backups and then you switch to using the Console or the API for backups, a new backup configuration is created and associated with your database. This means that you can no longer rely on your previously configured unmanaged backups to work.
    # @return [BOOLEAN]
    attr_accessor :auto_backup_enabled

    # Number of days between the current and the earliest point of recoverability covered by automatic backups.
    # This value applies to automatic backups only. After a new automatic backup has been created, Oracle removes old automatic backups that are created before the window.
    # When the value is updated, it is applied to all existing automatic backups.
    #
    # @return [Integer]
    attr_accessor :recovery_window_in_days

    # Time window selected for initiating automatic backup for the database system. There are twelve available two-hour time windows. If no option is selected, a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).
    #
    # Example: `SLOT_TWO`
    #
    # @return [String]
    attr_reader :auto_backup_window

    # Time window selected for initiating full backup for the database system. There are twelve available two-hour time windows. If no option is selected, the value is null and a start time between 12:00 AM to 7:00 AM in the region of the database is automatically chosen. For example, if the user selects SLOT_TWO from the enum list, the automatic backup job will start in between 2:00 AM (inclusive) to 4:00 AM (exclusive).
    #
    # Example: `SLOT_TWO`
    #
    # @return [String]
    attr_reader :auto_full_backup_window

    # Day of the week the full backup should be applied on the database system. If no option is selected, the value is null and we will default to Sunday.
    # @return [String]
    attr_reader :auto_full_backup_day

    # If set to true, configures automatic full backups in the local region (the region of the DB system) for the first backup run immediately.
    # @return [BOOLEAN]
    attr_accessor :run_immediate_full_backup

    # Backup destination details.
    # @return [Array<OCI::Database::Models::BackupDestinationDetails>]
    attr_accessor :backup_destination_details

    # This defines when the backups will be deleted. - IMMEDIATE option keep the backup for predefined time i.e 72 hours and then delete permanently... - RETAIN will keep the backups as per the policy defined for database backups.
    # @return [String]
    attr_reader :backup_deletion_policy

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'auto_backup_enabled': :'autoBackupEnabled',
        'recovery_window_in_days': :'recoveryWindowInDays',
        'auto_backup_window': :'autoBackupWindow',
        'auto_full_backup_window': :'autoFullBackupWindow',
        'auto_full_backup_day': :'autoFullBackupDay',
        'run_immediate_full_backup': :'runImmediateFullBackup',
        'backup_destination_details': :'backupDestinationDetails',
        'backup_deletion_policy': :'backupDeletionPolicy'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'auto_backup_enabled': :'BOOLEAN',
        'recovery_window_in_days': :'Integer',
        'auto_backup_window': :'String',
        'auto_full_backup_window': :'String',
        'auto_full_backup_day': :'String',
        'run_immediate_full_backup': :'BOOLEAN',
        'backup_destination_details': :'Array<OCI::Database::Models::BackupDestinationDetails>',
        'backup_deletion_policy': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [BOOLEAN] :auto_backup_enabled The value to assign to the {#auto_backup_enabled} property
    # @option attributes [Integer] :recovery_window_in_days The value to assign to the {#recovery_window_in_days} property
    # @option attributes [String] :auto_backup_window The value to assign to the {#auto_backup_window} property
    # @option attributes [String] :auto_full_backup_window The value to assign to the {#auto_full_backup_window} property
    # @option attributes [String] :auto_full_backup_day The value to assign to the {#auto_full_backup_day} property
    # @option attributes [BOOLEAN] :run_immediate_full_backup The value to assign to the {#run_immediate_full_backup} property
    # @option attributes [Array<OCI::Database::Models::BackupDestinationDetails>] :backup_destination_details The value to assign to the {#backup_destination_details} property
    # @option attributes [String] :backup_deletion_policy The value to assign to the {#backup_deletion_policy} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.auto_backup_enabled = attributes[:'autoBackupEnabled'] unless attributes[:'autoBackupEnabled'].nil?

      raise 'You cannot provide both :autoBackupEnabled and :auto_backup_enabled' if attributes.key?(:'autoBackupEnabled') && attributes.key?(:'auto_backup_enabled')

      self.auto_backup_enabled = attributes[:'auto_backup_enabled'] unless attributes[:'auto_backup_enabled'].nil?

      self.recovery_window_in_days = attributes[:'recoveryWindowInDays'] if attributes[:'recoveryWindowInDays']

      raise 'You cannot provide both :recoveryWindowInDays and :recovery_window_in_days' if attributes.key?(:'recoveryWindowInDays') && attributes.key?(:'recovery_window_in_days')

      self.recovery_window_in_days = attributes[:'recovery_window_in_days'] if attributes[:'recovery_window_in_days']

      self.auto_backup_window = attributes[:'autoBackupWindow'] if attributes[:'autoBackupWindow']

      raise 'You cannot provide both :autoBackupWindow and :auto_backup_window' if attributes.key?(:'autoBackupWindow') && attributes.key?(:'auto_backup_window')

      self.auto_backup_window = attributes[:'auto_backup_window'] if attributes[:'auto_backup_window']

      self.auto_full_backup_window = attributes[:'autoFullBackupWindow'] if attributes[:'autoFullBackupWindow']

      raise 'You cannot provide both :autoFullBackupWindow and :auto_full_backup_window' if attributes.key?(:'autoFullBackupWindow') && attributes.key?(:'auto_full_backup_window')

      self.auto_full_backup_window = attributes[:'auto_full_backup_window'] if attributes[:'auto_full_backup_window']

      self.auto_full_backup_day = attributes[:'autoFullBackupDay'] if attributes[:'autoFullBackupDay']
      self.auto_full_backup_day = "SUNDAY" if auto_full_backup_day.nil? && !attributes.key?(:'autoFullBackupDay') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :autoFullBackupDay and :auto_full_backup_day' if attributes.key?(:'autoFullBackupDay') && attributes.key?(:'auto_full_backup_day')

      self.auto_full_backup_day = attributes[:'auto_full_backup_day'] if attributes[:'auto_full_backup_day']
      self.auto_full_backup_day = "SUNDAY" if auto_full_backup_day.nil? && !attributes.key?(:'autoFullBackupDay') && !attributes.key?(:'auto_full_backup_day') # rubocop:disable Style/StringLiterals

      self.run_immediate_full_backup = attributes[:'runImmediateFullBackup'] unless attributes[:'runImmediateFullBackup'].nil?
      self.run_immediate_full_backup = true if run_immediate_full_backup.nil? && !attributes.key?(:'runImmediateFullBackup') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :runImmediateFullBackup and :run_immediate_full_backup' if attributes.key?(:'runImmediateFullBackup') && attributes.key?(:'run_immediate_full_backup')

      self.run_immediate_full_backup = attributes[:'run_immediate_full_backup'] unless attributes[:'run_immediate_full_backup'].nil?
      self.run_immediate_full_backup = true if run_immediate_full_backup.nil? && !attributes.key?(:'runImmediateFullBackup') && !attributes.key?(:'run_immediate_full_backup') # rubocop:disable Style/StringLiterals

      self.backup_destination_details = attributes[:'backupDestinationDetails'] if attributes[:'backupDestinationDetails']

      raise 'You cannot provide both :backupDestinationDetails and :backup_destination_details' if attributes.key?(:'backupDestinationDetails') && attributes.key?(:'backup_destination_details')

      self.backup_destination_details = attributes[:'backup_destination_details'] if attributes[:'backup_destination_details']

      self.backup_deletion_policy = attributes[:'backupDeletionPolicy'] if attributes[:'backupDeletionPolicy']

      raise 'You cannot provide both :backupDeletionPolicy and :backup_deletion_policy' if attributes.key?(:'backupDeletionPolicy') && attributes.key?(:'backup_deletion_policy')

      self.backup_deletion_policy = attributes[:'backup_deletion_policy'] if attributes[:'backup_deletion_policy']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auto_backup_window Object to be assigned
    def auto_backup_window=(auto_backup_window)
      # rubocop:disable Style/ConditionalAssignment
      if auto_backup_window && !AUTO_BACKUP_WINDOW_ENUM.include?(auto_backup_window)
        OCI.logger.debug("Unknown value for 'auto_backup_window' [" + auto_backup_window + "]. Mapping to 'AUTO_BACKUP_WINDOW_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @auto_backup_window = AUTO_BACKUP_WINDOW_UNKNOWN_ENUM_VALUE
      else
        @auto_backup_window = auto_backup_window
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auto_full_backup_window Object to be assigned
    def auto_full_backup_window=(auto_full_backup_window)
      # rubocop:disable Style/ConditionalAssignment
      if auto_full_backup_window && !AUTO_FULL_BACKUP_WINDOW_ENUM.include?(auto_full_backup_window)
        OCI.logger.debug("Unknown value for 'auto_full_backup_window' [" + auto_full_backup_window + "]. Mapping to 'AUTO_FULL_BACKUP_WINDOW_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @auto_full_backup_window = AUTO_FULL_BACKUP_WINDOW_UNKNOWN_ENUM_VALUE
      else
        @auto_full_backup_window = auto_full_backup_window
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auto_full_backup_day Object to be assigned
    def auto_full_backup_day=(auto_full_backup_day)
      # rubocop:disable Style/ConditionalAssignment
      if auto_full_backup_day && !AUTO_FULL_BACKUP_DAY_ENUM.include?(auto_full_backup_day)
        OCI.logger.debug("Unknown value for 'auto_full_backup_day' [" + auto_full_backup_day + "]. Mapping to 'AUTO_FULL_BACKUP_DAY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @auto_full_backup_day = AUTO_FULL_BACKUP_DAY_UNKNOWN_ENUM_VALUE
      else
        @auto_full_backup_day = auto_full_backup_day
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] backup_deletion_policy Object to be assigned
    def backup_deletion_policy=(backup_deletion_policy)
      # rubocop:disable Style/ConditionalAssignment
      if backup_deletion_policy && !BACKUP_DELETION_POLICY_ENUM.include?(backup_deletion_policy)
        OCI.logger.debug("Unknown value for 'backup_deletion_policy' [" + backup_deletion_policy + "]. Mapping to 'BACKUP_DELETION_POLICY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @backup_deletion_policy = BACKUP_DELETION_POLICY_UNKNOWN_ENUM_VALUE
      else
        @backup_deletion_policy = backup_deletion_policy
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        auto_backup_enabled == other.auto_backup_enabled &&
        recovery_window_in_days == other.recovery_window_in_days &&
        auto_backup_window == other.auto_backup_window &&
        auto_full_backup_window == other.auto_full_backup_window &&
        auto_full_backup_day == other.auto_full_backup_day &&
        run_immediate_full_backup == other.run_immediate_full_backup &&
        backup_destination_details == other.backup_destination_details &&
        backup_deletion_policy == other.backup_deletion_policy
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [auto_backup_enabled, recovery_window_in_days, auto_backup_window, auto_full_backup_window, auto_full_backup_day, run_immediate_full_backup, backup_destination_details, backup_deletion_policy].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
