# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Generates a recommended VM cluster network configuration for an Exadata Cloud@Customer system. Applies to Exadata Cloud@Customer instances only.
  #
  class Database::Models::GenerateRecommendedNetworkDetails
    # **[Required]** The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The user-friendly name for the VM cluster network. The name does not need to be unique.
    # @return [String]
    attr_accessor :display_name

    # The list of Db server Ids to configure network.
    # @return [Array<String>]
    attr_accessor :db_servers

    # The SCAN TCPIP port. Default is 1521.
    # @return [Integer]
    attr_accessor :scan_listener_port_tcp

    # The SCAN TCPIP SSL port. Default is 2484.
    # @return [Integer]
    attr_accessor :scan_listener_port_tcp_ssl

    # The DR SCAN TCPIP port. Default is 1521.
    # @return [Integer]
    attr_accessor :dr_scan_listener_port_tcp

    # **[Required]** List of parameters for generation of the client and backup networks.
    # @return [Array<OCI::Database::Models::InfoForNetworkGenDetails>]
    attr_accessor :networks

    # The list of DNS server IP addresses. Maximum of 3 allowed.
    # @return [Array<String>]
    attr_accessor :dns

    # The list of NTP server IP addresses. Maximum of 3 allowed.
    # @return [Array<String>]
    attr_accessor :ntp

    # Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # Example: `{\"Department\": \"Finance\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # For more information, see [Resource Tags](https://docs.cloud.oracle.com/Content/General/Concepts/resourcetags.htm).
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'compartmentId',
        'display_name': :'displayName',
        'db_servers': :'dbServers',
        'scan_listener_port_tcp': :'scanListenerPortTcp',
        'scan_listener_port_tcp_ssl': :'scanListenerPortTcpSsl',
        'dr_scan_listener_port_tcp': :'drScanListenerPortTcp',
        'networks': :'networks',
        'dns': :'dns',
        'ntp': :'ntp',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compartment_id': :'String',
        'display_name': :'String',
        'db_servers': :'Array<String>',
        'scan_listener_port_tcp': :'Integer',
        'scan_listener_port_tcp_ssl': :'Integer',
        'dr_scan_listener_port_tcp': :'Integer',
        'networks': :'Array<OCI::Database::Models::InfoForNetworkGenDetails>',
        'dns': :'Array<String>',
        'ntp': :'Array<String>',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Array<String>] :db_servers The value to assign to the {#db_servers} property
    # @option attributes [Integer] :scan_listener_port_tcp The value to assign to the {#scan_listener_port_tcp} property
    # @option attributes [Integer] :scan_listener_port_tcp_ssl The value to assign to the {#scan_listener_port_tcp_ssl} property
    # @option attributes [Integer] :dr_scan_listener_port_tcp The value to assign to the {#dr_scan_listener_port_tcp} property
    # @option attributes [Array<OCI::Database::Models::InfoForNetworkGenDetails>] :networks The value to assign to the {#networks} property
    # @option attributes [Array<String>] :dns The value to assign to the {#dns} property
    # @option attributes [Array<String>] :ntp The value to assign to the {#ntp} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.db_servers = attributes[:'dbServers'] if attributes[:'dbServers']

      raise 'You cannot provide both :dbServers and :db_servers' if attributes.key?(:'dbServers') && attributes.key?(:'db_servers')

      self.db_servers = attributes[:'db_servers'] if attributes[:'db_servers']

      self.scan_listener_port_tcp = attributes[:'scanListenerPortTcp'] if attributes[:'scanListenerPortTcp']

      raise 'You cannot provide both :scanListenerPortTcp and :scan_listener_port_tcp' if attributes.key?(:'scanListenerPortTcp') && attributes.key?(:'scan_listener_port_tcp')

      self.scan_listener_port_tcp = attributes[:'scan_listener_port_tcp'] if attributes[:'scan_listener_port_tcp']

      self.scan_listener_port_tcp_ssl = attributes[:'scanListenerPortTcpSsl'] if attributes[:'scanListenerPortTcpSsl']

      raise 'You cannot provide both :scanListenerPortTcpSsl and :scan_listener_port_tcp_ssl' if attributes.key?(:'scanListenerPortTcpSsl') && attributes.key?(:'scan_listener_port_tcp_ssl')

      self.scan_listener_port_tcp_ssl = attributes[:'scan_listener_port_tcp_ssl'] if attributes[:'scan_listener_port_tcp_ssl']

      self.dr_scan_listener_port_tcp = attributes[:'drScanListenerPortTcp'] if attributes[:'drScanListenerPortTcp']

      raise 'You cannot provide both :drScanListenerPortTcp and :dr_scan_listener_port_tcp' if attributes.key?(:'drScanListenerPortTcp') && attributes.key?(:'dr_scan_listener_port_tcp')

      self.dr_scan_listener_port_tcp = attributes[:'dr_scan_listener_port_tcp'] if attributes[:'dr_scan_listener_port_tcp']

      self.networks = attributes[:'networks'] if attributes[:'networks']

      self.dns = attributes[:'dns'] if attributes[:'dns']

      self.ntp = attributes[:'ntp'] if attributes[:'ntp']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compartment_id == other.compartment_id &&
        display_name == other.display_name &&
        db_servers == other.db_servers &&
        scan_listener_port_tcp == other.scan_listener_port_tcp &&
        scan_listener_port_tcp_ssl == other.scan_listener_port_tcp_ssl &&
        dr_scan_listener_port_tcp == other.dr_scan_listener_port_tcp &&
        networks == other.networks &&
        dns == other.dns &&
        ntp == other.ntp &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compartment_id, display_name, db_servers, scan_listener_port_tcp, scan_listener_port_tcp_ssl, dr_scan_listener_port_tcp, networks, dns, ntp, freeform_tags, defined_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
