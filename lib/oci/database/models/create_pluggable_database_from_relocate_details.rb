# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20160918
require 'date'
require_relative 'create_pluggable_database_creation_type_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Specifies the creation type Relocate.
  # Additional input 'dblinkUsername` and `dblinkUserPassword` can be provided for Relocate Operation.
  # If not provided, Backend will create a temporary user to perform Relocate operation.
  #
  class Database::Models::CreatePluggableDatabaseFromRelocateDetails < Database::Models::CreatePluggableDatabaseCreationTypeDetails
    # The name of the DB link user.
    # @return [String]
    attr_accessor :dblink_username

    # The DB link user password.
    # @return [String]
    attr_accessor :dblink_user_password

    # **[Required]** The OCID of the Source Pluggable Database.
    # @return [String]
    attr_accessor :source_pluggable_database_id

    # **[Required]** The DB system administrator password of the source Container Database.
    # @return [String]
    attr_accessor :source_container_database_admin_password

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'creation_type': :'creationType',
        'dblink_username': :'dblinkUsername',
        'dblink_user_password': :'dblinkUserPassword',
        'source_pluggable_database_id': :'sourcePluggableDatabaseId',
        'source_container_database_admin_password': :'sourceContainerDatabaseAdminPassword'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'creation_type': :'String',
        'dblink_username': :'String',
        'dblink_user_password': :'String',
        'source_pluggable_database_id': :'String',
        'source_container_database_admin_password': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :dblink_username The value to assign to the {#dblink_username} property
    # @option attributes [String] :dblink_user_password The value to assign to the {#dblink_user_password} property
    # @option attributes [String] :source_pluggable_database_id The value to assign to the {#source_pluggable_database_id} property
    # @option attributes [String] :source_container_database_admin_password The value to assign to the {#source_container_database_admin_password} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['creationType'] = 'RELOCATE_PDB'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.dblink_username = attributes[:'dblinkUsername'] if attributes[:'dblinkUsername']

      raise 'You cannot provide both :dblinkUsername and :dblink_username' if attributes.key?(:'dblinkUsername') && attributes.key?(:'dblink_username')

      self.dblink_username = attributes[:'dblink_username'] if attributes[:'dblink_username']

      self.dblink_user_password = attributes[:'dblinkUserPassword'] if attributes[:'dblinkUserPassword']

      raise 'You cannot provide both :dblinkUserPassword and :dblink_user_password' if attributes.key?(:'dblinkUserPassword') && attributes.key?(:'dblink_user_password')

      self.dblink_user_password = attributes[:'dblink_user_password'] if attributes[:'dblink_user_password']

      self.source_pluggable_database_id = attributes[:'sourcePluggableDatabaseId'] if attributes[:'sourcePluggableDatabaseId']

      raise 'You cannot provide both :sourcePluggableDatabaseId and :source_pluggable_database_id' if attributes.key?(:'sourcePluggableDatabaseId') && attributes.key?(:'source_pluggable_database_id')

      self.source_pluggable_database_id = attributes[:'source_pluggable_database_id'] if attributes[:'source_pluggable_database_id']

      self.source_container_database_admin_password = attributes[:'sourceContainerDatabaseAdminPassword'] if attributes[:'sourceContainerDatabaseAdminPassword']

      raise 'You cannot provide both :sourceContainerDatabaseAdminPassword and :source_container_database_admin_password' if attributes.key?(:'sourceContainerDatabaseAdminPassword') && attributes.key?(:'source_container_database_admin_password')

      self.source_container_database_admin_password = attributes[:'source_container_database_admin_password'] if attributes[:'source_container_database_admin_password']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        creation_type == other.creation_type &&
        dblink_username == other.dblink_username &&
        dblink_user_password == other.dblink_user_password &&
        source_pluggable_database_id == other.source_pluggable_database_id &&
        source_container_database_admin_password == other.source_container_database_admin_password
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [creation_type, dblink_username, dblink_user_password, source_pluggable_database_id, source_container_database_admin_password].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
