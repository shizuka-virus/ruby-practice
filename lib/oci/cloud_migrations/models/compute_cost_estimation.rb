# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220919
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Cost estimation for compute
  class CloudMigrations::Models::ComputeCostEstimation
    # **[Required]** OCPU per hour
    # @return [Float]
    attr_accessor :ocpu_per_hour

    # OCPU per hour by subscription
    # @return [Float]
    attr_accessor :ocpu_per_hour_by_subscription

    # **[Required]** Gigabyte per hour
    # @return [Float]
    attr_accessor :memory_gb_per_hour

    # Gigabyte per hour by subscription
    # @return [Float]
    attr_accessor :memory_gb_per_hour_by_subscription

    # **[Required]** GPU per hour
    # @return [Float]
    attr_accessor :gpu_per_hour

    # GPU per hour by subscription
    # @return [Float]
    attr_accessor :gpu_per_hour_by_subscription

    # **[Required]** Total per hour
    # @return [Float]
    attr_accessor :total_per_hour

    # Total usage per hour by subscription
    # @return [Float]
    attr_accessor :total_per_hour_by_subscription

    # Total number of OCPUs
    # @return [Float]
    attr_accessor :ocpu_count

    # Total usage of memory
    # @return [Float]
    attr_accessor :memory_amount_gb

    # Total number of GPU
    # @return [Float]
    attr_accessor :gpu_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'ocpu_per_hour': :'ocpuPerHour',
        'ocpu_per_hour_by_subscription': :'ocpuPerHourBySubscription',
        'memory_gb_per_hour': :'memoryGbPerHour',
        'memory_gb_per_hour_by_subscription': :'memoryGbPerHourBySubscription',
        'gpu_per_hour': :'gpuPerHour',
        'gpu_per_hour_by_subscription': :'gpuPerHourBySubscription',
        'total_per_hour': :'totalPerHour',
        'total_per_hour_by_subscription': :'totalPerHourBySubscription',
        'ocpu_count': :'ocpuCount',
        'memory_amount_gb': :'memoryAmountGb',
        'gpu_count': :'gpuCount'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'ocpu_per_hour': :'Float',
        'ocpu_per_hour_by_subscription': :'Float',
        'memory_gb_per_hour': :'Float',
        'memory_gb_per_hour_by_subscription': :'Float',
        'gpu_per_hour': :'Float',
        'gpu_per_hour_by_subscription': :'Float',
        'total_per_hour': :'Float',
        'total_per_hour_by_subscription': :'Float',
        'ocpu_count': :'Float',
        'memory_amount_gb': :'Float',
        'gpu_count': :'Float'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Float] :ocpu_per_hour The value to assign to the {#ocpu_per_hour} property
    # @option attributes [Float] :ocpu_per_hour_by_subscription The value to assign to the {#ocpu_per_hour_by_subscription} property
    # @option attributes [Float] :memory_gb_per_hour The value to assign to the {#memory_gb_per_hour} property
    # @option attributes [Float] :memory_gb_per_hour_by_subscription The value to assign to the {#memory_gb_per_hour_by_subscription} property
    # @option attributes [Float] :gpu_per_hour The value to assign to the {#gpu_per_hour} property
    # @option attributes [Float] :gpu_per_hour_by_subscription The value to assign to the {#gpu_per_hour_by_subscription} property
    # @option attributes [Float] :total_per_hour The value to assign to the {#total_per_hour} property
    # @option attributes [Float] :total_per_hour_by_subscription The value to assign to the {#total_per_hour_by_subscription} property
    # @option attributes [Float] :ocpu_count The value to assign to the {#ocpu_count} property
    # @option attributes [Float] :memory_amount_gb The value to assign to the {#memory_amount_gb} property
    # @option attributes [Float] :gpu_count The value to assign to the {#gpu_count} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.ocpu_per_hour = attributes[:'ocpuPerHour'] if attributes[:'ocpuPerHour']

      raise 'You cannot provide both :ocpuPerHour and :ocpu_per_hour' if attributes.key?(:'ocpuPerHour') && attributes.key?(:'ocpu_per_hour')

      self.ocpu_per_hour = attributes[:'ocpu_per_hour'] if attributes[:'ocpu_per_hour']

      self.ocpu_per_hour_by_subscription = attributes[:'ocpuPerHourBySubscription'] if attributes[:'ocpuPerHourBySubscription']

      raise 'You cannot provide both :ocpuPerHourBySubscription and :ocpu_per_hour_by_subscription' if attributes.key?(:'ocpuPerHourBySubscription') && attributes.key?(:'ocpu_per_hour_by_subscription')

      self.ocpu_per_hour_by_subscription = attributes[:'ocpu_per_hour_by_subscription'] if attributes[:'ocpu_per_hour_by_subscription']

      self.memory_gb_per_hour = attributes[:'memoryGbPerHour'] if attributes[:'memoryGbPerHour']

      raise 'You cannot provide both :memoryGbPerHour and :memory_gb_per_hour' if attributes.key?(:'memoryGbPerHour') && attributes.key?(:'memory_gb_per_hour')

      self.memory_gb_per_hour = attributes[:'memory_gb_per_hour'] if attributes[:'memory_gb_per_hour']

      self.memory_gb_per_hour_by_subscription = attributes[:'memoryGbPerHourBySubscription'] if attributes[:'memoryGbPerHourBySubscription']

      raise 'You cannot provide both :memoryGbPerHourBySubscription and :memory_gb_per_hour_by_subscription' if attributes.key?(:'memoryGbPerHourBySubscription') && attributes.key?(:'memory_gb_per_hour_by_subscription')

      self.memory_gb_per_hour_by_subscription = attributes[:'memory_gb_per_hour_by_subscription'] if attributes[:'memory_gb_per_hour_by_subscription']

      self.gpu_per_hour = attributes[:'gpuPerHour'] if attributes[:'gpuPerHour']

      raise 'You cannot provide both :gpuPerHour and :gpu_per_hour' if attributes.key?(:'gpuPerHour') && attributes.key?(:'gpu_per_hour')

      self.gpu_per_hour = attributes[:'gpu_per_hour'] if attributes[:'gpu_per_hour']

      self.gpu_per_hour_by_subscription = attributes[:'gpuPerHourBySubscription'] if attributes[:'gpuPerHourBySubscription']

      raise 'You cannot provide both :gpuPerHourBySubscription and :gpu_per_hour_by_subscription' if attributes.key?(:'gpuPerHourBySubscription') && attributes.key?(:'gpu_per_hour_by_subscription')

      self.gpu_per_hour_by_subscription = attributes[:'gpu_per_hour_by_subscription'] if attributes[:'gpu_per_hour_by_subscription']

      self.total_per_hour = attributes[:'totalPerHour'] if attributes[:'totalPerHour']

      raise 'You cannot provide both :totalPerHour and :total_per_hour' if attributes.key?(:'totalPerHour') && attributes.key?(:'total_per_hour')

      self.total_per_hour = attributes[:'total_per_hour'] if attributes[:'total_per_hour']

      self.total_per_hour_by_subscription = attributes[:'totalPerHourBySubscription'] if attributes[:'totalPerHourBySubscription']

      raise 'You cannot provide both :totalPerHourBySubscription and :total_per_hour_by_subscription' if attributes.key?(:'totalPerHourBySubscription') && attributes.key?(:'total_per_hour_by_subscription')

      self.total_per_hour_by_subscription = attributes[:'total_per_hour_by_subscription'] if attributes[:'total_per_hour_by_subscription']

      self.ocpu_count = attributes[:'ocpuCount'] if attributes[:'ocpuCount']

      raise 'You cannot provide both :ocpuCount and :ocpu_count' if attributes.key?(:'ocpuCount') && attributes.key?(:'ocpu_count')

      self.ocpu_count = attributes[:'ocpu_count'] if attributes[:'ocpu_count']

      self.memory_amount_gb = attributes[:'memoryAmountGb'] if attributes[:'memoryAmountGb']

      raise 'You cannot provide both :memoryAmountGb and :memory_amount_gb' if attributes.key?(:'memoryAmountGb') && attributes.key?(:'memory_amount_gb')

      self.memory_amount_gb = attributes[:'memory_amount_gb'] if attributes[:'memory_amount_gb']

      self.gpu_count = attributes[:'gpuCount'] if attributes[:'gpuCount']

      raise 'You cannot provide both :gpuCount and :gpu_count' if attributes.key?(:'gpuCount') && attributes.key?(:'gpu_count')

      self.gpu_count = attributes[:'gpu_count'] if attributes[:'gpu_count']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        ocpu_per_hour == other.ocpu_per_hour &&
        ocpu_per_hour_by_subscription == other.ocpu_per_hour_by_subscription &&
        memory_gb_per_hour == other.memory_gb_per_hour &&
        memory_gb_per_hour_by_subscription == other.memory_gb_per_hour_by_subscription &&
        gpu_per_hour == other.gpu_per_hour &&
        gpu_per_hour_by_subscription == other.gpu_per_hour_by_subscription &&
        total_per_hour == other.total_per_hour &&
        total_per_hour_by_subscription == other.total_per_hour_by_subscription &&
        ocpu_count == other.ocpu_count &&
        memory_amount_gb == other.memory_amount_gb &&
        gpu_count == other.gpu_count
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [ocpu_per_hour, ocpu_per_hour_by_subscription, memory_gb_per_hour, memory_gb_per_hour_by_subscription, gpu_per_hour, gpu_per_hour_by_subscription, total_per_hour, total_per_hour_by_subscription, ocpu_count, memory_amount_gb, gpu_count].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
