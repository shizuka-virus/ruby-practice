# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220919
require 'date'
require_relative 'target_environment'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Description of the VM target environment.
  class CloudMigrations::Models::VmTargetEnvironment < CloudMigrations::Models::TargetEnvironment
    # Availability Domain of the VM configuration.
    # @return [String]
    attr_accessor :availability_domain

    # Fault domain of the VM configuration.
    # @return [String]
    attr_accessor :fault_domain

    # **[Required]** OCID of the VM configuration VCN.
    # @return [String]
    attr_accessor :vcn

    # **[Required]** OCID of the VM configuration subnet.
    # @return [String]
    attr_accessor :subnet

    # OCID of the dedicated VM configuration host.
    # @return [String]
    attr_accessor :dedicated_vm_host

    # Microsoft license for the VM configuration.
    # @return [String]
    attr_accessor :ms_license

    # Preferred VM shape type provided by the customer.
    # @return [String]
    attr_accessor :preferred_shape_type

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'target_compartment_id': :'targetCompartmentId',
        'target_environment_type': :'targetEnvironmentType',
        'availability_domain': :'availabilityDomain',
        'fault_domain': :'faultDomain',
        'vcn': :'vcn',
        'subnet': :'subnet',
        'dedicated_vm_host': :'dedicatedVmHost',
        'ms_license': :'msLicense',
        'preferred_shape_type': :'preferredShapeType'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'target_compartment_id': :'String',
        'target_environment_type': :'String',
        'availability_domain': :'String',
        'fault_domain': :'String',
        'vcn': :'String',
        'subnet': :'String',
        'dedicated_vm_host': :'String',
        'ms_license': :'String',
        'preferred_shape_type': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :target_compartment_id The value to assign to the {OCI::CloudMigrations::Models::TargetEnvironment#target_compartment_id #target_compartment_id} proprety
    # @option attributes [String] :availability_domain The value to assign to the {#availability_domain} property
    # @option attributes [String] :fault_domain The value to assign to the {#fault_domain} property
    # @option attributes [String] :vcn The value to assign to the {#vcn} property
    # @option attributes [String] :subnet The value to assign to the {#subnet} property
    # @option attributes [String] :dedicated_vm_host The value to assign to the {#dedicated_vm_host} property
    # @option attributes [String] :ms_license The value to assign to the {#ms_license} property
    # @option attributes [String] :preferred_shape_type The value to assign to the {#preferred_shape_type} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['targetEnvironmentType'] = 'VM_TARGET_ENV'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.availability_domain = attributes[:'availabilityDomain'] if attributes[:'availabilityDomain']

      raise 'You cannot provide both :availabilityDomain and :availability_domain' if attributes.key?(:'availabilityDomain') && attributes.key?(:'availability_domain')

      self.availability_domain = attributes[:'availability_domain'] if attributes[:'availability_domain']

      self.fault_domain = attributes[:'faultDomain'] if attributes[:'faultDomain']

      raise 'You cannot provide both :faultDomain and :fault_domain' if attributes.key?(:'faultDomain') && attributes.key?(:'fault_domain')

      self.fault_domain = attributes[:'fault_domain'] if attributes[:'fault_domain']

      self.vcn = attributes[:'vcn'] if attributes[:'vcn']

      self.subnet = attributes[:'subnet'] if attributes[:'subnet']

      self.dedicated_vm_host = attributes[:'dedicatedVmHost'] if attributes[:'dedicatedVmHost']

      raise 'You cannot provide both :dedicatedVmHost and :dedicated_vm_host' if attributes.key?(:'dedicatedVmHost') && attributes.key?(:'dedicated_vm_host')

      self.dedicated_vm_host = attributes[:'dedicated_vm_host'] if attributes[:'dedicated_vm_host']

      self.ms_license = attributes[:'msLicense'] if attributes[:'msLicense']

      raise 'You cannot provide both :msLicense and :ms_license' if attributes.key?(:'msLicense') && attributes.key?(:'ms_license')

      self.ms_license = attributes[:'ms_license'] if attributes[:'ms_license']

      self.preferred_shape_type = attributes[:'preferredShapeType'] if attributes[:'preferredShapeType']

      raise 'You cannot provide both :preferredShapeType and :preferred_shape_type' if attributes.key?(:'preferredShapeType') && attributes.key?(:'preferred_shape_type')

      self.preferred_shape_type = attributes[:'preferred_shape_type'] if attributes[:'preferred_shape_type']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        target_compartment_id == other.target_compartment_id &&
        target_environment_type == other.target_environment_type &&
        availability_domain == other.availability_domain &&
        fault_domain == other.fault_domain &&
        vcn == other.vcn &&
        subnet == other.subnet &&
        dedicated_vm_host == other.dedicated_vm_host &&
        ms_license == other.ms_license &&
        preferred_shape_type == other.preferred_shape_type
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [target_compartment_id, target_environment_type, availability_domain, fault_domain, vcn, subnet, dedicated_vm_host, ms_license, preferred_shape_type].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
