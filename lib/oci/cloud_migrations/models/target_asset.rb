# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220919
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Description of the target asset.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class CloudMigrations::Models::TargetAsset
    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_CREATING = 'CREATING'.freeze,
      LIFECYCLE_STATE_UPDATING = 'UPDATING'.freeze,
      LIFECYCLE_STATE_NEEDS_ATTENTION = 'NEEDS_ATTENTION'.freeze,
      LIFECYCLE_STATE_ACTIVE = 'ACTIVE'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    TYPE_ENUM = [
      TYPE_INSTANCE = 'INSTANCE'.freeze,
      TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Unique identifier that is immutable on creation.
    # @return [String]
    attr_accessor :id

    # A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The current state of the target asset.
    # @return [String]
    attr_reader :lifecycle_state

    # A message describing the current state in more detail. For example, it can be used to provide actionable information for a resource in Failed state.
    # @return [String]
    attr_accessor :lifecycle_details

    # **[Required]** OCID of the associated migration plan.
    # @return [String]
    attr_accessor :migration_plan_id

    # Compartment identifier
    # @return [String]
    attr_accessor :compartment_id

    # Created resource identifier
    # @return [String]
    attr_accessor :created_resource_id

    # **[Required]** The type of target asset.
    # @return [String]
    attr_reader :type

    # **[Required]** A boolean indicating whether the asset should be migrated.
    # @return [BOOLEAN]
    attr_accessor :is_excluded_from_execution

    # Messages about the compatibility issues.
    # @return [Array<OCI::CloudMigrations::Models::CompatibilityMessage>]
    attr_accessor :compatibility_messages

    # This attribute is required.
    # @return [OCI::CloudMigrations::Models::CostEstimation]
    attr_accessor :estimated_cost

    # **[Required]** The time when the target asset was created. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The time when the target asset was updated. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** The time when the assessment was done. An RFC3339 formatted datetime string.
    # @return [DateTime]
    attr_accessor :time_assessed

    # @return [OCI::CloudMigrations::Models::MigrationAsset]
    attr_accessor :migration_asset

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'lifecycle_state': :'lifecycleState',
        'lifecycle_details': :'lifecycleDetails',
        'migration_plan_id': :'migrationPlanId',
        'compartment_id': :'compartmentId',
        'created_resource_id': :'createdResourceId',
        'type': :'type',
        'is_excluded_from_execution': :'isExcludedFromExecution',
        'compatibility_messages': :'compatibilityMessages',
        'estimated_cost': :'estimatedCost',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'time_assessed': :'timeAssessed',
        'migration_asset': :'migrationAsset'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'lifecycle_state': :'String',
        'lifecycle_details': :'String',
        'migration_plan_id': :'String',
        'compartment_id': :'String',
        'created_resource_id': :'String',
        'type': :'String',
        'is_excluded_from_execution': :'BOOLEAN',
        'compatibility_messages': :'Array<OCI::CloudMigrations::Models::CompatibilityMessage>',
        'estimated_cost': :'OCI::CloudMigrations::Models::CostEstimation',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'time_assessed': :'DateTime',
        'migration_asset': :'OCI::CloudMigrations::Models::MigrationAsset'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'type'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::CloudMigrations::Models::VmTargetAsset' if type == 'INSTANCE'

      # TODO: Log a warning when the subtype is not found.
      'OCI::CloudMigrations::Models::TargetAsset'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [String] :lifecycle_details The value to assign to the {#lifecycle_details} property
    # @option attributes [String] :migration_plan_id The value to assign to the {#migration_plan_id} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :created_resource_id The value to assign to the {#created_resource_id} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [BOOLEAN] :is_excluded_from_execution The value to assign to the {#is_excluded_from_execution} property
    # @option attributes [Array<OCI::CloudMigrations::Models::CompatibilityMessage>] :compatibility_messages The value to assign to the {#compatibility_messages} property
    # @option attributes [OCI::CloudMigrations::Models::CostEstimation] :estimated_cost The value to assign to the {#estimated_cost} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [DateTime] :time_assessed The value to assign to the {#time_assessed} property
    # @option attributes [OCI::CloudMigrations::Models::MigrationAsset] :migration_asset The value to assign to the {#migration_asset} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.lifecycle_details = attributes[:'lifecycleDetails'] if attributes[:'lifecycleDetails']

      raise 'You cannot provide both :lifecycleDetails and :lifecycle_details' if attributes.key?(:'lifecycleDetails') && attributes.key?(:'lifecycle_details')

      self.lifecycle_details = attributes[:'lifecycle_details'] if attributes[:'lifecycle_details']

      self.migration_plan_id = attributes[:'migrationPlanId'] if attributes[:'migrationPlanId']

      raise 'You cannot provide both :migrationPlanId and :migration_plan_id' if attributes.key?(:'migrationPlanId') && attributes.key?(:'migration_plan_id')

      self.migration_plan_id = attributes[:'migration_plan_id'] if attributes[:'migration_plan_id']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.created_resource_id = attributes[:'createdResourceId'] if attributes[:'createdResourceId']

      raise 'You cannot provide both :createdResourceId and :created_resource_id' if attributes.key?(:'createdResourceId') && attributes.key?(:'created_resource_id')

      self.created_resource_id = attributes[:'created_resource_id'] if attributes[:'created_resource_id']

      self.type = attributes[:'type'] if attributes[:'type']

      self.is_excluded_from_execution = attributes[:'isExcludedFromExecution'] unless attributes[:'isExcludedFromExecution'].nil?

      raise 'You cannot provide both :isExcludedFromExecution and :is_excluded_from_execution' if attributes.key?(:'isExcludedFromExecution') && attributes.key?(:'is_excluded_from_execution')

      self.is_excluded_from_execution = attributes[:'is_excluded_from_execution'] unless attributes[:'is_excluded_from_execution'].nil?

      self.compatibility_messages = attributes[:'compatibilityMessages'] if attributes[:'compatibilityMessages']

      raise 'You cannot provide both :compatibilityMessages and :compatibility_messages' if attributes.key?(:'compatibilityMessages') && attributes.key?(:'compatibility_messages')

      self.compatibility_messages = attributes[:'compatibility_messages'] if attributes[:'compatibility_messages']

      self.estimated_cost = attributes[:'estimatedCost'] if attributes[:'estimatedCost']

      raise 'You cannot provide both :estimatedCost and :estimated_cost' if attributes.key?(:'estimatedCost') && attributes.key?(:'estimated_cost')

      self.estimated_cost = attributes[:'estimated_cost'] if attributes[:'estimated_cost']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.time_assessed = attributes[:'timeAssessed'] if attributes[:'timeAssessed']

      raise 'You cannot provide both :timeAssessed and :time_assessed' if attributes.key?(:'timeAssessed') && attributes.key?(:'time_assessed')

      self.time_assessed = attributes[:'time_assessed'] if attributes[:'time_assessed']

      self.migration_asset = attributes[:'migrationAsset'] if attributes[:'migrationAsset']

      raise 'You cannot provide both :migrationAsset and :migration_asset' if attributes.key?(:'migrationAsset') && attributes.key?(:'migration_asset')

      self.migration_asset = attributes[:'migration_asset'] if attributes[:'migration_asset']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      # rubocop:disable Style/ConditionalAssignment
      if type && !TYPE_ENUM.include?(type)
        OCI.logger.debug("Unknown value for 'type' [" + type + "]. Mapping to 'TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @type = TYPE_UNKNOWN_ENUM_VALUE
      else
        @type = type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        lifecycle_state == other.lifecycle_state &&
        lifecycle_details == other.lifecycle_details &&
        migration_plan_id == other.migration_plan_id &&
        compartment_id == other.compartment_id &&
        created_resource_id == other.created_resource_id &&
        type == other.type &&
        is_excluded_from_execution == other.is_excluded_from_execution &&
        compatibility_messages == other.compatibility_messages &&
        estimated_cost == other.estimated_cost &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        time_assessed == other.time_assessed &&
        migration_asset == other.migration_asset
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, lifecycle_state, lifecycle_details, migration_plan_id, compartment_id, created_resource_id, type, is_excluded_from_execution, compatibility_messages, estimated_cost, time_created, time_updated, time_assessed, migration_asset].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
