# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220919
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Cost estimation description
  class CloudMigrations::Models::CostEstimation
    # This attribute is required.
    # @return [OCI::CloudMigrations::Models::ComputeCostEstimation]
    attr_accessor :compute

    # This attribute is required.
    # @return [OCI::CloudMigrations::Models::StorageCostEstimation]
    attr_accessor :storage

    # This attribute is required.
    # @return [OCI::CloudMigrations::Models::OsImageEstimation]
    attr_accessor :os_image

    # Currency code in the ISO format.
    # @return [String]
    attr_accessor :currency_code

    # **[Required]** Total estimation per month
    # @return [Float]
    attr_accessor :total_estimation_per_month

    # Total estimation per month by subscription.
    # @return [Float]
    attr_accessor :total_estimation_per_month_by_subscription

    # Subscription ID
    # @return [String]
    attr_accessor :subscription_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'compute': :'compute',
        'storage': :'storage',
        'os_image': :'osImage',
        'currency_code': :'currencyCode',
        'total_estimation_per_month': :'totalEstimationPerMonth',
        'total_estimation_per_month_by_subscription': :'totalEstimationPerMonthBySubscription',
        'subscription_id': :'subscriptionId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'compute': :'OCI::CloudMigrations::Models::ComputeCostEstimation',
        'storage': :'OCI::CloudMigrations::Models::StorageCostEstimation',
        'os_image': :'OCI::CloudMigrations::Models::OsImageEstimation',
        'currency_code': :'String',
        'total_estimation_per_month': :'Float',
        'total_estimation_per_month_by_subscription': :'Float',
        'subscription_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [OCI::CloudMigrations::Models::ComputeCostEstimation] :compute The value to assign to the {#compute} property
    # @option attributes [OCI::CloudMigrations::Models::StorageCostEstimation] :storage The value to assign to the {#storage} property
    # @option attributes [OCI::CloudMigrations::Models::OsImageEstimation] :os_image The value to assign to the {#os_image} property
    # @option attributes [String] :currency_code The value to assign to the {#currency_code} property
    # @option attributes [Float] :total_estimation_per_month The value to assign to the {#total_estimation_per_month} property
    # @option attributes [Float] :total_estimation_per_month_by_subscription The value to assign to the {#total_estimation_per_month_by_subscription} property
    # @option attributes [String] :subscription_id The value to assign to the {#subscription_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.compute = attributes[:'compute'] if attributes[:'compute']

      self.storage = attributes[:'storage'] if attributes[:'storage']

      self.os_image = attributes[:'osImage'] if attributes[:'osImage']

      raise 'You cannot provide both :osImage and :os_image' if attributes.key?(:'osImage') && attributes.key?(:'os_image')

      self.os_image = attributes[:'os_image'] if attributes[:'os_image']

      self.currency_code = attributes[:'currencyCode'] if attributes[:'currencyCode']

      raise 'You cannot provide both :currencyCode and :currency_code' if attributes.key?(:'currencyCode') && attributes.key?(:'currency_code')

      self.currency_code = attributes[:'currency_code'] if attributes[:'currency_code']

      self.total_estimation_per_month = attributes[:'totalEstimationPerMonth'] if attributes[:'totalEstimationPerMonth']

      raise 'You cannot provide both :totalEstimationPerMonth and :total_estimation_per_month' if attributes.key?(:'totalEstimationPerMonth') && attributes.key?(:'total_estimation_per_month')

      self.total_estimation_per_month = attributes[:'total_estimation_per_month'] if attributes[:'total_estimation_per_month']

      self.total_estimation_per_month_by_subscription = attributes[:'totalEstimationPerMonthBySubscription'] if attributes[:'totalEstimationPerMonthBySubscription']

      raise 'You cannot provide both :totalEstimationPerMonthBySubscription and :total_estimation_per_month_by_subscription' if attributes.key?(:'totalEstimationPerMonthBySubscription') && attributes.key?(:'total_estimation_per_month_by_subscription')

      self.total_estimation_per_month_by_subscription = attributes[:'total_estimation_per_month_by_subscription'] if attributes[:'total_estimation_per_month_by_subscription']

      self.subscription_id = attributes[:'subscriptionId'] if attributes[:'subscriptionId']

      raise 'You cannot provide both :subscriptionId and :subscription_id' if attributes.key?(:'subscriptionId') && attributes.key?(:'subscription_id')

      self.subscription_id = attributes[:'subscription_id'] if attributes[:'subscription_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        compute == other.compute &&
        storage == other.storage &&
        os_image == other.os_image &&
        currency_code == other.currency_code &&
        total_estimation_per_month == other.total_estimation_per_month &&
        total_estimation_per_month_by_subscription == other.total_estimation_per_month_by_subscription &&
        subscription_id == other.subscription_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [compute, storage, os_image, currency_code, total_estimation_per_month, total_estimation_per_month_by_subscription, subscription_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
