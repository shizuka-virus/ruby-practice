# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20221001
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Health entity object
  class AiLanguage::Models::HealthEntity
    # **[Required]** The number of Unicode code points preceding this entity in the submitted text.
    # @return [Integer]
    attr_accessor :offset

    # **[Required]** Length of entity text
    # @return [Integer]
    attr_accessor :length

    # **[Required]** Entity text like name of person, location, and so on.
    # @return [String]
    attr_accessor :text

    # **[Required]** Type of entity text like PER, LOC.
    # @return [String]
    attr_accessor :type

    # Sub-type of entity text like GPE for LOCATION type
    # @return [String]
    attr_accessor :sub_type

    # **[Required]** Score or confidence for detected entity.
    # @return [Float]
    attr_accessor :score

    # Entity category e.g, MEDICAL_CONDITION, MEDICATION, GENERAL, ANATOMY
    # @return [String]
    attr_accessor :category

    # **[Required]** Unique id of the entity
    # @return [String]
    attr_accessor :id

    # list of all assertions associated with this entity.
    # @return [Array<OCI::AiLanguage::Models::AssertionDetails>]
    attr_accessor :assertions

    # This contains the list of matched concepts which are ranked by the relevant score with the input text
    # @return [Array<OCI::AiLanguage::Models::MelConcept>]
    attr_accessor :matched_concepts

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'offset': :'offset',
        'length': :'length',
        'text': :'text',
        'type': :'type',
        'sub_type': :'subType',
        'score': :'score',
        'category': :'category',
        'id': :'id',
        'assertions': :'assertions',
        'matched_concepts': :'matchedConcepts'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'offset': :'Integer',
        'length': :'Integer',
        'text': :'String',
        'type': :'String',
        'sub_type': :'String',
        'score': :'Float',
        'category': :'String',
        'id': :'String',
        'assertions': :'Array<OCI::AiLanguage::Models::AssertionDetails>',
        'matched_concepts': :'Array<OCI::AiLanguage::Models::MelConcept>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :offset The value to assign to the {#offset} property
    # @option attributes [Integer] :length The value to assign to the {#length} property
    # @option attributes [String] :text The value to assign to the {#text} property
    # @option attributes [String] :type The value to assign to the {#type} property
    # @option attributes [String] :sub_type The value to assign to the {#sub_type} property
    # @option attributes [Float] :score The value to assign to the {#score} property
    # @option attributes [String] :category The value to assign to the {#category} property
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [Array<OCI::AiLanguage::Models::AssertionDetails>] :assertions The value to assign to the {#assertions} property
    # @option attributes [Array<OCI::AiLanguage::Models::MelConcept>] :matched_concepts The value to assign to the {#matched_concepts} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.offset = attributes[:'offset'] if attributes[:'offset']

      self.length = attributes[:'length'] if attributes[:'length']

      self.text = attributes[:'text'] if attributes[:'text']

      self.type = attributes[:'type'] if attributes[:'type']

      self.sub_type = attributes[:'subType'] if attributes[:'subType']

      raise 'You cannot provide both :subType and :sub_type' if attributes.key?(:'subType') && attributes.key?(:'sub_type')

      self.sub_type = attributes[:'sub_type'] if attributes[:'sub_type']

      self.score = attributes[:'score'] if attributes[:'score']

      self.category = attributes[:'category'] if attributes[:'category']

      self.id = attributes[:'id'] if attributes[:'id']

      self.assertions = attributes[:'assertions'] if attributes[:'assertions']

      self.matched_concepts = attributes[:'matchedConcepts'] if attributes[:'matchedConcepts']

      raise 'You cannot provide both :matchedConcepts and :matched_concepts' if attributes.key?(:'matchedConcepts') && attributes.key?(:'matched_concepts')

      self.matched_concepts = attributes[:'matched_concepts'] if attributes[:'matched_concepts']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        offset == other.offset &&
        length == other.length &&
        text == other.text &&
        type == other.type &&
        sub_type == other.sub_type &&
        score == other.score &&
        category == other.category &&
        id == other.id &&
        assertions == other.assertions &&
        matched_concepts == other.matched_concepts
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [offset, length, text, type, sub_type, score, category, id, assertions, matched_concepts].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
