# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20221001
require 'date'
require_relative 'pii_entity_masking'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Mask PII entities with the given masking character.
  class AiLanguage::Models::PiiEntityMask < AiLanguage::Models::PiiEntityMasking
    # Masking character. By default, the character is an asterisk (*)
    # @return [String]
    attr_accessor :masking_character

    # Number of characters to leave unmasked. By default, the whole entity is masked.
    # @return [Integer]
    attr_accessor :leave_characters_unmasked

    # Unmask from the end. By default, the whole entity is masked. This field works in concert with
    # leaveCharactersUnmasked. For example, leaveCharactersUnmasked is 3 and isUnmaskedFromEnd is true,
    # then if the entity is India the masked entity/result is **dia.
    #
    # @return [BOOLEAN]
    attr_accessor :is_unmasked_from_end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'mode': :'mode',
        'masking_character': :'maskingCharacter',
        'leave_characters_unmasked': :'leaveCharactersUnmasked',
        'is_unmasked_from_end': :'isUnmaskedFromEnd'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'mode': :'String',
        'masking_character': :'String',
        'leave_characters_unmasked': :'Integer',
        'is_unmasked_from_end': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :masking_character The value to assign to the {#masking_character} property
    # @option attributes [Integer] :leave_characters_unmasked The value to assign to the {#leave_characters_unmasked} property
    # @option attributes [BOOLEAN] :is_unmasked_from_end The value to assign to the {#is_unmasked_from_end} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['mode'] = 'MASK'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.masking_character = attributes[:'maskingCharacter'] if attributes[:'maskingCharacter']

      raise 'You cannot provide both :maskingCharacter and :masking_character' if attributes.key?(:'maskingCharacter') && attributes.key?(:'masking_character')

      self.masking_character = attributes[:'masking_character'] if attributes[:'masking_character']

      self.leave_characters_unmasked = attributes[:'leaveCharactersUnmasked'] if attributes[:'leaveCharactersUnmasked']

      raise 'You cannot provide both :leaveCharactersUnmasked and :leave_characters_unmasked' if attributes.key?(:'leaveCharactersUnmasked') && attributes.key?(:'leave_characters_unmasked')

      self.leave_characters_unmasked = attributes[:'leave_characters_unmasked'] if attributes[:'leave_characters_unmasked']

      self.is_unmasked_from_end = attributes[:'isUnmaskedFromEnd'] unless attributes[:'isUnmaskedFromEnd'].nil?
      self.is_unmasked_from_end = false if is_unmasked_from_end.nil? && !attributes.key?(:'isUnmaskedFromEnd') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isUnmaskedFromEnd and :is_unmasked_from_end' if attributes.key?(:'isUnmaskedFromEnd') && attributes.key?(:'is_unmasked_from_end')

      self.is_unmasked_from_end = attributes[:'is_unmasked_from_end'] unless attributes[:'is_unmasked_from_end'].nil?
      self.is_unmasked_from_end = false if is_unmasked_from_end.nil? && !attributes.key?(:'isUnmaskedFromEnd') && !attributes.key?(:'is_unmasked_from_end') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        mode == other.mode &&
        masking_character == other.masking_character &&
        leave_characters_unmasked == other.leave_characters_unmasked &&
        is_unmasked_from_end == other.is_unmasked_from_end
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [mode, masking_character, leave_characters_unmasked, is_unmasked_from_end].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
