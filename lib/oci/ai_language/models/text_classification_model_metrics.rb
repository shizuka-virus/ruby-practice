# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20221001
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Model level text classification metrics
  class AiLanguage::Models::TextClassificationModelMetrics
    # **[Required]** The fraction of the labels that were correctly recognised .
    # @return [Float]
    attr_accessor :accuracy

    # **[Required]** F1-score, is a measure of a model\u2019s accuracy on a dataset
    # @return [Float]
    attr_accessor :micro_f1

    # **[Required]** Precision refers to the number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives)
    # @return [Float]
    attr_accessor :micro_precision

    # **[Required]** Measures the model's ability to predict actual positive classes. It is the ratio between the predicted true positives and what was actually tagged. The recall metric reveals how many of the predicted classes are correct.
    # @return [Float]
    attr_accessor :micro_recall

    # **[Required]** F1-score, is a measure of a model\u2019s accuracy on a dataset
    # @return [Float]
    attr_accessor :macro_f1

    # **[Required]** Precision refers to the number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives)
    # @return [Float]
    attr_accessor :macro_precision

    # **[Required]** Measures the model's ability to predict actual positive classes. It is the ratio between the predicted true positives and what was actually tagged. The recall metric reveals how many of the predicted classes are correct.
    # @return [Float]
    attr_accessor :macro_recall

    # F1-score, is a measure of a model\u2019s accuracy on a dataset
    # @return [Float]
    attr_accessor :weighted_f1

    # Precision refers to the number of true positives divided by the total number of positive predictions (i.e., the number of true positives plus the number of false positives)
    # @return [Float]
    attr_accessor :weighted_precision

    # Measures the model's ability to predict actual positive classes. It is the ratio between the predicted true positives and what was actually tagged. The recall metric reveals how many of the predicted classes are correct.
    # @return [Float]
    attr_accessor :weighted_recall

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'accuracy': :'accuracy',
        'micro_f1': :'microF1',
        'micro_precision': :'microPrecision',
        'micro_recall': :'microRecall',
        'macro_f1': :'macroF1',
        'macro_precision': :'macroPrecision',
        'macro_recall': :'macroRecall',
        'weighted_f1': :'weightedF1',
        'weighted_precision': :'weightedPrecision',
        'weighted_recall': :'weightedRecall'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'accuracy': :'Float',
        'micro_f1': :'Float',
        'micro_precision': :'Float',
        'micro_recall': :'Float',
        'macro_f1': :'Float',
        'macro_precision': :'Float',
        'macro_recall': :'Float',
        'weighted_f1': :'Float',
        'weighted_precision': :'Float',
        'weighted_recall': :'Float'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Float] :accuracy The value to assign to the {#accuracy} property
    # @option attributes [Float] :micro_f1 The value to assign to the {#micro_f1} property
    # @option attributes [Float] :micro_precision The value to assign to the {#micro_precision} property
    # @option attributes [Float] :micro_recall The value to assign to the {#micro_recall} property
    # @option attributes [Float] :macro_f1 The value to assign to the {#macro_f1} property
    # @option attributes [Float] :macro_precision The value to assign to the {#macro_precision} property
    # @option attributes [Float] :macro_recall The value to assign to the {#macro_recall} property
    # @option attributes [Float] :weighted_f1 The value to assign to the {#weighted_f1} property
    # @option attributes [Float] :weighted_precision The value to assign to the {#weighted_precision} property
    # @option attributes [Float] :weighted_recall The value to assign to the {#weighted_recall} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.accuracy = attributes[:'accuracy'] if attributes[:'accuracy']

      self.micro_f1 = attributes[:'microF1'] if attributes[:'microF1']

      raise 'You cannot provide both :microF1 and :micro_f1' if attributes.key?(:'microF1') && attributes.key?(:'micro_f1')

      self.micro_f1 = attributes[:'micro_f1'] if attributes[:'micro_f1']

      self.micro_precision = attributes[:'microPrecision'] if attributes[:'microPrecision']

      raise 'You cannot provide both :microPrecision and :micro_precision' if attributes.key?(:'microPrecision') && attributes.key?(:'micro_precision')

      self.micro_precision = attributes[:'micro_precision'] if attributes[:'micro_precision']

      self.micro_recall = attributes[:'microRecall'] if attributes[:'microRecall']

      raise 'You cannot provide both :microRecall and :micro_recall' if attributes.key?(:'microRecall') && attributes.key?(:'micro_recall')

      self.micro_recall = attributes[:'micro_recall'] if attributes[:'micro_recall']

      self.macro_f1 = attributes[:'macroF1'] if attributes[:'macroF1']

      raise 'You cannot provide both :macroF1 and :macro_f1' if attributes.key?(:'macroF1') && attributes.key?(:'macro_f1')

      self.macro_f1 = attributes[:'macro_f1'] if attributes[:'macro_f1']

      self.macro_precision = attributes[:'macroPrecision'] if attributes[:'macroPrecision']

      raise 'You cannot provide both :macroPrecision and :macro_precision' if attributes.key?(:'macroPrecision') && attributes.key?(:'macro_precision')

      self.macro_precision = attributes[:'macro_precision'] if attributes[:'macro_precision']

      self.macro_recall = attributes[:'macroRecall'] if attributes[:'macroRecall']

      raise 'You cannot provide both :macroRecall and :macro_recall' if attributes.key?(:'macroRecall') && attributes.key?(:'macro_recall')

      self.macro_recall = attributes[:'macro_recall'] if attributes[:'macro_recall']

      self.weighted_f1 = attributes[:'weightedF1'] if attributes[:'weightedF1']

      raise 'You cannot provide both :weightedF1 and :weighted_f1' if attributes.key?(:'weightedF1') && attributes.key?(:'weighted_f1')

      self.weighted_f1 = attributes[:'weighted_f1'] if attributes[:'weighted_f1']

      self.weighted_precision = attributes[:'weightedPrecision'] if attributes[:'weightedPrecision']

      raise 'You cannot provide both :weightedPrecision and :weighted_precision' if attributes.key?(:'weightedPrecision') && attributes.key?(:'weighted_precision')

      self.weighted_precision = attributes[:'weighted_precision'] if attributes[:'weighted_precision']

      self.weighted_recall = attributes[:'weightedRecall'] if attributes[:'weightedRecall']

      raise 'You cannot provide both :weightedRecall and :weighted_recall' if attributes.key?(:'weightedRecall') && attributes.key?(:'weighted_recall')

      self.weighted_recall = attributes[:'weighted_recall'] if attributes[:'weighted_recall']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        accuracy == other.accuracy &&
        micro_f1 == other.micro_f1 &&
        micro_precision == other.micro_precision &&
        micro_recall == other.micro_recall &&
        macro_f1 == other.macro_f1 &&
        macro_precision == other.macro_precision &&
        macro_recall == other.macro_recall &&
        weighted_f1 == other.weighted_f1 &&
        weighted_precision == other.weighted_precision &&
        weighted_recall == other.weighted_recall
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [accuracy, micro_f1, micro_precision, micro_recall, macro_f1, macro_precision, macro_recall, weighted_f1, weighted_precision, weighted_recall].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
