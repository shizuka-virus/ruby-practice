# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20221001
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # The documents details for health entities detect call.
  class AiLanguage::Models::BatchDetectHealthEntityDetails
    # **[Required]** The endpoint which have to be used for inferencing.
    # @return [String]
    attr_accessor :endpoint_id

    # **[Required]** List of Documents for detect health entities.
    # @return [Array<OCI::AiLanguage::Models::TextDocument>]
    attr_accessor :documents

    # List of NLP health ontologies to be linked
    # @return [Array<String>]
    attr_accessor :link_ontologies

    # is assertion on input text required. default value true.
    # @return [BOOLEAN]
    attr_accessor :is_detect_assertions

    # is relationship on input text required. default value true.
    # @return [BOOLEAN]
    attr_accessor :is_detect_relationships

    # @return [OCI::AiLanguage::Models::Profile]
    attr_accessor :profile

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'endpoint_id': :'endpointId',
        'documents': :'documents',
        'link_ontologies': :'linkOntologies',
        'is_detect_assertions': :'isDetectAssertions',
        'is_detect_relationships': :'isDetectRelationships',
        'profile': :'profile'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'endpoint_id': :'String',
        'documents': :'Array<OCI::AiLanguage::Models::TextDocument>',
        'link_ontologies': :'Array<String>',
        'is_detect_assertions': :'BOOLEAN',
        'is_detect_relationships': :'BOOLEAN',
        'profile': :'OCI::AiLanguage::Models::Profile'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :endpoint_id The value to assign to the {#endpoint_id} property
    # @option attributes [Array<OCI::AiLanguage::Models::TextDocument>] :documents The value to assign to the {#documents} property
    # @option attributes [Array<String>] :link_ontologies The value to assign to the {#link_ontologies} property
    # @option attributes [BOOLEAN] :is_detect_assertions The value to assign to the {#is_detect_assertions} property
    # @option attributes [BOOLEAN] :is_detect_relationships The value to assign to the {#is_detect_relationships} property
    # @option attributes [OCI::AiLanguage::Models::Profile] :profile The value to assign to the {#profile} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.endpoint_id = attributes[:'endpointId'] if attributes[:'endpointId']

      raise 'You cannot provide both :endpointId and :endpoint_id' if attributes.key?(:'endpointId') && attributes.key?(:'endpoint_id')

      self.endpoint_id = attributes[:'endpoint_id'] if attributes[:'endpoint_id']

      self.documents = attributes[:'documents'] if attributes[:'documents']

      self.link_ontologies = attributes[:'linkOntologies'] if attributes[:'linkOntologies']

      raise 'You cannot provide both :linkOntologies and :link_ontologies' if attributes.key?(:'linkOntologies') && attributes.key?(:'link_ontologies')

      self.link_ontologies = attributes[:'link_ontologies'] if attributes[:'link_ontologies']

      self.is_detect_assertions = attributes[:'isDetectAssertions'] unless attributes[:'isDetectAssertions'].nil?
      self.is_detect_assertions = false if is_detect_assertions.nil? && !attributes.key?(:'isDetectAssertions') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isDetectAssertions and :is_detect_assertions' if attributes.key?(:'isDetectAssertions') && attributes.key?(:'is_detect_assertions')

      self.is_detect_assertions = attributes[:'is_detect_assertions'] unless attributes[:'is_detect_assertions'].nil?
      self.is_detect_assertions = false if is_detect_assertions.nil? && !attributes.key?(:'isDetectAssertions') && !attributes.key?(:'is_detect_assertions') # rubocop:disable Style/StringLiterals

      self.is_detect_relationships = attributes[:'isDetectRelationships'] unless attributes[:'isDetectRelationships'].nil?
      self.is_detect_relationships = false if is_detect_relationships.nil? && !attributes.key?(:'isDetectRelationships') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isDetectRelationships and :is_detect_relationships' if attributes.key?(:'isDetectRelationships') && attributes.key?(:'is_detect_relationships')

      self.is_detect_relationships = attributes[:'is_detect_relationships'] unless attributes[:'is_detect_relationships'].nil?
      self.is_detect_relationships = false if is_detect_relationships.nil? && !attributes.key?(:'isDetectRelationships') && !attributes.key?(:'is_detect_relationships') # rubocop:disable Style/StringLiterals

      self.profile = attributes[:'profile'] if attributes[:'profile']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        endpoint_id == other.endpoint_id &&
        documents == other.documents &&
        link_ontologies == other.link_ontologies &&
        is_detect_assertions == other.is_detect_assertions &&
        is_detect_relationships == other.is_detect_relationships &&
        profile == other.profile
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [endpoint_id, documents, link_ontologies, is_detect_assertions, is_detect_relationships, profile].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
