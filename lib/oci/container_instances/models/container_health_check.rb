# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210415
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Type of container health check which could be either HTTP, TCP, or Command.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class ContainerInstances::Models::ContainerHealthCheck
    HEALTH_CHECK_TYPE_ENUM = [
      HEALTH_CHECK_TYPE_HTTP = 'HTTP'.freeze,
      HEALTH_CHECK_TYPE_TCP = 'TCP'.freeze,
      HEALTH_CHECK_TYPE_COMMAND = 'COMMAND'.freeze,
      HEALTH_CHECK_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    STATUS_ENUM = [
      STATUS_HEALTHY = 'HEALTHY'.freeze,
      STATUS_UNHEALTHY = 'UNHEALTHY'.freeze,
      STATUS_UNKNOWN = 'UNKNOWN'.freeze,
      STATUS_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    FAILURE_ACTION_ENUM = [
      FAILURE_ACTION_KILL = 'KILL'.freeze,
      FAILURE_ACTION_NONE = 'NONE'.freeze,
      FAILURE_ACTION_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Health check name.
    # @return [String]
    attr_accessor :name

    # **[Required]** Container health check type.
    # @return [String]
    attr_reader :health_check_type

    # The initial delay in seconds before start checking container health status.
    # @return [Integer]
    attr_accessor :initial_delay_in_seconds

    # Number of seconds between two consecutive runs for checking container health.
    # @return [Integer]
    attr_accessor :interval_in_seconds

    # Number of consecutive failures at which we consider the check failed.
    # @return [Integer]
    attr_accessor :failure_threshold

    # Number of consecutive successes at which we consider the check succeeded again after it was in failure state.
    # @return [Integer]
    attr_accessor :success_threshold

    # Length of waiting time in seconds before marking health check failed.
    # @return [Integer]
    attr_accessor :timeout_in_seconds

    # Status of container
    # @return [String]
    attr_reader :status

    # A message describing the current status in more details.
    # @return [String]
    attr_accessor :status_details

    # The action will be triggered when the container health check fails. There are two types of action: KILL or NONE. The default
    # action is KILL. If failure action is KILL, the container will be subject to the container restart policy.
    #
    # @return [String]
    attr_reader :failure_action

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'name',
        'health_check_type': :'healthCheckType',
        'initial_delay_in_seconds': :'initialDelayInSeconds',
        'interval_in_seconds': :'intervalInSeconds',
        'failure_threshold': :'failureThreshold',
        'success_threshold': :'successThreshold',
        'timeout_in_seconds': :'timeoutInSeconds',
        'status': :'status',
        'status_details': :'statusDetails',
        'failure_action': :'failureAction'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'name': :'String',
        'health_check_type': :'String',
        'initial_delay_in_seconds': :'Integer',
        'interval_in_seconds': :'Integer',
        'failure_threshold': :'Integer',
        'success_threshold': :'Integer',
        'timeout_in_seconds': :'Integer',
        'status': :'String',
        'status_details': :'String',
        'failure_action': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'healthCheckType'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::ContainerInstances::Models::ContainerTcpHealthCheck' if type == 'TCP'
      return 'OCI::ContainerInstances::Models::ContainerHttpHealthCheck' if type == 'HTTP'
      return 'OCI::ContainerInstances::Models::ContainerCommandHealthCheck' if type == 'COMMAND'

      # TODO: Log a warning when the subtype is not found.
      'OCI::ContainerInstances::Models::ContainerHealthCheck'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :name The value to assign to the {#name} property
    # @option attributes [String] :health_check_type The value to assign to the {#health_check_type} property
    # @option attributes [Integer] :initial_delay_in_seconds The value to assign to the {#initial_delay_in_seconds} property
    # @option attributes [Integer] :interval_in_seconds The value to assign to the {#interval_in_seconds} property
    # @option attributes [Integer] :failure_threshold The value to assign to the {#failure_threshold} property
    # @option attributes [Integer] :success_threshold The value to assign to the {#success_threshold} property
    # @option attributes [Integer] :timeout_in_seconds The value to assign to the {#timeout_in_seconds} property
    # @option attributes [String] :status The value to assign to the {#status} property
    # @option attributes [String] :status_details The value to assign to the {#status_details} property
    # @option attributes [String] :failure_action The value to assign to the {#failure_action} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.name = attributes[:'name'] if attributes[:'name']

      self.health_check_type = attributes[:'healthCheckType'] if attributes[:'healthCheckType']

      raise 'You cannot provide both :healthCheckType and :health_check_type' if attributes.key?(:'healthCheckType') && attributes.key?(:'health_check_type')

      self.health_check_type = attributes[:'health_check_type'] if attributes[:'health_check_type']

      self.initial_delay_in_seconds = attributes[:'initialDelayInSeconds'] if attributes[:'initialDelayInSeconds']

      raise 'You cannot provide both :initialDelayInSeconds and :initial_delay_in_seconds' if attributes.key?(:'initialDelayInSeconds') && attributes.key?(:'initial_delay_in_seconds')

      self.initial_delay_in_seconds = attributes[:'initial_delay_in_seconds'] if attributes[:'initial_delay_in_seconds']

      self.interval_in_seconds = attributes[:'intervalInSeconds'] if attributes[:'intervalInSeconds']

      raise 'You cannot provide both :intervalInSeconds and :interval_in_seconds' if attributes.key?(:'intervalInSeconds') && attributes.key?(:'interval_in_seconds')

      self.interval_in_seconds = attributes[:'interval_in_seconds'] if attributes[:'interval_in_seconds']

      self.failure_threshold = attributes[:'failureThreshold'] if attributes[:'failureThreshold']

      raise 'You cannot provide both :failureThreshold and :failure_threshold' if attributes.key?(:'failureThreshold') && attributes.key?(:'failure_threshold')

      self.failure_threshold = attributes[:'failure_threshold'] if attributes[:'failure_threshold']

      self.success_threshold = attributes[:'successThreshold'] if attributes[:'successThreshold']

      raise 'You cannot provide both :successThreshold and :success_threshold' if attributes.key?(:'successThreshold') && attributes.key?(:'success_threshold')

      self.success_threshold = attributes[:'success_threshold'] if attributes[:'success_threshold']

      self.timeout_in_seconds = attributes[:'timeoutInSeconds'] if attributes[:'timeoutInSeconds']

      raise 'You cannot provide both :timeoutInSeconds and :timeout_in_seconds' if attributes.key?(:'timeoutInSeconds') && attributes.key?(:'timeout_in_seconds')

      self.timeout_in_seconds = attributes[:'timeout_in_seconds'] if attributes[:'timeout_in_seconds']

      self.status = attributes[:'status'] if attributes[:'status']
      self.status = "UNKNOWN" if status.nil? && !attributes.key?(:'status') # rubocop:disable Style/StringLiterals

      self.status_details = attributes[:'statusDetails'] if attributes[:'statusDetails']

      raise 'You cannot provide both :statusDetails and :status_details' if attributes.key?(:'statusDetails') && attributes.key?(:'status_details')

      self.status_details = attributes[:'status_details'] if attributes[:'status_details']

      self.failure_action = attributes[:'failureAction'] if attributes[:'failureAction']
      self.failure_action = "KILL" if failure_action.nil? && !attributes.key?(:'failureAction') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :failureAction and :failure_action' if attributes.key?(:'failureAction') && attributes.key?(:'failure_action')

      self.failure_action = attributes[:'failure_action'] if attributes[:'failure_action']
      self.failure_action = "KILL" if failure_action.nil? && !attributes.key?(:'failureAction') && !attributes.key?(:'failure_action') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] health_check_type Object to be assigned
    def health_check_type=(health_check_type)
      # rubocop:disable Style/ConditionalAssignment
      if health_check_type && !HEALTH_CHECK_TYPE_ENUM.include?(health_check_type)
        OCI.logger.debug("Unknown value for 'health_check_type' [" + health_check_type + "]. Mapping to 'HEALTH_CHECK_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @health_check_type = HEALTH_CHECK_TYPE_UNKNOWN_ENUM_VALUE
      else
        @health_check_type = health_check_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      # rubocop:disable Style/ConditionalAssignment
      if status && !STATUS_ENUM.include?(status)
        OCI.logger.debug("Unknown value for 'status' [" + status + "]. Mapping to 'STATUS_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @status = STATUS_UNKNOWN_ENUM_VALUE
      else
        @status = status
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] failure_action Object to be assigned
    def failure_action=(failure_action)
      # rubocop:disable Style/ConditionalAssignment
      if failure_action && !FAILURE_ACTION_ENUM.include?(failure_action)
        OCI.logger.debug("Unknown value for 'failure_action' [" + failure_action + "]. Mapping to 'FAILURE_ACTION_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @failure_action = FAILURE_ACTION_UNKNOWN_ENUM_VALUE
      else
        @failure_action = failure_action
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        health_check_type == other.health_check_type &&
        initial_delay_in_seconds == other.initial_delay_in_seconds &&
        interval_in_seconds == other.interval_in_seconds &&
        failure_threshold == other.failure_threshold &&
        success_threshold == other.success_threshold &&
        timeout_in_seconds == other.timeout_in_seconds &&
        status == other.status &&
        status_details == other.status_details &&
        failure_action == other.failure_action
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, health_check_type, initial_delay_in_seconds, interval_in_seconds, failure_threshold, success_threshold, timeout_in_seconds, status, status_details, failure_action].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
