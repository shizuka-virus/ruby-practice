# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210415
require 'date'
require_relative 'security_context'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Security context for Linux container.
  class ContainerInstances::Models::LinuxSecurityContext < ContainerInstances::Models::SecurityContext
    # The user ID (UID) to run the entrypoint process of the container. Defaults to user specified UID in container image metadata if not provided. This must be provided if runAsGroup is provided.
    #
    # @return [Integer]
    attr_accessor :run_as_user

    # The group ID (GID) to run the entrypoint process of the container. Uses runtime default if not provided.
    # @return [Integer]
    attr_accessor :run_as_group

    # Indicates if the container must run as a non-root user. If true, the service validates the container image at runtime to ensure that it is not going to run with UID 0 (root) and fails the container instance creation if the validation fails.
    #
    # @return [BOOLEAN]
    attr_accessor :is_non_root_user_check_enabled

    # Determines if the container will have a read-only root file system. Default value is false.
    # @return [BOOLEAN]
    attr_accessor :is_root_file_system_readonly

    # @return [OCI::ContainerInstances::Models::ContainerCapabilities]
    attr_accessor :capabilities

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'security_context_type': :'securityContextType',
        'run_as_user': :'runAsUser',
        'run_as_group': :'runAsGroup',
        'is_non_root_user_check_enabled': :'isNonRootUserCheckEnabled',
        'is_root_file_system_readonly': :'isRootFileSystemReadonly',
        'capabilities': :'capabilities'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'security_context_type': :'String',
        'run_as_user': :'Integer',
        'run_as_group': :'Integer',
        'is_non_root_user_check_enabled': :'BOOLEAN',
        'is_root_file_system_readonly': :'BOOLEAN',
        'capabilities': :'OCI::ContainerInstances::Models::ContainerCapabilities'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Integer] :run_as_user The value to assign to the {#run_as_user} property
    # @option attributes [Integer] :run_as_group The value to assign to the {#run_as_group} property
    # @option attributes [BOOLEAN] :is_non_root_user_check_enabled The value to assign to the {#is_non_root_user_check_enabled} property
    # @option attributes [BOOLEAN] :is_root_file_system_readonly The value to assign to the {#is_root_file_system_readonly} property
    # @option attributes [OCI::ContainerInstances::Models::ContainerCapabilities] :capabilities The value to assign to the {#capabilities} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['securityContextType'] = 'LINUX'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.run_as_user = attributes[:'runAsUser'] if attributes[:'runAsUser']

      raise 'You cannot provide both :runAsUser and :run_as_user' if attributes.key?(:'runAsUser') && attributes.key?(:'run_as_user')

      self.run_as_user = attributes[:'run_as_user'] if attributes[:'run_as_user']

      self.run_as_group = attributes[:'runAsGroup'] if attributes[:'runAsGroup']

      raise 'You cannot provide both :runAsGroup and :run_as_group' if attributes.key?(:'runAsGroup') && attributes.key?(:'run_as_group')

      self.run_as_group = attributes[:'run_as_group'] if attributes[:'run_as_group']

      self.is_non_root_user_check_enabled = attributes[:'isNonRootUserCheckEnabled'] unless attributes[:'isNonRootUserCheckEnabled'].nil?

      raise 'You cannot provide both :isNonRootUserCheckEnabled and :is_non_root_user_check_enabled' if attributes.key?(:'isNonRootUserCheckEnabled') && attributes.key?(:'is_non_root_user_check_enabled')

      self.is_non_root_user_check_enabled = attributes[:'is_non_root_user_check_enabled'] unless attributes[:'is_non_root_user_check_enabled'].nil?

      self.is_root_file_system_readonly = attributes[:'isRootFileSystemReadonly'] unless attributes[:'isRootFileSystemReadonly'].nil?

      raise 'You cannot provide both :isRootFileSystemReadonly and :is_root_file_system_readonly' if attributes.key?(:'isRootFileSystemReadonly') && attributes.key?(:'is_root_file_system_readonly')

      self.is_root_file_system_readonly = attributes[:'is_root_file_system_readonly'] unless attributes[:'is_root_file_system_readonly'].nil?

      self.capabilities = attributes[:'capabilities'] if attributes[:'capabilities']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        security_context_type == other.security_context_type &&
        run_as_user == other.run_as_user &&
        run_as_group == other.run_as_group &&
        is_non_root_user_check_enabled == other.is_non_root_user_check_enabled &&
        is_root_file_system_readonly == other.is_root_file_system_readonly &&
        capabilities == other.capabilities
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [security_context_type, run_as_user, run_as_group, is_non_root_user_check_enabled, is_root_file_system_readonly, capabilities].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
