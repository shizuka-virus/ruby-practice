# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20210415
require 'date'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Define the mapping from volume to a mount path in container.
  #
  class ContainerInstances::Models::VolumeMount
    # **[Required]** Describes the volume access path.
    # @return [String]
    attr_accessor :mount_path

    # **[Required]** The name of the volume.
    # @return [String]
    attr_accessor :volume_name

    # A sub-path inside the referenced volume.
    # @return [String]
    attr_accessor :sub_path

    # Whether the volume was mounted in read-only mode. By default, the volume is mounted with write access.
    # @return [BOOLEAN]
    attr_accessor :is_read_only

    # If there is more than one partition in the volume, reference this number of partitions.
    # Here is an example:
    # Number  Start   End     Size    File system  Name                  Flags
    # 1      1049kB  106MB   105MB   fat16        EFI System Partition  boot, esp
    # 2      106MB   1180MB  1074MB  xfs
    # 3      1180MB  50.0GB  48.8GB                                     lvm
    #
    # @return [Integer]
    attr_accessor :partition

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'mount_path': :'mountPath',
        'volume_name': :'volumeName',
        'sub_path': :'subPath',
        'is_read_only': :'isReadOnly',
        'partition': :'partition'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'mount_path': :'String',
        'volume_name': :'String',
        'sub_path': :'String',
        'is_read_only': :'BOOLEAN',
        'partition': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :mount_path The value to assign to the {#mount_path} property
    # @option attributes [String] :volume_name The value to assign to the {#volume_name} property
    # @option attributes [String] :sub_path The value to assign to the {#sub_path} property
    # @option attributes [BOOLEAN] :is_read_only The value to assign to the {#is_read_only} property
    # @option attributes [Integer] :partition The value to assign to the {#partition} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.mount_path = attributes[:'mountPath'] if attributes[:'mountPath']

      raise 'You cannot provide both :mountPath and :mount_path' if attributes.key?(:'mountPath') && attributes.key?(:'mount_path')

      self.mount_path = attributes[:'mount_path'] if attributes[:'mount_path']

      self.volume_name = attributes[:'volumeName'] if attributes[:'volumeName']

      raise 'You cannot provide both :volumeName and :volume_name' if attributes.key?(:'volumeName') && attributes.key?(:'volume_name')

      self.volume_name = attributes[:'volume_name'] if attributes[:'volume_name']

      self.sub_path = attributes[:'subPath'] if attributes[:'subPath']
      self.sub_path = "null" if sub_path.nil? && !attributes.key?(:'subPath') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :subPath and :sub_path' if attributes.key?(:'subPath') && attributes.key?(:'sub_path')

      self.sub_path = attributes[:'sub_path'] if attributes[:'sub_path']
      self.sub_path = "null" if sub_path.nil? && !attributes.key?(:'subPath') && !attributes.key?(:'sub_path') # rubocop:disable Style/StringLiterals

      self.is_read_only = attributes[:'isReadOnly'] unless attributes[:'isReadOnly'].nil?
      self.is_read_only = false if is_read_only.nil? && !attributes.key?(:'isReadOnly') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :isReadOnly and :is_read_only' if attributes.key?(:'isReadOnly') && attributes.key?(:'is_read_only')

      self.is_read_only = attributes[:'is_read_only'] unless attributes[:'is_read_only'].nil?
      self.is_read_only = false if is_read_only.nil? && !attributes.key?(:'isReadOnly') && !attributes.key?(:'is_read_only') # rubocop:disable Style/StringLiterals

      self.partition = attributes[:'partition'] if attributes[:'partition']
      self.partition = 1 if partition.nil? && !attributes.key?(:'partition') # rubocop:disable Style/StringLiterals
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        mount_path == other.mount_path &&
        volume_name == other.volume_name &&
        sub_path == other.sub_path &&
        is_read_only == other.is_read_only &&
        partition == other.partition
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [mount_path, volume_name, sub_path, is_read_only, partition].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
