# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220421
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A vulnerability is a weakness or error in an artifact.
  # A vulnerability is a generalization of a CVE (every CVE is a vulnerability, but not every vulnerability has a CVE).
  #
  class Adm::Models::Vulnerability
    SEVERITY_ENUM = [
      SEVERITY_NONE = 'NONE'.freeze,
      SEVERITY_LOW = 'LOW'.freeze,
      SEVERITY_MEDIUM = 'MEDIUM'.freeze,
      SEVERITY_HIGH = 'HIGH'.freeze,
      SEVERITY_CRITICAL = 'CRITICAL'.freeze,
      SEVERITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** Unique vulnerability identifier, e.g. CVE-1999-0067.
    # @return [String]
    attr_accessor :id

    # Source that published the vulnerability
    # @return [String]
    attr_accessor :source

    # Common Vulnerability Scoring System (CVSS) Version 2.
    # @return [Float]
    attr_accessor :cvss_v2_score

    # Common Vulnerability Scoring System (CVSS) Version 3.
    # @return [Float]
    attr_accessor :cvss_v3_score

    # ADM qualitative severity score. Can be either NONE, LOW, MEDIUM, HIGH or CRITICAL.
    # @return [String]
    attr_reader :severity

    # **[Required]** Indicates if the vulnerability was ignored according to the audit configuration.
    # @return [BOOLEAN]
    attr_accessor :is_ignored

    # Indicates if the vulnerability is a false positive according to the usage data. If no usage data was provided or the service cannot infer usage of the vulnerable code then this property is `null`.
    # @return [BOOLEAN]
    attr_accessor :is_false_positive

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'source': :'source',
        'cvss_v2_score': :'cvssV2Score',
        'cvss_v3_score': :'cvssV3Score',
        'severity': :'severity',
        'is_ignored': :'isIgnored',
        'is_false_positive': :'isFalsePositive'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'source': :'String',
        'cvss_v2_score': :'Float',
        'cvss_v3_score': :'Float',
        'severity': :'String',
        'is_ignored': :'BOOLEAN',
        'is_false_positive': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :source The value to assign to the {#source} property
    # @option attributes [Float] :cvss_v2_score The value to assign to the {#cvss_v2_score} property
    # @option attributes [Float] :cvss_v3_score The value to assign to the {#cvss_v3_score} property
    # @option attributes [String] :severity The value to assign to the {#severity} property
    # @option attributes [BOOLEAN] :is_ignored The value to assign to the {#is_ignored} property
    # @option attributes [BOOLEAN] :is_false_positive The value to assign to the {#is_false_positive} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.source = attributes[:'source'] if attributes[:'source']

      self.cvss_v2_score = attributes[:'cvssV2Score'] if attributes[:'cvssV2Score']

      raise 'You cannot provide both :cvssV2Score and :cvss_v2_score' if attributes.key?(:'cvssV2Score') && attributes.key?(:'cvss_v2_score')

      self.cvss_v2_score = attributes[:'cvss_v2_score'] if attributes[:'cvss_v2_score']

      self.cvss_v3_score = attributes[:'cvssV3Score'] if attributes[:'cvssV3Score']

      raise 'You cannot provide both :cvssV3Score and :cvss_v3_score' if attributes.key?(:'cvssV3Score') && attributes.key?(:'cvss_v3_score')

      self.cvss_v3_score = attributes[:'cvss_v3_score'] if attributes[:'cvss_v3_score']

      self.severity = attributes[:'severity'] if attributes[:'severity']

      self.is_ignored = attributes[:'isIgnored'] unless attributes[:'isIgnored'].nil?

      raise 'You cannot provide both :isIgnored and :is_ignored' if attributes.key?(:'isIgnored') && attributes.key?(:'is_ignored')

      self.is_ignored = attributes[:'is_ignored'] unless attributes[:'is_ignored'].nil?

      self.is_false_positive = attributes[:'isFalsePositive'] unless attributes[:'isFalsePositive'].nil?

      raise 'You cannot provide both :isFalsePositive and :is_false_positive' if attributes.key?(:'isFalsePositive') && attributes.key?(:'is_false_positive')

      self.is_false_positive = attributes[:'is_false_positive'] unless attributes[:'is_false_positive'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      # rubocop:disable Style/ConditionalAssignment
      if severity && !SEVERITY_ENUM.include?(severity)
        OCI.logger.debug("Unknown value for 'severity' [" + severity + "]. Mapping to 'SEVERITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @severity = SEVERITY_UNKNOWN_ENUM_VALUE
      else
        @severity = severity
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        source == other.source &&
        cvss_v2_score == other.cvss_v2_score &&
        cvss_v3_score == other.cvss_v3_score &&
        severity == other.severity &&
        is_ignored == other.is_ignored &&
        is_false_positive == other.is_false_positive
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, source, cvss_v2_score, cvss_v3_score, severity, is_ignored, is_false_positive].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
