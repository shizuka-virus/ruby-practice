# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220421
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A configuration for the Source Code Management tool/platform used by a remediation recipe.
  # This class has direct subclasses. If you are using this class as input to a service operations then you should favor using a subclass over the base class
  class Adm::Models::ScmConfiguration
    SCM_TYPE_ENUM = [
      SCM_TYPE_OCI_CODE_REPOSITORY = 'OCI_CODE_REPOSITORY'.freeze,
      SCM_TYPE_EXTERNAL_SCM = 'EXTERNAL_SCM'.freeze,
      SCM_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The type of Source Code Management.
    # @return [String]
    attr_reader :scm_type

    # **[Required]** The branch used by ADM to patch vulnerabilities.
    # @return [String]
    attr_accessor :branch

    # The location of the build file relative to the root of the repository. Only Maven build files (POM) are currently supported.
    # If this property is not specified, ADM will use the build file located at the root of the repository.
    #
    # @return [String]
    attr_accessor :build_file_location

    # **[Required]** If true, the Pull Request (PR) will be merged after the verify stage completes successfully
    # If false, the PR with the proposed changes must be reviewed and manually merged.
    #
    # @return [BOOLEAN]
    attr_accessor :is_automerge_enabled

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'scm_type': :'scmType',
        'branch': :'branch',
        'build_file_location': :'buildFileLocation',
        'is_automerge_enabled': :'isAutomergeEnabled'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'scm_type': :'String',
        'branch': :'String',
        'build_file_location': :'String',
        'is_automerge_enabled': :'BOOLEAN'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize


    # Given the hash representation of a subtype of this class,
    # use the info in the hash to return the class of the subtype.
    def self.get_subtype(object_hash)
      type = object_hash[:'scmType'] # rubocop:disable Style/SymbolLiteral

      return 'OCI::Adm::Models::OciCodeRepositoryConfiguration' if type == 'OCI_CODE_REPOSITORY'
      return 'OCI::Adm::Models::ExternalScmConfiguration' if type == 'EXTERNAL_SCM'

      # TODO: Log a warning when the subtype is not found.
      'OCI::Adm::Models::ScmConfiguration'
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Layout/EmptyLines, Metrics/PerceivedComplexity, Metrics/AbcSize

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :scm_type The value to assign to the {#scm_type} property
    # @option attributes [String] :branch The value to assign to the {#branch} property
    # @option attributes [String] :build_file_location The value to assign to the {#build_file_location} property
    # @option attributes [BOOLEAN] :is_automerge_enabled The value to assign to the {#is_automerge_enabled} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.scm_type = attributes[:'scmType'] if attributes[:'scmType']

      raise 'You cannot provide both :scmType and :scm_type' if attributes.key?(:'scmType') && attributes.key?(:'scm_type')

      self.scm_type = attributes[:'scm_type'] if attributes[:'scm_type']

      self.branch = attributes[:'branch'] if attributes[:'branch']

      self.build_file_location = attributes[:'buildFileLocation'] if attributes[:'buildFileLocation']

      raise 'You cannot provide both :buildFileLocation and :build_file_location' if attributes.key?(:'buildFileLocation') && attributes.key?(:'build_file_location')

      self.build_file_location = attributes[:'build_file_location'] if attributes[:'build_file_location']

      self.is_automerge_enabled = attributes[:'isAutomergeEnabled'] unless attributes[:'isAutomergeEnabled'].nil?

      raise 'You cannot provide both :isAutomergeEnabled and :is_automerge_enabled' if attributes.key?(:'isAutomergeEnabled') && attributes.key?(:'is_automerge_enabled')

      self.is_automerge_enabled = attributes[:'is_automerge_enabled'] unless attributes[:'is_automerge_enabled'].nil?
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scm_type Object to be assigned
    def scm_type=(scm_type)
      # rubocop:disable Style/ConditionalAssignment
      if scm_type && !SCM_TYPE_ENUM.include?(scm_type)
        OCI.logger.debug("Unknown value for 'scm_type' [" + scm_type + "]. Mapping to 'SCM_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @scm_type = SCM_TYPE_UNKNOWN_ENUM_VALUE
      else
        @scm_type = scm_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        scm_type == other.scm_type &&
        branch == other.branch &&
        build_file_location == other.build_file_location &&
        is_automerge_enabled == other.is_automerge_enabled
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [scm_type, branch, build_file_location, is_automerge_enabled].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
