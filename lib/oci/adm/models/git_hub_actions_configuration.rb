# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220421
require 'date'
require_relative 'verify_configuration'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Extends a Verify configuration with appropriate data to reach and use the build service provided by a GitHub Action.
  class Adm::Models::GitHubActionsConfiguration < Adm::Models::VerifyConfiguration
    # **[Required]** The location of the repository where the GitHub Actions is defined.
    # For Non-Enterprise GitHub the expected format is https://github.com/[owner]/[repoName]
    # For Enterprise GitHub the expected format is http(s)://[hostname]/api/v3/repos/[owner]/[repoName]
    #
    # @return [String]
    attr_accessor :repository_url

    # **[Required]** The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the Private Access Token (PAT) Secret.
    # The PAT provides the credentials to access the GitHub Action.
    #
    # @return [String]
    attr_accessor :pat_secret_id

    # **[Required]** The username that will trigger the GitHub Action.
    # @return [String]
    attr_accessor :username

    # **[Required]** The name of the GitHub Actions workflow that defines the build pipeline.
    # @return [String]
    attr_accessor :workflow_name

    # Additional key-value pairs passed as parameters to the build service when running an experiment.
    # @return [Hash<String, String>]
    attr_accessor :additional_parameters

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'build_service_type': :'buildServiceType',
        'repository_url': :'repositoryUrl',
        'pat_secret_id': :'patSecretId',
        'username': :'username',
        'workflow_name': :'workflowName',
        'additional_parameters': :'additionalParameters'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'build_service_type': :'String',
        'repository_url': :'String',
        'pat_secret_id': :'String',
        'username': :'String',
        'workflow_name': :'String',
        'additional_parameters': :'Hash<String, String>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :repository_url The value to assign to the {#repository_url} property
    # @option attributes [String] :pat_secret_id The value to assign to the {#pat_secret_id} property
    # @option attributes [String] :username The value to assign to the {#username} property
    # @option attributes [String] :workflow_name The value to assign to the {#workflow_name} property
    # @option attributes [Hash<String, String>] :additional_parameters The value to assign to the {#additional_parameters} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['buildServiceType'] = 'GITHUB_ACTIONS'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.repository_url = attributes[:'repositoryUrl'] if attributes[:'repositoryUrl']

      raise 'You cannot provide both :repositoryUrl and :repository_url' if attributes.key?(:'repositoryUrl') && attributes.key?(:'repository_url')

      self.repository_url = attributes[:'repository_url'] if attributes[:'repository_url']

      self.pat_secret_id = attributes[:'patSecretId'] if attributes[:'patSecretId']

      raise 'You cannot provide both :patSecretId and :pat_secret_id' if attributes.key?(:'patSecretId') && attributes.key?(:'pat_secret_id')

      self.pat_secret_id = attributes[:'pat_secret_id'] if attributes[:'pat_secret_id']

      self.username = attributes[:'username'] if attributes[:'username']

      self.workflow_name = attributes[:'workflowName'] if attributes[:'workflowName']

      raise 'You cannot provide both :workflowName and :workflow_name' if attributes.key?(:'workflowName') && attributes.key?(:'workflow_name')

      self.workflow_name = attributes[:'workflow_name'] if attributes[:'workflow_name']

      self.additional_parameters = attributes[:'additionalParameters'] if attributes[:'additionalParameters']

      raise 'You cannot provide both :additionalParameters and :additional_parameters' if attributes.key?(:'additionalParameters') && attributes.key?(:'additional_parameters')

      self.additional_parameters = attributes[:'additional_parameters'] if attributes[:'additional_parameters']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        build_service_type == other.build_service_type &&
        repository_url == other.repository_url &&
        pat_secret_id == other.pat_secret_id &&
        username == other.username &&
        workflow_name == other.workflow_name &&
        additional_parameters == other.additional_parameters
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [build_service_type, repository_url, pat_secret_id, username, workflow_name, additional_parameters].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
