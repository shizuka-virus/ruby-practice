# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220421
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # vulnerability audit summary.
  class Adm::Models::VulnerabilityAuditSummary
    MAX_OBSERVED_SEVERITY_ENUM = [
      MAX_OBSERVED_SEVERITY_NONE = 'NONE'.freeze,
      MAX_OBSERVED_SEVERITY_LOW = 'LOW'.freeze,
      MAX_OBSERVED_SEVERITY_MEDIUM = 'MEDIUM'.freeze,
      MAX_OBSERVED_SEVERITY_HIGH = 'HIGH'.freeze,
      MAX_OBSERVED_SEVERITY_CRITICAL = 'CRITICAL'.freeze,
      MAX_OBSERVED_SEVERITY_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    MAX_OBSERVED_SEVERITY_WITH_IGNORED_ENUM = [
      MAX_OBSERVED_SEVERITY_WITH_IGNORED_NONE = 'NONE'.freeze,
      MAX_OBSERVED_SEVERITY_WITH_IGNORED_LOW = 'LOW'.freeze,
      MAX_OBSERVED_SEVERITY_WITH_IGNORED_MEDIUM = 'MEDIUM'.freeze,
      MAX_OBSERVED_SEVERITY_WITH_IGNORED_HIGH = 'HIGH'.freeze,
      MAX_OBSERVED_SEVERITY_WITH_IGNORED_CRITICAL = 'CRITICAL'.freeze,
      MAX_OBSERVED_SEVERITY_WITH_IGNORED_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the vulnerability audit.
    # @return [String]
    attr_accessor :id

    # The name of the vulnerability audit.
    # @return [String]
    attr_accessor :display_name

    # **[Required]** The Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the knowledge base.
    # @return [String]
    attr_accessor :knowledge_base_id

    # **[Required]** The creation date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The update date and time of the vulnerability audit (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
    # @return [DateTime]
    attr_accessor :time_updated

    # **[Required]** The current lifecycle state of the vulnerability audit.
    # @return [String]
    attr_accessor :lifecycle_state

    # Maximum Common Vulnerability Scoring System Version 2 score observed for non-ignored vulnerable application dependencies.
    # @return [Float]
    attr_accessor :max_observed_cvss_v2_score

    # Maximum Common Vulnerability Scoring System Version 3 score observed for non-ignored vulnerable application dependencies.
    # @return [Float]
    attr_accessor :max_observed_cvss_v3_score

    # Maximum ADM Severity observed for non-ignored vulnerable application dependencies.
    # @return [String]
    attr_reader :max_observed_severity

    # **[Required]** Count of non-ignored vulnerable application dependencies.
    # @return [Integer]
    attr_accessor :vulnerable_artifacts_count

    # Maximum Common Vulnerability Scoring System Version 2 score observed for vulnerable application dependencies including ignored ones.
    # @return [Float]
    attr_accessor :max_observed_cvss_v2_score_with_ignored

    # Maximum Common Vulnerability Scoring System Version 3 score observed for vulnerable application dependencies including ignored ones.
    # @return [Float]
    attr_accessor :max_observed_cvss_v3_score_with_ignored

    # Maximum ADM Severity observed for vulnerable application dependencies including ignored ones.
    # @return [String]
    attr_reader :max_observed_severity_with_ignored

    # **[Required]** Count of all vulnerable application dependencies.
    # @return [Integer]
    attr_accessor :vulnerable_artifacts_count_with_ignored

    # Indicates if an audit succeeded according to the configuration. The value is `null` if the audit is in the `CREATING` state.
    # @return [BOOLEAN]
    attr_accessor :is_success

    # The type of the build tool is restricted to only two values MAVEN or UNSET. Use UNSET when the list of application dependencies is not Maven-related or is a mix of Maven and other ecosystems. This option is soon to be deprecated.
    # @return [String]
    attr_accessor :build_type

    # **[Required]** The compartment Oracle Cloud identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the vulnerability audit.
    # @return [String]
    attr_accessor :compartment_id

    # Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'knowledge_base_id': :'knowledgeBaseId',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'lifecycle_state': :'lifecycleState',
        'max_observed_cvss_v2_score': :'maxObservedCvssV2Score',
        'max_observed_cvss_v3_score': :'maxObservedCvssV3Score',
        'max_observed_severity': :'maxObservedSeverity',
        'vulnerable_artifacts_count': :'vulnerableArtifactsCount',
        'max_observed_cvss_v2_score_with_ignored': :'maxObservedCvssV2ScoreWithIgnored',
        'max_observed_cvss_v3_score_with_ignored': :'maxObservedCvssV3ScoreWithIgnored',
        'max_observed_severity_with_ignored': :'maxObservedSeverityWithIgnored',
        'vulnerable_artifacts_count_with_ignored': :'vulnerableArtifactsCountWithIgnored',
        'is_success': :'isSuccess',
        'build_type': :'buildType',
        'compartment_id': :'compartmentId',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'knowledge_base_id': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'lifecycle_state': :'String',
        'max_observed_cvss_v2_score': :'Float',
        'max_observed_cvss_v3_score': :'Float',
        'max_observed_severity': :'String',
        'vulnerable_artifacts_count': :'Integer',
        'max_observed_cvss_v2_score_with_ignored': :'Float',
        'max_observed_cvss_v3_score_with_ignored': :'Float',
        'max_observed_severity_with_ignored': :'String',
        'vulnerable_artifacts_count_with_ignored': :'Integer',
        'is_success': :'BOOLEAN',
        'build_type': :'String',
        'compartment_id': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [String] :knowledge_base_id The value to assign to the {#knowledge_base_id} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Float] :max_observed_cvss_v2_score The value to assign to the {#max_observed_cvss_v2_score} property
    # @option attributes [Float] :max_observed_cvss_v3_score The value to assign to the {#max_observed_cvss_v3_score} property
    # @option attributes [String] :max_observed_severity The value to assign to the {#max_observed_severity} property
    # @option attributes [Integer] :vulnerable_artifacts_count The value to assign to the {#vulnerable_artifacts_count} property
    # @option attributes [Float] :max_observed_cvss_v2_score_with_ignored The value to assign to the {#max_observed_cvss_v2_score_with_ignored} property
    # @option attributes [Float] :max_observed_cvss_v3_score_with_ignored The value to assign to the {#max_observed_cvss_v3_score_with_ignored} property
    # @option attributes [String] :max_observed_severity_with_ignored The value to assign to the {#max_observed_severity_with_ignored} property
    # @option attributes [Integer] :vulnerable_artifacts_count_with_ignored The value to assign to the {#vulnerable_artifacts_count_with_ignored} property
    # @option attributes [BOOLEAN] :is_success The value to assign to the {#is_success} property
    # @option attributes [String] :build_type The value to assign to the {#build_type} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.knowledge_base_id = attributes[:'knowledgeBaseId'] if attributes[:'knowledgeBaseId']

      raise 'You cannot provide both :knowledgeBaseId and :knowledge_base_id' if attributes.key?(:'knowledgeBaseId') && attributes.key?(:'knowledge_base_id')

      self.knowledge_base_id = attributes[:'knowledge_base_id'] if attributes[:'knowledge_base_id']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.max_observed_cvss_v2_score = attributes[:'maxObservedCvssV2Score'] if attributes[:'maxObservedCvssV2Score']

      raise 'You cannot provide both :maxObservedCvssV2Score and :max_observed_cvss_v2_score' if attributes.key?(:'maxObservedCvssV2Score') && attributes.key?(:'max_observed_cvss_v2_score')

      self.max_observed_cvss_v2_score = attributes[:'max_observed_cvss_v2_score'] if attributes[:'max_observed_cvss_v2_score']

      self.max_observed_cvss_v3_score = attributes[:'maxObservedCvssV3Score'] if attributes[:'maxObservedCvssV3Score']

      raise 'You cannot provide both :maxObservedCvssV3Score and :max_observed_cvss_v3_score' if attributes.key?(:'maxObservedCvssV3Score') && attributes.key?(:'max_observed_cvss_v3_score')

      self.max_observed_cvss_v3_score = attributes[:'max_observed_cvss_v3_score'] if attributes[:'max_observed_cvss_v3_score']

      self.max_observed_severity = attributes[:'maxObservedSeverity'] if attributes[:'maxObservedSeverity']

      raise 'You cannot provide both :maxObservedSeverity and :max_observed_severity' if attributes.key?(:'maxObservedSeverity') && attributes.key?(:'max_observed_severity')

      self.max_observed_severity = attributes[:'max_observed_severity'] if attributes[:'max_observed_severity']

      self.vulnerable_artifacts_count = attributes[:'vulnerableArtifactsCount'] if attributes[:'vulnerableArtifactsCount']

      raise 'You cannot provide both :vulnerableArtifactsCount and :vulnerable_artifacts_count' if attributes.key?(:'vulnerableArtifactsCount') && attributes.key?(:'vulnerable_artifacts_count')

      self.vulnerable_artifacts_count = attributes[:'vulnerable_artifacts_count'] if attributes[:'vulnerable_artifacts_count']

      self.max_observed_cvss_v2_score_with_ignored = attributes[:'maxObservedCvssV2ScoreWithIgnored'] if attributes[:'maxObservedCvssV2ScoreWithIgnored']

      raise 'You cannot provide both :maxObservedCvssV2ScoreWithIgnored and :max_observed_cvss_v2_score_with_ignored' if attributes.key?(:'maxObservedCvssV2ScoreWithIgnored') && attributes.key?(:'max_observed_cvss_v2_score_with_ignored')

      self.max_observed_cvss_v2_score_with_ignored = attributes[:'max_observed_cvss_v2_score_with_ignored'] if attributes[:'max_observed_cvss_v2_score_with_ignored']

      self.max_observed_cvss_v3_score_with_ignored = attributes[:'maxObservedCvssV3ScoreWithIgnored'] if attributes[:'maxObservedCvssV3ScoreWithIgnored']

      raise 'You cannot provide both :maxObservedCvssV3ScoreWithIgnored and :max_observed_cvss_v3_score_with_ignored' if attributes.key?(:'maxObservedCvssV3ScoreWithIgnored') && attributes.key?(:'max_observed_cvss_v3_score_with_ignored')

      self.max_observed_cvss_v3_score_with_ignored = attributes[:'max_observed_cvss_v3_score_with_ignored'] if attributes[:'max_observed_cvss_v3_score_with_ignored']

      self.max_observed_severity_with_ignored = attributes[:'maxObservedSeverityWithIgnored'] if attributes[:'maxObservedSeverityWithIgnored']

      raise 'You cannot provide both :maxObservedSeverityWithIgnored and :max_observed_severity_with_ignored' if attributes.key?(:'maxObservedSeverityWithIgnored') && attributes.key?(:'max_observed_severity_with_ignored')

      self.max_observed_severity_with_ignored = attributes[:'max_observed_severity_with_ignored'] if attributes[:'max_observed_severity_with_ignored']

      self.vulnerable_artifacts_count_with_ignored = attributes[:'vulnerableArtifactsCountWithIgnored'] if attributes[:'vulnerableArtifactsCountWithIgnored']

      raise 'You cannot provide both :vulnerableArtifactsCountWithIgnored and :vulnerable_artifacts_count_with_ignored' if attributes.key?(:'vulnerableArtifactsCountWithIgnored') && attributes.key?(:'vulnerable_artifacts_count_with_ignored')

      self.vulnerable_artifacts_count_with_ignored = attributes[:'vulnerable_artifacts_count_with_ignored'] if attributes[:'vulnerable_artifacts_count_with_ignored']

      self.is_success = attributes[:'isSuccess'] unless attributes[:'isSuccess'].nil?

      raise 'You cannot provide both :isSuccess and :is_success' if attributes.key?(:'isSuccess') && attributes.key?(:'is_success')

      self.is_success = attributes[:'is_success'] unless attributes[:'is_success'].nil?

      self.build_type = attributes[:'buildType'] if attributes[:'buildType']

      raise 'You cannot provide both :buildType and :build_type' if attributes.key?(:'buildType') && attributes.key?(:'build_type')

      self.build_type = attributes[:'build_type'] if attributes[:'build_type']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] max_observed_severity Object to be assigned
    def max_observed_severity=(max_observed_severity)
      # rubocop:disable Style/ConditionalAssignment
      if max_observed_severity && !MAX_OBSERVED_SEVERITY_ENUM.include?(max_observed_severity)
        OCI.logger.debug("Unknown value for 'max_observed_severity' [" + max_observed_severity + "]. Mapping to 'MAX_OBSERVED_SEVERITY_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @max_observed_severity = MAX_OBSERVED_SEVERITY_UNKNOWN_ENUM_VALUE
      else
        @max_observed_severity = max_observed_severity
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] max_observed_severity_with_ignored Object to be assigned
    def max_observed_severity_with_ignored=(max_observed_severity_with_ignored)
      # rubocop:disable Style/ConditionalAssignment
      if max_observed_severity_with_ignored && !MAX_OBSERVED_SEVERITY_WITH_IGNORED_ENUM.include?(max_observed_severity_with_ignored)
        OCI.logger.debug("Unknown value for 'max_observed_severity_with_ignored' [" + max_observed_severity_with_ignored + "]. Mapping to 'MAX_OBSERVED_SEVERITY_WITH_IGNORED_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @max_observed_severity_with_ignored = MAX_OBSERVED_SEVERITY_WITH_IGNORED_UNKNOWN_ENUM_VALUE
      else
        @max_observed_severity_with_ignored = max_observed_severity_with_ignored
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        knowledge_base_id == other.knowledge_base_id &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        lifecycle_state == other.lifecycle_state &&
        max_observed_cvss_v2_score == other.max_observed_cvss_v2_score &&
        max_observed_cvss_v3_score == other.max_observed_cvss_v3_score &&
        max_observed_severity == other.max_observed_severity &&
        vulnerable_artifacts_count == other.vulnerable_artifacts_count &&
        max_observed_cvss_v2_score_with_ignored == other.max_observed_cvss_v2_score_with_ignored &&
        max_observed_cvss_v3_score_with_ignored == other.max_observed_cvss_v3_score_with_ignored &&
        max_observed_severity_with_ignored == other.max_observed_severity_with_ignored &&
        vulnerable_artifacts_count_with_ignored == other.vulnerable_artifacts_count_with_ignored &&
        is_success == other.is_success &&
        build_type == other.build_type &&
        compartment_id == other.compartment_id &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, knowledge_base_id, time_created, time_updated, lifecycle_state, max_observed_cvss_v2_score, max_observed_cvss_v3_score, max_observed_severity, vulnerable_artifacts_count, max_observed_cvss_v2_score_with_ignored, max_observed_cvss_v3_score_with_ignored, max_observed_severity_with_ignored, vulnerable_artifacts_count_with_ignored, is_success, build_type, compartment_id, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
