# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220421
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # A remediation run represents an execution of a Remediation Recipe to detect and fix vulnerabilities based on current state of the
  # Vulnerabilities curated in the Knowledge Base.
  # A Run can be triggered manually or when a new CVE is discovered.
  #
  class Adm::Models::RemediationRun
    REMEDIATION_RUN_SOURCE_ENUM = [
      REMEDIATION_RUN_SOURCE_MANUAL = 'MANUAL'.freeze,
      REMEDIATION_RUN_SOURCE_KNOWLEDGE_BASE = 'KNOWLEDGE_BASE'.freeze,
      REMEDIATION_RUN_SOURCE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    CURRENT_STAGE_TYPE_ENUM = [
      CURRENT_STAGE_TYPE_DETECT = 'DETECT'.freeze,
      CURRENT_STAGE_TYPE_RECOMMEND = 'RECOMMEND'.freeze,
      CURRENT_STAGE_TYPE_VERIFY = 'VERIFY'.freeze,
      CURRENT_STAGE_TYPE_APPLY = 'APPLY'.freeze,
      CURRENT_STAGE_TYPE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LIFECYCLE_STATE_ENUM = [
      LIFECYCLE_STATE_ACCEPTED = 'ACCEPTED'.freeze,
      LIFECYCLE_STATE_CANCELED = 'CANCELED'.freeze,
      LIFECYCLE_STATE_CANCELING = 'CANCELING'.freeze,
      LIFECYCLE_STATE_FAILED = 'FAILED'.freeze,
      LIFECYCLE_STATE_IN_PROGRESS = 'IN_PROGRESS'.freeze,
      LIFECYCLE_STATE_SUCCEEDED = 'SUCCEEDED'.freeze,
      LIFECYCLE_STATE_DELETING = 'DELETING'.freeze,
      LIFECYCLE_STATE_DELETED = 'DELETED'.freeze,
      LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # **[Required]** The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the remediation run.
    # @return [String]
    attr_accessor :id

    # The name of the remediation run.
    # @return [String]
    attr_accessor :display_name

    # The list of remediation run stage summaries.
    # @return [Array<OCI::Adm::Models::StageSummary>]
    attr_accessor :stages

    # **[Required]** The Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the Remediation Recipe.
    # @return [String]
    attr_accessor :remediation_recipe_id

    # **[Required]** The source that triggered the Remediation Recipe.
    # @return [String]
    attr_reader :remediation_run_source

    # **[Required]** The creation date and time of the remediation run (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
    # @return [DateTime]
    attr_accessor :time_created

    # **[Required]** The date and time the remediation run was last updated (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
    # @return [DateTime]
    attr_accessor :time_updated

    # The date and time of the start of the remediation run (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
    # @return [DateTime]
    attr_accessor :time_started

    # The date and time of the finish of the remediation run (formatted according to [RFC3339](https://datatracker.ietf.org/doc/html/rfc3339)).
    # @return [DateTime]
    attr_accessor :time_finished

    # The type of the current stage of the remediation run.
    # @return [String]
    attr_reader :current_stage_type

    # **[Required]** The compartment Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)) of the remediation run.
    # @return [String]
    attr_accessor :compartment_id

    # **[Required]** The current lifecycle state of the remediation run.
    # @return [String]
    attr_reader :lifecycle_state

    # **[Required]** Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only.
    # Example: `{\"bar-key\": \"value\"}`
    #
    # @return [Hash<String, String>]
    attr_accessor :freeform_tags

    # **[Required]** Defined tags for this resource. Each key is predefined and scoped to a namespace.
    # Example: `{\"foo-namespace\": {\"bar-key\": \"value\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :defined_tags

    # Usage of system tag keys. These predefined keys are scoped to namespaces.
    # Example: `{\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}`
    #
    # @return [Hash<String, Hash<String, Object>>]
    attr_accessor :system_tags

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'id',
        'display_name': :'displayName',
        'stages': :'stages',
        'remediation_recipe_id': :'remediationRecipeId',
        'remediation_run_source': :'remediationRunSource',
        'time_created': :'timeCreated',
        'time_updated': :'timeUpdated',
        'time_started': :'timeStarted',
        'time_finished': :'timeFinished',
        'current_stage_type': :'currentStageType',
        'compartment_id': :'compartmentId',
        'lifecycle_state': :'lifecycleState',
        'freeform_tags': :'freeformTags',
        'defined_tags': :'definedTags',
        'system_tags': :'systemTags'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'id': :'String',
        'display_name': :'String',
        'stages': :'Array<OCI::Adm::Models::StageSummary>',
        'remediation_recipe_id': :'String',
        'remediation_run_source': :'String',
        'time_created': :'DateTime',
        'time_updated': :'DateTime',
        'time_started': :'DateTime',
        'time_finished': :'DateTime',
        'current_stage_type': :'String',
        'compartment_id': :'String',
        'lifecycle_state': :'String',
        'freeform_tags': :'Hash<String, String>',
        'defined_tags': :'Hash<String, Hash<String, Object>>',
        'system_tags': :'Hash<String, Hash<String, Object>>'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :id The value to assign to the {#id} property
    # @option attributes [String] :display_name The value to assign to the {#display_name} property
    # @option attributes [Array<OCI::Adm::Models::StageSummary>] :stages The value to assign to the {#stages} property
    # @option attributes [String] :remediation_recipe_id The value to assign to the {#remediation_recipe_id} property
    # @option attributes [String] :remediation_run_source The value to assign to the {#remediation_run_source} property
    # @option attributes [DateTime] :time_created The value to assign to the {#time_created} property
    # @option attributes [DateTime] :time_updated The value to assign to the {#time_updated} property
    # @option attributes [DateTime] :time_started The value to assign to the {#time_started} property
    # @option attributes [DateTime] :time_finished The value to assign to the {#time_finished} property
    # @option attributes [String] :current_stage_type The value to assign to the {#current_stage_type} property
    # @option attributes [String] :compartment_id The value to assign to the {#compartment_id} property
    # @option attributes [String] :lifecycle_state The value to assign to the {#lifecycle_state} property
    # @option attributes [Hash<String, String>] :freeform_tags The value to assign to the {#freeform_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :defined_tags The value to assign to the {#defined_tags} property
    # @option attributes [Hash<String, Hash<String, Object>>] :system_tags The value to assign to the {#system_tags} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.id = attributes[:'id'] if attributes[:'id']

      self.display_name = attributes[:'displayName'] if attributes[:'displayName']

      raise 'You cannot provide both :displayName and :display_name' if attributes.key?(:'displayName') && attributes.key?(:'display_name')

      self.display_name = attributes[:'display_name'] if attributes[:'display_name']

      self.stages = attributes[:'stages'] if attributes[:'stages']

      self.remediation_recipe_id = attributes[:'remediationRecipeId'] if attributes[:'remediationRecipeId']

      raise 'You cannot provide both :remediationRecipeId and :remediation_recipe_id' if attributes.key?(:'remediationRecipeId') && attributes.key?(:'remediation_recipe_id')

      self.remediation_recipe_id = attributes[:'remediation_recipe_id'] if attributes[:'remediation_recipe_id']

      self.remediation_run_source = attributes[:'remediationRunSource'] if attributes[:'remediationRunSource']

      raise 'You cannot provide both :remediationRunSource and :remediation_run_source' if attributes.key?(:'remediationRunSource') && attributes.key?(:'remediation_run_source')

      self.remediation_run_source = attributes[:'remediation_run_source'] if attributes[:'remediation_run_source']

      self.time_created = attributes[:'timeCreated'] if attributes[:'timeCreated']

      raise 'You cannot provide both :timeCreated and :time_created' if attributes.key?(:'timeCreated') && attributes.key?(:'time_created')

      self.time_created = attributes[:'time_created'] if attributes[:'time_created']

      self.time_updated = attributes[:'timeUpdated'] if attributes[:'timeUpdated']

      raise 'You cannot provide both :timeUpdated and :time_updated' if attributes.key?(:'timeUpdated') && attributes.key?(:'time_updated')

      self.time_updated = attributes[:'time_updated'] if attributes[:'time_updated']

      self.time_started = attributes[:'timeStarted'] if attributes[:'timeStarted']

      raise 'You cannot provide both :timeStarted and :time_started' if attributes.key?(:'timeStarted') && attributes.key?(:'time_started')

      self.time_started = attributes[:'time_started'] if attributes[:'time_started']

      self.time_finished = attributes[:'timeFinished'] if attributes[:'timeFinished']

      raise 'You cannot provide both :timeFinished and :time_finished' if attributes.key?(:'timeFinished') && attributes.key?(:'time_finished')

      self.time_finished = attributes[:'time_finished'] if attributes[:'time_finished']

      self.current_stage_type = attributes[:'currentStageType'] if attributes[:'currentStageType']

      raise 'You cannot provide both :currentStageType and :current_stage_type' if attributes.key?(:'currentStageType') && attributes.key?(:'current_stage_type')

      self.current_stage_type = attributes[:'current_stage_type'] if attributes[:'current_stage_type']

      self.compartment_id = attributes[:'compartmentId'] if attributes[:'compartmentId']

      raise 'You cannot provide both :compartmentId and :compartment_id' if attributes.key?(:'compartmentId') && attributes.key?(:'compartment_id')

      self.compartment_id = attributes[:'compartment_id'] if attributes[:'compartment_id']

      self.lifecycle_state = attributes[:'lifecycleState'] if attributes[:'lifecycleState']

      raise 'You cannot provide both :lifecycleState and :lifecycle_state' if attributes.key?(:'lifecycleState') && attributes.key?(:'lifecycle_state')

      self.lifecycle_state = attributes[:'lifecycle_state'] if attributes[:'lifecycle_state']

      self.freeform_tags = attributes[:'freeformTags'] if attributes[:'freeformTags']

      raise 'You cannot provide both :freeformTags and :freeform_tags' if attributes.key?(:'freeformTags') && attributes.key?(:'freeform_tags')

      self.freeform_tags = attributes[:'freeform_tags'] if attributes[:'freeform_tags']

      self.defined_tags = attributes[:'definedTags'] if attributes[:'definedTags']

      raise 'You cannot provide both :definedTags and :defined_tags' if attributes.key?(:'definedTags') && attributes.key?(:'defined_tags')

      self.defined_tags = attributes[:'defined_tags'] if attributes[:'defined_tags']

      self.system_tags = attributes[:'systemTags'] if attributes[:'systemTags']

      raise 'You cannot provide both :systemTags and :system_tags' if attributes.key?(:'systemTags') && attributes.key?(:'system_tags')

      self.system_tags = attributes[:'system_tags'] if attributes[:'system_tags']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] remediation_run_source Object to be assigned
    def remediation_run_source=(remediation_run_source)
      # rubocop:disable Style/ConditionalAssignment
      if remediation_run_source && !REMEDIATION_RUN_SOURCE_ENUM.include?(remediation_run_source)
        OCI.logger.debug("Unknown value for 'remediation_run_source' [" + remediation_run_source + "]. Mapping to 'REMEDIATION_RUN_SOURCE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @remediation_run_source = REMEDIATION_RUN_SOURCE_UNKNOWN_ENUM_VALUE
      else
        @remediation_run_source = remediation_run_source
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] current_stage_type Object to be assigned
    def current_stage_type=(current_stage_type)
      # rubocop:disable Style/ConditionalAssignment
      if current_stage_type && !CURRENT_STAGE_TYPE_ENUM.include?(current_stage_type)
        OCI.logger.debug("Unknown value for 'current_stage_type' [" + current_stage_type + "]. Mapping to 'CURRENT_STAGE_TYPE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @current_stage_type = CURRENT_STAGE_TYPE_UNKNOWN_ENUM_VALUE
      else
        @current_stage_type = current_stage_type
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_state Object to be assigned
    def lifecycle_state=(lifecycle_state)
      # rubocop:disable Style/ConditionalAssignment
      if lifecycle_state && !LIFECYCLE_STATE_ENUM.include?(lifecycle_state)
        OCI.logger.debug("Unknown value for 'lifecycle_state' [" + lifecycle_state + "]. Mapping to 'LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @lifecycle_state = LIFECYCLE_STATE_UNKNOWN_ENUM_VALUE
      else
        @lifecycle_state = lifecycle_state
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        display_name == other.display_name &&
        stages == other.stages &&
        remediation_recipe_id == other.remediation_recipe_id &&
        remediation_run_source == other.remediation_run_source &&
        time_created == other.time_created &&
        time_updated == other.time_updated &&
        time_started == other.time_started &&
        time_finished == other.time_finished &&
        current_stage_type == other.current_stage_type &&
        compartment_id == other.compartment_id &&
        lifecycle_state == other.lifecycle_state &&
        freeform_tags == other.freeform_tags &&
        defined_tags == other.defined_tags &&
        system_tags == other.system_tags
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, display_name, stages, remediation_recipe_id, remediation_run_source, time_created, time_updated, time_started, time_finished, current_stage_type, compartment_id, lifecycle_state, freeform_tags, defined_tags, system_tags].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
