# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20220101
require 'date'
require 'logger'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Model details.
  class AiSpeech::Models::TranscriptionModelDetails
    DOMAIN_ENUM = [
      DOMAIN_GENERIC = 'GENERIC'.freeze,
      DOMAIN_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    LANGUAGE_CODE_ENUM = [
      LANGUAGE_CODE_EN_US = 'en-US'.freeze,
      LANGUAGE_CODE_ES_ES = 'es-ES'.freeze,
      LANGUAGE_CODE_PT_BR = 'pt-BR'.freeze,
      LANGUAGE_CODE_EN_GB = 'en-GB'.freeze,
      LANGUAGE_CODE_EN_AU = 'en-AU'.freeze,
      LANGUAGE_CODE_EN_IN = 'en-IN'.freeze,
      LANGUAGE_CODE_HI_IN = 'hi-IN'.freeze,
      LANGUAGE_CODE_FR_FR = 'fr-FR'.freeze,
      LANGUAGE_CODE_DE_DE = 'de-DE'.freeze,
      LANGUAGE_CODE_IT_IT = 'it-IT'.freeze,
      LANGUAGE_CODE_AF = 'af'.freeze,
      LANGUAGE_CODE_AR = 'ar'.freeze,
      LANGUAGE_CODE_AZ = 'az'.freeze,
      LANGUAGE_CODE_BE = 'be'.freeze,
      LANGUAGE_CODE_BG = 'bg'.freeze,
      LANGUAGE_CODE_BS = 'bs'.freeze,
      LANGUAGE_CODE_CA = 'ca'.freeze,
      LANGUAGE_CODE_CS = 'cs'.freeze,
      LANGUAGE_CODE_CY = 'cy'.freeze,
      LANGUAGE_CODE_DA = 'da'.freeze,
      LANGUAGE_CODE_DE = 'de'.freeze,
      LANGUAGE_CODE_EL = 'el'.freeze,
      LANGUAGE_CODE_EN = 'en'.freeze,
      LANGUAGE_CODE_ES = 'es'.freeze,
      LANGUAGE_CODE_ET = 'et'.freeze,
      LANGUAGE_CODE_FA = 'fa'.freeze,
      LANGUAGE_CODE_FI = 'fi'.freeze,
      LANGUAGE_CODE_FR = 'fr'.freeze,
      LANGUAGE_CODE_GL = 'gl'.freeze,
      LANGUAGE_CODE_HE = 'he'.freeze,
      LANGUAGE_CODE_HI = 'hi'.freeze,
      LANGUAGE_CODE_HR = 'hr'.freeze,
      LANGUAGE_CODE_HU = 'hu'.freeze,
      LANGUAGE_CODE_HY = 'hy'.freeze,
      LANGUAGE_CODE_ID = 'id'.freeze,
      LANGUAGE_CODE_IS = 'is'.freeze,
      LANGUAGE_CODE_IT = 'it'.freeze,
      LANGUAGE_CODE_JA = 'ja'.freeze,
      LANGUAGE_CODE_KK = 'kk'.freeze,
      LANGUAGE_CODE_KN = 'kn'.freeze,
      LANGUAGE_CODE_KO = 'ko'.freeze,
      LANGUAGE_CODE_LT = 'lt'.freeze,
      LANGUAGE_CODE_LV = 'lv'.freeze,
      LANGUAGE_CODE_MI = 'mi'.freeze,
      LANGUAGE_CODE_MK = 'mk'.freeze,
      LANGUAGE_CODE_MR = 'mr'.freeze,
      LANGUAGE_CODE_MS = 'ms'.freeze,
      LANGUAGE_CODE_NE = 'ne'.freeze,
      LANGUAGE_CODE_NL = 'nl'.freeze,
      LANGUAGE_CODE_NO = 'no'.freeze,
      LANGUAGE_CODE_PL = 'pl'.freeze,
      LANGUAGE_CODE_PT = 'pt'.freeze,
      LANGUAGE_CODE_RO = 'ro'.freeze,
      LANGUAGE_CODE_RU = 'ru'.freeze,
      LANGUAGE_CODE_SK = 'sk'.freeze,
      LANGUAGE_CODE_SL = 'sl'.freeze,
      LANGUAGE_CODE_SR = 'sr'.freeze,
      LANGUAGE_CODE_SV = 'sv'.freeze,
      LANGUAGE_CODE_SW = 'sw'.freeze,
      LANGUAGE_CODE_TA = 'ta'.freeze,
      LANGUAGE_CODE_TH = 'th'.freeze,
      LANGUAGE_CODE_TL = 'tl'.freeze,
      LANGUAGE_CODE_TR = 'tr'.freeze,
      LANGUAGE_CODE_UK = 'uk'.freeze,
      LANGUAGE_CODE_UR = 'ur'.freeze,
      LANGUAGE_CODE_VI = 'vi'.freeze,
      LANGUAGE_CODE_ZH = 'zh'.freeze,
      LANGUAGE_CODE_UNKNOWN_ENUM_VALUE = 'UNKNOWN_ENUM_VALUE'.freeze
    ].freeze

    # Select a model to use for generating transcriptions. Currently supported models are:
    # - ORACLE
    # - WHISPER_MEDIUM
    # - WHISPER_LARGE_V2 (upon service request)
    #
    # @return [String]
    attr_accessor :model_type

    # Domain for input files.
    # @return [String]
    attr_reader :domain

    #
    # Oracle supported language codes are (Oracle models are locale specific).
    # - en-US: English - United States (default)
    # - es-ES: Spanish - Spain
    # - pt-BR: Portuguese - Brazil
    # - en-GB: English - Great Britain
    # - en-AU: English - Australia
    # - en-IN: English - India
    # - hi-IN: Hindi - India
    # - fr-FR: French - France
    # - de-DE: German - Germany
    # - it-IT: Italian - Italy
    #
    # Whisper supported language codes are (Whisper models are locale agnostic).
    # - af: Afrikaans
    # - ar: Arabic
    # - az: Azerbaijani
    # - be: Belarusian
    # - bg: Bulgarian
    # - bs: Bosnian
    # - ca: Catalan
    # - cs: Czech
    # - cy: Welsh
    # - da: Danish
    # - de: German
    # - el: Greek
    # - en: English (default)
    # - es: Spanish
    # - et: Estonian
    # - fa: Persian
    # - fi: Finnish
    # - fr: French
    # - gl: Galician
    # - he: Hebrew
    # - hi: Hindi
    # - hr: Croatian
    # - hu: Hungarian
    # - hy: Armenian
    # - id: Indonesian
    # - is: Icelandic
    # - it: Italian
    # - ja: Japanese
    # - kk: Kazakh
    # - kn: Kannada
    # - ko: Korean
    # - lt: Lithuanian
    # - lv: Latvian
    # - mi: Maori
    # - mk: Macedonian
    # - mr: Marathi
    # - ms: Malay
    # - ne: Nepali
    # - nl: Dutch
    # - no: Norwegian
    # - pl: Polish
    # - pt: Portuguese
    # - ro: Romanian
    # - ru: Russian
    # - sk: Slovak
    # - sl: Slovenian
    # - sr: Serbian
    # - sv: Swedish
    # - sw: Swahili
    # - ta: Tamil
    # - th: Thai
    # - tl: Tagalog
    # - tr: Turkish
    # - uk: Ukrainian
    # - ur: Urdu
    # - vi: Vietnamese
    # - zh: Chinese
    #
    # @return [String]
    attr_reader :language_code

    # @return [OCI::AiSpeech::Models::TranscriptionSettings]
    attr_accessor :transcription_settings

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'modelType',
        'domain': :'domain',
        'language_code': :'languageCode',
        'transcription_settings': :'transcriptionSettings'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'model_type': :'String',
        'domain': :'String',
        'language_code': :'String',
        'transcription_settings': :'OCI::AiSpeech::Models::TranscriptionSettings'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :model_type The value to assign to the {#model_type} property
    # @option attributes [String] :domain The value to assign to the {#domain} property
    # @option attributes [String] :language_code The value to assign to the {#language_code} property
    # @option attributes [OCI::AiSpeech::Models::TranscriptionSettings] :transcription_settings The value to assign to the {#transcription_settings} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.model_type = attributes[:'modelType'] if attributes[:'modelType']
      self.model_type = "ORACLE" if model_type.nil? && !attributes.key?(:'modelType') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :modelType and :model_type' if attributes.key?(:'modelType') && attributes.key?(:'model_type')

      self.model_type = attributes[:'model_type'] if attributes[:'model_type']
      self.model_type = "ORACLE" if model_type.nil? && !attributes.key?(:'modelType') && !attributes.key?(:'model_type') # rubocop:disable Style/StringLiterals

      self.domain = attributes[:'domain'] if attributes[:'domain']
      self.domain = "GENERIC" if domain.nil? && !attributes.key?(:'domain') # rubocop:disable Style/StringLiterals

      self.language_code = attributes[:'languageCode'] if attributes[:'languageCode']
      self.language_code = "en-US" if language_code.nil? && !attributes.key?(:'languageCode') # rubocop:disable Style/StringLiterals

      raise 'You cannot provide both :languageCode and :language_code' if attributes.key?(:'languageCode') && attributes.key?(:'language_code')

      self.language_code = attributes[:'language_code'] if attributes[:'language_code']
      self.language_code = "en-US" if language_code.nil? && !attributes.key?(:'languageCode') && !attributes.key?(:'language_code') # rubocop:disable Style/StringLiterals

      self.transcription_settings = attributes[:'transcriptionSettings'] if attributes[:'transcriptionSettings']

      raise 'You cannot provide both :transcriptionSettings and :transcription_settings' if attributes.key?(:'transcriptionSettings') && attributes.key?(:'transcription_settings')

      self.transcription_settings = attributes[:'transcription_settings'] if attributes[:'transcription_settings']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] domain Object to be assigned
    def domain=(domain)
      # rubocop:disable Style/ConditionalAssignment
      if domain && !DOMAIN_ENUM.include?(domain)
        OCI.logger.debug("Unknown value for 'domain' [" + domain + "]. Mapping to 'DOMAIN_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @domain = DOMAIN_UNKNOWN_ENUM_VALUE
      else
        @domain = domain
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] language_code Object to be assigned
    def language_code=(language_code)
      # rubocop:disable Style/ConditionalAssignment
      if language_code && !LANGUAGE_CODE_ENUM.include?(language_code)
        OCI.logger.debug("Unknown value for 'language_code' [" + language_code + "]. Mapping to 'LANGUAGE_CODE_UNKNOWN_ENUM_VALUE'") if OCI.logger
        @language_code = LANGUAGE_CODE_UNKNOWN_ENUM_VALUE
      else
        @language_code = language_code
      end
      # rubocop:enable Style/ConditionalAssignment
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        model_type == other.model_type &&
        domain == other.domain &&
        language_code == other.language_code &&
        transcription_settings == other.transcription_settings
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [model_type, domain, language_code, transcription_settings].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
