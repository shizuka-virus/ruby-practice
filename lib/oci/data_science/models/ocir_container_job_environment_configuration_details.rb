# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190101
require 'date'
require_relative 'job_environment_configuration_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Environment configuration based on container image stored in OCI Container Registry.
  class DataScience::Models::OcirContainerJobEnvironmentConfigurationDetails < DataScience::Models::JobEnvironmentConfigurationDetails
    # **[Required]** The full path to the Oracle Container Repository (OCIR) registry, image, and tag in a canonical format.
    # Acceptable format:
    # `<region>.ocir.io/<registry>/<image>:<tag>`
    # `<region>.ocir.io/<registry>/<image>:<tag>@digest`
    #
    # @return [String]
    attr_accessor :image

    # The container image run [CMD](https://docs.docker.com/engine/reference/builder/#cmd) as a list of strings.
    # Use `CMD` as arguments to the `ENTRYPOINT` or the only command to run in the absence of an `ENTRYPOINT`.
    # The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
    #
    # @return [Array<String>]
    attr_accessor :cmd

    # The container image run [ENTRYPOINT](https://docs.docker.com/engine/reference/builder/#entrypoint) as a list of strings.
    # Accept the `CMD` as extra arguments.
    # The combined size of `CMD` and `ENTRYPOINT` must be less than 2048 bytes.
    # More information on how `CMD` and `ENTRYPOINT` interact are [here](https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact).
    #
    # @return [Array<String>]
    attr_accessor :entrypoint

    # The digest of the container image. For example,
    # `sha256:881303a6b2738834d795a32b4a98eb0e5e3d1cad590a712d1e04f9b2fa90a030`
    #
    # @return [String]
    attr_accessor :image_digest

    # OCID of the container image signature
    # @return [String]
    attr_accessor :image_signature_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'job_environment_type': :'jobEnvironmentType',
        'image': :'image',
        'cmd': :'cmd',
        'entrypoint': :'entrypoint',
        'image_digest': :'imageDigest',
        'image_signature_id': :'imageSignatureId'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'job_environment_type': :'String',
        'image': :'String',
        'cmd': :'Array<String>',
        'entrypoint': :'Array<String>',
        'image_digest': :'String',
        'image_signature_id': :'String'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [String] :image The value to assign to the {#image} property
    # @option attributes [Array<String>] :cmd The value to assign to the {#cmd} property
    # @option attributes [Array<String>] :entrypoint The value to assign to the {#entrypoint} property
    # @option attributes [String] :image_digest The value to assign to the {#image_digest} property
    # @option attributes [String] :image_signature_id The value to assign to the {#image_signature_id} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['jobEnvironmentType'] = 'OCIR_CONTAINER'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.image = attributes[:'image'] if attributes[:'image']

      self.cmd = attributes[:'cmd'] if attributes[:'cmd']

      self.entrypoint = attributes[:'entrypoint'] if attributes[:'entrypoint']

      self.image_digest = attributes[:'imageDigest'] if attributes[:'imageDigest']

      raise 'You cannot provide both :imageDigest and :image_digest' if attributes.key?(:'imageDigest') && attributes.key?(:'image_digest')

      self.image_digest = attributes[:'image_digest'] if attributes[:'image_digest']

      self.image_signature_id = attributes[:'imageSignatureId'] if attributes[:'imageSignatureId']

      raise 'You cannot provide both :imageSignatureId and :image_signature_id' if attributes.key?(:'imageSignatureId') && attributes.key?(:'image_signature_id')

      self.image_signature_id = attributes[:'image_signature_id'] if attributes[:'image_signature_id']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        job_environment_type == other.job_environment_type &&
        image == other.image &&
        cmd == other.cmd &&
        entrypoint == other.entrypoint &&
        image_digest == other.image_digest &&
        image_signature_id == other.image_signature_id
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [job_environment_type, image, cmd, entrypoint, image_digest, image_signature_id].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
