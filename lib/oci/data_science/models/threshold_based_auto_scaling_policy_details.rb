# Copyright (c) 2016, 2024, Oracle and/or its affiliates.  All rights reserved.
# This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.

# NOTE: This class is auto generated by OracleSDKGenerator. DO NOT EDIT. API Version: 20190101
require 'date'
require_relative 'auto_scaling_policy_details'

# rubocop:disable Lint/UnneededCopDisableDirective, Metrics/LineLength
module OCI
  # Details for a threshold-based autoscaling policy to enable on the model deployment.
  # In a threshold-based autoscaling policy, an autoscaling action is triggered when a performance metric meets
  # or exceeds a threshold.
  #
  class DataScience::Models::ThresholdBasedAutoScalingPolicyDetails < DataScience::Models::AutoScalingPolicyDetails
    # **[Required]** The list of autoscaling policy rules.
    #
    # @return [Array<OCI::DataScience::Models::MetricExpressionRule>]
    attr_accessor :rules

    # **[Required]** For a threshold-based autoscaling policy, this value is the maximum number of instances the model deployment is allowed
    # to increase to (scale out).
    #
    # @return [Integer]
    attr_accessor :maximum_instance_count

    # **[Required]** For a threshold-based autoscaling policy, this value is the minimum number of instances the model deployment is allowed
    # to decrease to (scale in).
    #
    # @return [Integer]
    attr_accessor :minimum_instance_count

    # **[Required]** For a threshold-based autoscaling policy, this value is the initial number of instances to launch in the model deployment
    # immediately after autoscaling is enabled. Note that anytime this value is updated, the number of instances will be reset
    # to this value. After autoscaling retrieves performance metrics, the number of instances is automatically adjusted from
    # this initial number to a number that is based on the limits that you set.
    #
    # @return [Integer]
    attr_accessor :initial_instance_count

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        # rubocop:disable Style/SymbolLiteral
        'auto_scaling_policy_type': :'autoScalingPolicyType',
        'rules': :'rules',
        'maximum_instance_count': :'maximumInstanceCount',
        'minimum_instance_count': :'minimumInstanceCount',
        'initial_instance_count': :'initialInstanceCount'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        # rubocop:disable Style/SymbolLiteral
        'auto_scaling_policy_type': :'String',
        'rules': :'Array<OCI::DataScience::Models::MetricExpressionRule>',
        'maximum_instance_count': :'Integer',
        'minimum_instance_count': :'Integer',
        'initial_instance_count': :'Integer'
        # rubocop:enable Style/SymbolLiteral
      }
    end

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:disable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral


    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    # @option attributes [Array<OCI::DataScience::Models::MetricExpressionRule>] :rules The value to assign to the {#rules} property
    # @option attributes [Integer] :maximum_instance_count The value to assign to the {#maximum_instance_count} property
    # @option attributes [Integer] :minimum_instance_count The value to assign to the {#minimum_instance_count} property
    # @option attributes [Integer] :initial_instance_count The value to assign to the {#initial_instance_count} property
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      attributes['autoScalingPolicyType'] = 'THRESHOLD'

      super(attributes)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      self.rules = attributes[:'rules'] if attributes[:'rules']

      self.maximum_instance_count = attributes[:'maximumInstanceCount'] if attributes[:'maximumInstanceCount']

      raise 'You cannot provide both :maximumInstanceCount and :maximum_instance_count' if attributes.key?(:'maximumInstanceCount') && attributes.key?(:'maximum_instance_count')

      self.maximum_instance_count = attributes[:'maximum_instance_count'] if attributes[:'maximum_instance_count']

      self.minimum_instance_count = attributes[:'minimumInstanceCount'] if attributes[:'minimumInstanceCount']

      raise 'You cannot provide both :minimumInstanceCount and :minimum_instance_count' if attributes.key?(:'minimumInstanceCount') && attributes.key?(:'minimum_instance_count')

      self.minimum_instance_count = attributes[:'minimum_instance_count'] if attributes[:'minimum_instance_count']

      self.initial_instance_count = attributes[:'initialInstanceCount'] if attributes[:'initialInstanceCount']

      raise 'You cannot provide both :initialInstanceCount and :initial_instance_count' if attributes.key?(:'initialInstanceCount') && attributes.key?(:'initial_instance_count')

      self.initial_instance_count = attributes[:'initial_instance_count'] if attributes[:'initial_instance_count']
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity
    # rubocop:enable Metrics/MethodLength, Layout/EmptyLines, Style/SymbolLiteral

    # rubocop:disable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines


    # Checks equality by comparing each attribute.
    # @param [Object] other the other object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        auto_scaling_policy_type == other.auto_scaling_policy_type &&
        rules == other.rules &&
        maximum_instance_count == other.maximum_instance_count &&
        minimum_instance_count == other.minimum_instance_count &&
        initial_instance_count == other.initial_instance_count
    end
    # rubocop:enable Metrics/CyclomaticComplexity, Metrics/AbcSize, Metrics/PerceivedComplexity, Layout/EmptyLines

    # @see the `==` method
    # @param [Object] other the other object to be compared
    def eql?(other)
      self == other
    end

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [auto_scaling_policy_type, rules, maximum_instance_count, minimum_instance_count, initial_instance_count].hash
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # rubocop:disable Metrics/AbcSize, Layout/EmptyLines


    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            public_method("#{key}=").call(
              attributes[self.class.attribute_map[key]]
                .map { |v| OCI::Internal::Util.convert_to_type(Regexp.last_match(1), v) }
            )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          public_method("#{key}=").call(
            OCI::Internal::Util.convert_to_type(type, attributes[self.class.attribute_map[key]])
          )
        end
        # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end
    # rubocop:enable Metrics/AbcSize, Layout/EmptyLines

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = public_method(attr).call
        next if value.nil? && !instance_variable_defined?("@#{attr}")

        hash[param] = _to_hash(value)
      end
      hash
    end

    private

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
# rubocop:enable Lint/UnneededCopDisableDirective, Metrics/LineLength
